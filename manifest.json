{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json",
        "dbt_version": "1.3.0",
        "generated_at": "2023-01-06T04:38:21.240537Z",
        "invocation_id": "50b3f5c5-6b35-44c2-9cc4-0834b6c9b1d4",
        "env": {},
        "project_id": "b924fe89d01aefe5ef73cf52f3b33d29",
        "user_id": "1eb1dd1f-18d3-41b1-bd42-ecfcd9e1295f",
        "send_anonymous_usage_stats": true,
        "adapter_type": "oracle"
    },
    "nodes": {
        "model.dga_data_model.dwh__ccl_pln": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ccl_pln"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__ccl_pln"
            ],
            "unique_id": "model.dga_data_model.dwh__ccl_pln",
            "raw_code": "{{\r\n    config(\r\n        materialized='incremental'\r\n    )\r\n}}\r\nWITH source AS(\r\n  SELECT\r\n      import_date\r\n    , date_eff\r\n    , loai_vay\r\n    , loai_vay_kt\r\n    , chi_nhanh\r\n    , cif\r\n    , br_cif\r\n    , ten_kh\r\n    , loai_hinh_kh\r\n    , class\r\n    , bank_ql\r\n    , du_no_quy_doi\r\n    , gia_tri_tsbd\r\n    , gia_tri_tsbd_khau_tru\r\n    , pln_truoc_cic\r\n    , du_phong_chung\r\n    , du_phong_cu_the\r\n    , pln_sau_cic\r\n    , du_phong_chung_cic\r\n    , du_phong_cu_the_cic\r\n  FROM {{ source('dwh', 'ccl_pln') }}\r\n  {% if is_incremental() %}\r\n  WHERE import_date > (SELECT MAX(import_date) FROM {{ this }})\r\n{% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__ccl_pln.sql",
            "original_file_path": "models\\base\\dwh__ccl_pln.sql",
            "name": "dwh__ccl_pln",
            "alias": "dwh__ccl_pln",
            "checksum": {
                "name": "sha256",
                "checksum": "16328553222f9b3a03e2d3dee17664dd409fab40d20fb7acf0960cb94c20a33f"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ccl_pln"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "incremental"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.dwh__demanddeposit_master003": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ddft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily",
                    "weekly"
                ],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__demanddeposit_master003"
            ],
            "unique_id": "model.dga_data_model.dwh__demanddeposit_master003",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"etl_date\",\r\n    start_date = \"2016335\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS(\r\n  SELECT\r\n      etl_date\r\n    , branch_sk\r\n    , account_no_sk\r\n    , account_type\r\n    , currency\r\n    , product_sk\r\n    , customer_sk\r\n    , status\r\n    , status_since\r\n    , open_date\r\n    , last_active_dt\r\n    , last_contact_dt\r\n    , rate_code\r\n    , rate\r\n    , accr_dr\r\n    , today_accr_dr\r\n    , today_dr_int_liq\r\n    , ytd_dr_int_liq\r\n    , ytd_cr_int_liq\r\n    , od_rate_code\r\n    , od_rate\r\n    , efft_rate\r\n    , acy_blocked_amt\r\n    , lcy_blocked_amt\r\n    , acy_ledger_bal\r\n    , lcy_ledger_bal\r\n    , acy_collected_bal\r\n    , lcy_collected_bal\r\n    , ac_stat_dormant\r\n    , dorm_since\r\n    , gl_code_sk\r\n    , icycle_high_int\r\n    , q1_avg_lbal\r\n    , q2_avg_lbal\r\n    , q3_avg_lbal\r\n    , q4_avg_lbal\r\n    , q1_avg_cbal\r\n    , q2_avg_cbal\r\n    , q3_avg_cbal\r\n    , q4_avg_cbal\r\n    , qtr_agr_days\r\n    , qtr_agr_lbal\r\n    , qtr_agr_cbal\r\n    , mtd_agr_days\r\n    , mtd_agr_bal\r\n    , icycle_agr_days\r\n    , icycle_agr_lbal\r\n    , icycle_agr_cbal\r\n    , icycle_min_bal\r\n    , icycle_max_bal\r\n    , mtd_min_bal\r\n    , mtd_max_bal\r\n    , ac_today_no_dr\r\n    , acy_today_tover_dr\r\n    , lcy_today_tover_dr\r\n    , ac_today_no_cr\r\n    , acy_today_tover_cr\r\n    , lcy_today_tover_cr\r\n    , sc_no_dr\r\n    , sc_tover_dr\r\n    , sc_no_cr\r\n    , sc_tover_cr\r\n    , maker_sk\r\n    , maker_dt_stamp\r\n    , checker_sk\r\n    , number_debit_mtd\r\n    , amount_debit_mtd\r\n    , number_credit_mtd\r\n    , amount_credit_mtd\r\n    , yesterday_balance\r\n    , int_paid_td\r\n    , number_debit_ytd\r\n    , amount_debit_ytd\r\n    , number_credit_ytd\r\n    , amount_credit_ytd\r\n    , book_no\r\n    , last_trn_date\r\n    , aggregate_balance\r\n    , od_accr_int\r\n    , od_exss_int\r\n    , od_accr_int_day\r\n    , od_exss_int_day\r\n  FROM {{ source('dwh', 'ddft_master') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE etl_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__demanddeposit_master003.sql",
            "original_file_path": "models\\base\\dwh__demanddeposit_master003.sql",
            "name": "dwh__demanddeposit_master003",
            "alias": "dwh__demanddeposit_master003",
            "checksum": {
                "name": "sha256",
                "checksum": "bc033a9c72a56e62a3019ace82d875bef4ed02936940f08ee3e798ff99464ed8"
            },
            "tags": [
                "daily",
                "weekly"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ddft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily",
                    "weekly"
                ],
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359"
            },
            "created_at": 1672822572.0014799
        },
        "model.dga_data_model.dwh__demanddeposit_transaction001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.generate_surrogate_key",
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ddft_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "trn_date",
                "start_date": "2011206",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__demanddeposit_transaction001"
            ],
            "unique_id": "model.dga_data_model.dwh__demanddeposit_transaction001",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"trn_date\",\r\n    start_date = \"2011206\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS (\r\n  SELECT\r\n    trn_ref_no,\r\n    src_ref_no,\r\n    sub_ref_no,\r\n    affect_code,\r\n    trn_sk,\r\n    trn_time,\r\n    trn_date,\r\n    value_date,\r\n    currency,\r\n    dorc_ind,\r\n    acy_amount,\r\n    exchange_rate,\r\n    lcy_amount,\r\n    product_sk,\r\n    status,\r\n    channel,\r\n    channel_trn,\r\n    ac_branch_sk,\r\n    trn_branch_sk,\r\n    account_no_sk,\r\n    customer_sk,\r\n    gl_code_sk,\r\n    maker_sk,\r\n    checker_sk,\r\n    related_person,\r\n    related_account,\r\n    trf_sys,\r\n    trf_bank_sk,\r\n    remark,\r\n    seq_number,\r\n    posting_order,\r\n    before_balance,\r\n    current_balance,\r\n    user_id,\r\n    eqv_tramt,\r\n    {{ generate_surrogate_key([\r\n        'trn_ref_no'\r\n      ,  'src_ref_no'\r\n      , 'sub_ref_no'\r\n      , 'affect_code'\r\n      , 'trn_sk'\r\n      , 'trn_time'\r\n      , 'trn_date'\r\n      , 'value_date'\r\n      , 'currency'\r\n      , 'dorc_ind'\r\n      , 'acy_amount'\r\n      , 'exchange_rate'\r\n      , 'lcy_amount'\r\n      , 'product_sk'\r\n      , 'status'\r\n      , 'channel'\r\n      , 'channel_trn'\r\n      , 'ac_branch_sk'\r\n      , 'trn_branch_sk'\r\n      , 'account_no_sk'\r\n      , 'customer_sk'\r\n      , 'gl_code_sk'\r\n      , 'maker_sk'\r\n      , 'checker_sk'\r\n      , 'related_person'\r\n      , 'related_account'\r\n      , 'trf_sys'\r\n      , 'trf_bank_sk'\r\n      , 'remark'\r\n      , 'seq_number'\r\n      , 'posting_order'\r\n      , 'before_balance'\r\n      , 'current_balance'\r\n      , 'user_id'\r\n      , 'eqv_tramt'\r\n      ]) }} AS surrogate_key\r\n  FROM {{ source('dwh', 'ddft_transaction') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__demanddeposit_transaction001.sql",
            "original_file_path": "models\\base\\dwh__demanddeposit_transaction001.sql",
            "name": "dwh__demanddeposit_transaction001",
            "alias": "dwh__demanddeposit_transaction001",
            "checksum": {
                "name": "sha256",
                "checksum": "8d8d2e9eaa2594817bd603bba7813f2c39f5fd4838c594b73cabcbd9a68da1b7"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ddft_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "trn_date",
                "start_date": "2011206",
                "stop_date": "2022359"
            },
            "created_at": 1672822572.0014799
        },
        "model.dga_data_model.dwh__fixeddeposit_master003": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.fdft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__fixeddeposit_master003"
            ],
            "unique_id": "model.dga_data_model.dwh__fixeddeposit_master003",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"etl_date\",\r\n    start_date = \"2016335\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS (\r\n  SELECT\r\n      etl_date\r\n    , branch_sk\r\n    , account_sk\r\n    , currency\r\n    , product_sk\r\n    , customer_sk\r\n    , status\r\n    , status_since\r\n    , open_date\r\n    , term\r\n    , maturity_date\r\n    , last_renew_bal\r\n    , last_renew_date\r\n    , renew_count\r\n    , last_update_dt\r\n    , rate\r\n    , rate_review_dt\r\n    , accr_amount\r\n    , today_accr_dr\r\n    , expected_accr_int\r\n    , last_liq_date\r\n    , next_liq_date\r\n    , withdrawable_int\r\n    , org_discount_amt\r\n    , org_amount\r\n    , acy_blocked_amt\r\n    , acy_ledger_bal\r\n    , lcy_ledger_bal\r\n    , ac_stat_dormant\r\n    , dorm_since\r\n    , acy_aggr_bal\r\n    , aggr_days\r\n    , gl_code_sk\r\n    , maker_sk\r\n    , maker_dt_stamp\r\n    , officer_sk\r\n    , auto_renew\r\n    , renew_bal\r\n    , today_backdate_int\r\n    , mtd_accr_int\r\n    , last_int_amt_paid\r\n    , penanty_amount\r\n    , today_tover_int_dr\r\n    , today_tover_int_cr\r\n    , today_int_drop\r\n    , today_int_paid\r\n    , ctd_int_deposit\r\n    , ctd_int_withdraw\r\n    , ytd_interest_paid\r\n    , ctd_interest_paid\r\n    , highist_interest_earn\r\n    , yesterday_balance\r\n  FROM {{ source('dwh', 'fdft_master') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE etl_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__fixeddeposit_master003.sql",
            "original_file_path": "models\\base\\dwh__fixeddeposit_master003.sql",
            "name": "dwh__fixeddeposit_master003",
            "alias": "dwh__fixeddeposit_master003",
            "checksum": {
                "name": "sha256",
                "checksum": "7134d16fcf0ba14907763f674e382674beb4e648420596e161e85e50489bf827"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "fdft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359"
            },
            "created_at": 1672822572.0014799
        },
        "model.dga_data_model.dwh__fixeddeposit_transaction001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.generate_surrogate_key",
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.fdft_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "trn_date",
                "start_date": "2012000",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__fixeddeposit_transaction001"
            ],
            "unique_id": "model.dga_data_model.dwh__fixeddeposit_transaction001",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"trn_date\",\r\n    start_date = \"2012000\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS (\r\n  SELECT\r\n      trn_ref_no\r\n    , sub_ref_no\r\n    , src_ref_no\r\n    , trn_sk\r\n    , affect_code\r\n    , trn_branch_sk\r\n    , trn_time\r\n    , trn_date\r\n    , value_date\r\n    , dorc_ind\r\n    , acy_amount\r\n    , currency\r\n    , exchange_rate\r\n    , lcy_amount\r\n    , ac_branch_sk\r\n    , account_no_sk\r\n    , gl_code_sk\r\n    , customer_sk\r\n    , product_sk\r\n    , prate\r\n    , rate\r\n    , channel\r\n    , channel_trn_code\r\n    , maker_sk\r\n    , checker_sk\r\n    , seq_number\r\n    , channel_trn\r\n    , remark\r\n    , before_balance\r\n    , current_balance\r\n    , posting_order\r\n    , {{ generate_surrogate_key([\r\n        'trn_ref_no'\r\n      , 'sub_ref_no'\r\n      , 'src_ref_no'\r\n      , 'trn_sk'\r\n      , 'affect_code'\r\n      , 'trn_branch_sk'\r\n      , 'trn_time'\r\n      , 'trn_date'\r\n      , 'value_date'\r\n      , 'dorc_ind'\r\n      , 'acy_amount'\r\n      , 'currency'\r\n      , 'exchange_rate'\r\n      , 'lcy_amount'\r\n      , 'ac_branch_sk'\r\n      , 'account_no_sk'\r\n      , 'gl_code_sk'\r\n      , 'customer_sk'\r\n      , 'product_sk'\r\n      , 'prate'\r\n      , 'rate'\r\n      , 'channel'\r\n      , 'channel_trn_code'\r\n      , 'maker_sk'\r\n      , 'checker_sk'\r\n      , 'seq_number'\r\n      , 'channel_trn'\r\n      , 'remark'\r\n      , 'before_balance'\r\n      , 'current_balance'\r\n      , 'posting_order'\r\n      ]) }} AS surrogate_key\r\n  FROM {{ source('dwh', 'fdft_transaction') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__fixeddeposit_transaction001.sql",
            "original_file_path": "models\\base\\dwh__fixeddeposit_transaction001.sql",
            "name": "dwh__fixeddeposit_transaction001",
            "alias": "dwh__fixeddeposit_transaction001",
            "checksum": {
                "name": "sha256",
                "checksum": "4c0c647b596a774edc0afdfc0680be41a248d4a3cddedde97544df787f96dbd5"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "fdft_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "trn_date",
                "start_date": "2012000",
                "stop_date": "2022359"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.dwh__glft_his_transaction": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.glft_his_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "trn_date",
                "start_date": "2022000",
                "stop_date": "2022208",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__glft_his_transaction"
            ],
            "unique_id": "model.dga_data_model.dwh__glft_his_transaction",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"trn_date\",\r\n    start_date = \"2022000\",\r\n    stop_date = \"2022208\")\r\n}}\r\nWITH source AS(\r\n  SELECT\r\n      posting_order\r\n    , seq_number\r\n    , acc_branch_sk\r\n    , gl_code_sk\r\n    , trn_code\r\n    , dorc\r\n    , affect_code\r\n    , trn_amount\r\n    , trn_date\r\n    , value_date\r\n    , trn_desc\r\n    , backdate\r\n    , trn_source\r\n    , src_branch_sk\r\n    , trn_currency\r\n    , foreign_currency\r\n    , ref_number\r\n    , module\r\n    , gl_interface\r\n    , gl_group\r\n    , convert_currency\r\n    , conversion_rate\r\n    , maker_id\r\n    , channel\r\n    , remark\r\n    , exchange_rate\r\n    , local_equivalent\r\n    , org_amount\r\n    , org_currency\r\n    , ticket\r\n    , checker_id\r\n    , trn_time\r\n    , correction\r\n    , \"key\"\r\n    , src_ref_no\r\n  FROM {{ source('dwh', 'glft_his_transaction') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n{% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__glft_his_transaction.sql",
            "original_file_path": "models\\base\\dwh__glft_his_transaction.sql",
            "name": "dwh__glft_his_transaction",
            "alias": "dwh__glft_his_transaction",
            "checksum": {
                "name": "sha256",
                "checksum": "ef8a44673c499fea2f0bb17f449a8855a21f45ffd4d66a7ea55479e2a6151a61"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "glft_his_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "trn_date",
                "start_date": "2022000",
                "stop_date": "2022208"
            },
            "created_at": 1672822571.663239
        },
        "model.dga_data_model.dwh__loan_master003": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.lnft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily",
                    "weekly"
                ],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__loan_master003"
            ],
            "unique_id": "model.dga_data_model.dwh__loan_master003",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"etl_date\",\r\n    start_date = \"2016335\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS (\r\n  SELECT\r\n      etl_date\r\n    , branch_code_sk\r\n    , account_no_sk\r\n    , customer_sk\r\n    , contract_sk\r\n    , aano_sk\r\n    , currency\r\n    , product_sk\r\n    , acy_original_amt\r\n    , lcy_original_amt\r\n    , drawdown_limit\r\n    , released_amt\r\n    , acy_outstanding_bal\r\n    , lcy_outstanding_bal\r\n    , status\r\n    , status_since\r\n    , classified_type\r\n    , overdue_status_sk\r\n    , group_overdue_status_sk\r\n    , final_maturity_dt\r\n    , interest\r\n    , based_rate\r\n    , next_review_dt\r\n    , rate_review_dt\r\n    , prime_review_dt\r\n    , last_pliq_amt\r\n    , last_pliq_dt\r\n    , next_pliq_dt\r\n    , last_iliq_dt\r\n    , next_iliq_dt\r\n    , payment_amt\r\n    , final_payment_amt\r\n    , ltd_int_paid\r\n    , ltd_prn_paid\r\n    , last_accr_amt\r\n    , acy_std_accr_amt\r\n    , lcy_std_accr_amt\r\n    , acy_std_accr_penalty_amt\r\n    , lcy_std_accr_penalty_amt\r\n    , acy_ltd_accr_amt\r\n    , lcy_ltd_accr_amt\r\n    , prin_overdue_days\r\n    , acy_prin_overdue_amt\r\n    , int_overdue_days\r\n    , acy_int_overdue_amt\r\n    , acy_total_overdue_amt\r\n    , lcy_total_overdue_amt\r\n    , acy_late_charge\r\n    , dealer_id\r\n    , purpose_sk\r\n    , industry_sk\r\n    , tenor_code_sk\r\n    , maker_sk\r\n    , maker_dt_stamp\r\n    , checker_sk\r\n    , checker_dt_stamp\r\n    , officer_sk\r\n    , ftp_rate\r\n    , actual_overdue_status_sk\r\n    , bil_prin_amt\r\n    , bil_int_amt\r\n    , bil_lc_amt\r\n    , lcy_prin_overdue_amt\r\n    , lcy_int_overdue_amt\r\n    , lcy_late_charge\r\n    , part_industry_sk\r\n    , year_base\r\n  FROM {{ source('dwh', 'lnft_master') }}\r\n  where __PERIOD_FILTER__\r\n--   {% if is_incremental() %}\r\n--   WHERE etl_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n--   {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__loan_master003.sql",
            "original_file_path": "models\\base\\dwh__loan_master003.sql",
            "name": "dwh__loan_master003",
            "alias": "dwh__loan_master003",
            "checksum": {
                "name": "sha256",
                "checksum": "ddf37c30627a4104e3f904cc90f0c547c5acc3ee8e1128177d6d55bfef2cb863"
            },
            "tags": [
                "daily",
                "weekly"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "lnft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily",
                    "weekly"
                ],
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.dwh__loan_transaction001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.generate_surrogate_key",
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.lnft_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "tran_date",
                "start_date": "2003226",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "dwh__loan_transaction001"
            ],
            "unique_id": "model.dga_data_model.dwh__loan_transaction001",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"tran_date\",\r\n    start_date = \"2003226\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS (\r\n  SELECT\r\n      trn_ref_no\r\n    , src_ref_no\r\n    , tran_sk\r\n    , affect_code\r\n    , trn_branch_sk\r\n    , trn_time\r\n    , tran_date\r\n    , value_date\r\n    , dorc_ind\r\n    , acy_amount\r\n    , currency\r\n    , exchange_rate\r\n    , lcy_amount\r\n    , ac_branch_sk\r\n    , account_no_sk\r\n    , gl_code_sk\r\n    , charge_type\r\n    , product_sk\r\n    , acy_runing_bal\r\n    , lcy_runing_bal\r\n    , acy_oustanding_bal\r\n    , lcy_oustanding_bal\r\n    , old_od_status_sk\r\n    , new_od_status_sk\r\n    , old_ac_status\r\n    , new_ac_status\r\n    , old_interest\r\n    , new_interest\r\n    , channel\r\n    , maker_sk\r\n    , checker_sk\r\n    , description\r\n    , customer_sk\r\n    , seq_number\r\n    , channel_trn\r\n    , remark\r\n    , {{ generate_surrogate_key([   'trn_ref_no'\r\n      , 'src_ref_no'\r\n      , 'tran_sk'\r\n      , 'affect_code'\r\n      , 'trn_branch_sk'\r\n      , 'trn_time'\r\n      , 'tran_date'\r\n      , 'value_date'\r\n      , 'dorc_ind'\r\n      , 'acy_amount'\r\n      , 'currency'\r\n      , 'exchange_rate'\r\n      , 'lcy_amount'\r\n      , 'ac_branch_sk'\r\n      , 'account_no_sk'\r\n      , 'gl_code_sk'\r\n      , 'charge_type'\r\n      , 'product_sk'\r\n      , 'acy_runing_bal'\r\n      , 'lcy_runing_bal'\r\n      , 'acy_oustanding_bal'\r\n      , 'lcy_oustanding_bal'\r\n      , 'old_od_status_sk'\r\n      , 'new_od_status_sk'\r\n      , 'old_ac_status'\r\n      , 'new_ac_status'\r\n      , 'old_interest'\r\n      , 'new_interest'\r\n      , 'channel'\r\n      , 'maker_sk'\r\n      , 'checker_sk'\r\n      , 'description'\r\n      , 'customer_sk'\r\n      , 'seq_number'\r\n      , 'channel_trn'\r\n      , 'remark'\r\n      ]) }} AS surrogate_key\r\n  FROM {{ source('dwh', 'lnft_transaction') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE tran_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\dwh__loan_transaction001.sql",
            "original_file_path": "models\\base\\dwh__loan_transaction001.sql",
            "name": "dwh__loan_transaction001",
            "alias": "dwh__loan_transaction001",
            "checksum": {
                "name": "sha256",
                "checksum": "aebe36ae1804dbad41941fb3573c8bfcb386958281574f320cc4529ef810f7eb"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "lnft_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "tran_date",
                "start_date": "2003226",
                "stop_date": "2022359"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.htestt": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ddft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "insert_by_julian_period",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359",
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "htestt"
            ],
            "unique_id": "model.dga_data_model.htestt",
            "raw_code": "{{\r\n  config(\r\n    materialized = \"insert_by_julian_period\",\r\n    period = \"day\",\r\n    timestamp_field = \"etl_date\",\r\n    start_date = \"2016335\",\r\n    stop_date = \"2022359\")\r\n}}\r\nWITH source AS(\r\n  SELECT\r\n      etl_date\r\n    , branch_sk\r\n    , account_no_sk\r\n    , account_type\r\n    , currency\r\n    , product_sk\r\n    , customer_sk\r\n    , status\r\n    , status_since\r\n    , open_date\r\n    , last_active_dt\r\n    , last_contact_dt\r\n    , rate_code\r\n    , rate\r\n    , accr_dr\r\n    , today_accr_dr\r\n    , today_dr_int_liq\r\n    , ytd_dr_int_liq\r\n    , ytd_cr_int_liq\r\n    , od_rate_code\r\n    , od_rate\r\n    , efft_rate\r\n    , acy_blocked_amt\r\n    , lcy_blocked_amt\r\n    , acy_ledger_bal\r\n    , lcy_ledger_bal\r\n    , acy_collected_bal\r\n    , lcy_collected_bal\r\n    , ac_stat_dormant\r\n    , dorm_since\r\n    , gl_code_sk\r\n    , icycle_high_int\r\n    , q1_avg_lbal\r\n    , q2_avg_lbal\r\n    , q3_avg_lbal\r\n    , q4_avg_lbal\r\n    , q1_avg_cbal\r\n    , q2_avg_cbal\r\n    , q3_avg_cbal\r\n    , q4_avg_cbal\r\n    , qtr_agr_days\r\n    , qtr_agr_lbal\r\n    , qtr_agr_cbal\r\n    , mtd_agr_days\r\n    , mtd_agr_bal\r\n    , icycle_agr_days\r\n    , icycle_agr_lbal\r\n    , icycle_agr_cbal\r\n    , icycle_min_bal\r\n    , icycle_max_bal\r\n    , mtd_min_bal\r\n    , mtd_max_bal\r\n    , ac_today_no_dr\r\n    , acy_today_tover_dr\r\n    , lcy_today_tover_dr\r\n    , ac_today_no_cr\r\n    , acy_today_tover_cr\r\n    , lcy_today_tover_cr\r\n    , sc_no_dr\r\n    , sc_tover_dr\r\n    , sc_no_cr\r\n    , sc_tover_cr\r\n    , maker_sk\r\n    , maker_dt_stamp\r\n    , checker_sk\r\n    , number_debit_mtd\r\n    , amount_debit_mtd\r\n    , number_credit_mtd\r\n    , amount_credit_mtd\r\n    , yesterday_balance\r\n    , int_paid_td\r\n    , number_debit_ytd\r\n    , amount_debit_ytd\r\n    , number_credit_ytd\r\n    , amount_credit_ytd\r\n    , book_no\r\n    , last_trn_date\r\n    , aggregate_balance\r\n    , od_accr_int\r\n    , od_exss_int\r\n    , od_accr_int_day\r\n    , od_exss_int_day\r\n  FROM {{ source('dwh', 'ddft_master') }}\r\n  where __PERIOD_FILTER__\r\n  {% if is_incremental() %}\r\n  WHERE etl_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\nSELECT * FROM source",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\htestt.sql",
            "original_file_path": "models\\base\\htestt.sql",
            "name": "htestt",
            "alias": "htestt",
            "checksum": {
                "name": "sha256",
                "checksum": "bc033a9c72a56e62a3019ace82d875bef4ed02936940f08ee3e798ff99464ed8"
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ddft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "insert_by_julian_period",
                "period": "day",
                "timestamp_field": "etl_date",
                "start_date": "2016335",
                "stop_date": "2022359"
            },
            "created_at": 1672822571.6881611
        },
        "model.dga_data_model.imp_list_fraudulent_sale": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "monthly"
                ],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "imp_list_fraudulent_sale"
            ],
            "unique_id": "model.dga_data_model.imp_list_fraudulent_sale",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT\r\n    tt\r\n  , th\u00f4ng_tin_ng\u01b0\u1eddi_n\u1ed9p_ti\u1ec1n_tt_td\r\n  , t\u00ean_ch\u1ee7_th\u1ebb\r\n  , so_the\r\n  , CAST(cif AS INT DEFAULT NULL ON CONVERSION ERROR) AS cif\r\n  , cmnd\r\n  , hmtd\r\nFROM\r\n  df_2.huyendtk3_ds_sale_khong_202209",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\imp_list_fraudulent_sale.sql",
            "original_file_path": "models\\base\\imp_list_fraudulent_sale.sql",
            "name": "imp_list_fraudulent_sale",
            "alias": "imp_list_fraudulent_sale",
            "checksum": {
                "name": "sha256",
                "checksum": "da91779f198be1a354b4e29b784e78a7a4766d8875ff8823660572a3263385a0"
            },
            "tags": [
                "monthly"
            ],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "monthly"
                ],
                "materialized": "ephemeral"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.imp__restrictive_customer": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.dynamic_source",
                    "macro.dga_data_model.generate_surrogate_key"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "monthly"
                ],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "surrogate_key",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "imp__restrictive_customer"
            ],
            "unique_id": "model.dga_data_model.imp__restrictive_customer",
            "raw_code": "{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key= 'surrogate_key'\r\n  )\r\n}}\r\nWITH source AS (\r\nSELECT\r\n    to_number(to_char(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')) AS month\r\n  , cmnd\r\n  , h\u1ecd_v\u00e0_t\u00ean AS full_name\r\n  , c\u00f3_thu\u1ed9c_\u0111\u1ed1i_t\u01b0\u1ee3ng_h\u1ea1n_ch\u1ebf_kh\u00f4ng AS is_restrictive_customer\r\n  , cif\r\nFROM\r\n  {{ dynamic_source ( 'df_2', 'tunglt_topup_ds_cam_hanche_tindung')}}\r\n)\r\n, sky AS (\r\n  SELECT\r\n      month\r\n    , cmnd\r\n    , full_name\r\n    , is_restrictive_customer\r\n    , cif\r\n    , {{ generate_surrogate_key(['month', 'cmnd', 'full_name', 'is_restrictive_customer', 'cif'])}} AS surrogate_key\r\n  FROM\r\n    source\r\n)\r\nSELECT * FROM sky",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\imp__restrictive_customer.sql",
            "original_file_path": "models\\base\\imp__restrictive_customer.sql",
            "name": "imp__restrictive_customer",
            "alias": "imp__restrictive_customer",
            "checksum": {
                "name": "sha256",
                "checksum": "d0883b80d67c0788c4f9a4c8ecb7c0b4a370c4b0ea11813b4035f361120e087c"
            },
            "tags": [
                "monthly"
            ],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "monthly"
                ],
                "materialized": "incremental",
                "unique_key": "surrogate_key"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.imp__topup_bscore": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.dynamic_source",
                    "macro.dga_data_model.generate_surrogate_key"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "surrogate_key",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "imp__topup_bscore"
            ],
            "unique_id": "model.dga_data_model.imp__topup_bscore",
            "raw_code": "{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key= 'surrogate_key'\r\n  )\r\n}}\r\nWITH source AS (\r\n  SELECT\r\n    to_number(to_char(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')) AS month\r\n    , cif\r\n    , id_ho_so AS id\r\n    , name\r\n    , hang AS rank\r\n    , b\u1ed9_c\u00e2u_h\u1ecfi_ch\u1ea5m_\u0111i\u1ec3m\r\n  FROM\r\n    {{ dynamic_source ('df_2', 'tunglt_topup_bscore')}}\r\n)\r\n, sky AS (\r\n  SELECT\r\n    month\r\n    , cif\r\n    , id\r\n    , rank\r\n    , b\u1ed9_c\u00e2u_h\u1ecfi_ch\u1ea5m_\u0111i\u1ec3m\r\n    , {{ generate_surrogate_key(['month', 'cif', 'id', 'rank', 'b\u1ed9_c\u00e2u_h\u1ecfi_ch\u1ea5m_\u0111i\u1ec3m' ] ) }} AS surrogate_key\r\n  FROM\r\n    source\r\n)\r\nSELECT * FROM sky",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\imp__topup_bscore.sql",
            "original_file_path": "models\\base\\imp__topup_bscore.sql",
            "name": "imp__topup_bscore",
            "alias": "imp__topup_bscore",
            "checksum": {
                "name": "sha256",
                "checksum": "128f22b282ddbda5e4454de662af3a1bc16bcc4e1593be51a4cd1c2753ff29d9"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "unique_key": "surrogate_key"
            },
            "created_at": 1672822571.7129226
        },
        "model.dga_data_model.landing__lc_cc_mast": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "source.dga_data_model.dga_ingest.lc_cc_mast"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "base",
                "landing__lc_cc_mast"
            ],
            "unique_id": "model.dga_data_model.landing__lc_cc_mast",
            "raw_code": "{{\r\n    config(\r\n        materialized='incremental'\r\n    )\r\n}}\r\nSELECT \r\n    brn\r\n  , cifno\r\n  , acno\r\n  , prdcode\r\n  , card_number\r\n  , pstd\r\n  , p_beg\r\n  , p_mov_d\r\n  , p_mov_c\r\n  , p_end\r\n  , i_beg\r\n  , i_mov_d\r\n  , i_mov_c\r\n  , i_end\r\n  , f_beg\r\n  , f_mov_d\r\n  , f_mov_c\r\n  , f_end\r\n  , bucket\r\n  , status\r\n  , ymbucket\r\n  , tmbucket\r\n  , ymbucket_d\r\n  , tmbucket_d\r\n  , ydebtgrp\r\n  , tdebtgrp\r\n  , ydebtgrp_d\r\n  , tdebtgrp_d\r\n  , debtgrpcore\r\n  , matd\r\n  , ccy\r\nFROM\r\n  {{ source('dga_ingest', 'lc_cc_mast') }}\r\n{% if is_incremental() %}\r\n  WHERE pstd > (SELECT MAX(pstd) FROM {{ this }})\r\n{% endif %}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "base\\landing__lc_cc_mast.sql",
            "original_file_path": "models\\base\\landing__lc_cc_mast.sql",
            "name": "landing__lc_cc_mast",
            "alias": "landing__lc_cc_mast",
            "checksum": {
                "name": "sha256",
                "checksum": "43c7e8375d60dbea62208146883adb22b225b9773fa836d27bfbcc92c42649f0"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [
                [
                    "dga_ingest",
                    "lc_cc_mast"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\base\\base.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "incremental"
            },
            "created_at": 1672822572.0171087
        },
        "model.dga_data_model.int__casa_account": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg_core__demanddeposit_master001",
                    "model.dga_data_model.stg_core__demanddeposit_master002",
                    "model.dga_data_model.int__customer"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "account_number",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"account_number, customer_number \") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int__casa_account"
            ],
            "unique_id": "model.dga_data_model.int__casa_account",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    unique_key = 'account_number',\r\n    post_hook= '{{ create_index( this, \"account_number, customer_number \") }}'\r\n  )\r\n}}\r\nWITH dat_all_account AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.customer_number\r\n    , a.account_number\r\n    , a.currency_type\r\n    , a.product_code\r\n    , a.account_name\r\n    , a.open_date\r\n    , a.open_time\r\n    , a.status\r\n    , a.status_date\r\n    , a.workstation_id\r\n    , a.user_id\r\n    , a.branch_code\r\n    , b.subbranch_no\r\n  FROM\r\n    {{ ref('stg_core__demanddeposit_master001')}} a\r\n  LEFT JOIN {{ ref('stg_core__demanddeposit_master002')}} b ON a.account_number = b.account_no AND b.rec_current_ind = 'Y'\r\n)\r\n, dat_overdraft_rn AS (\r\n  SELECT\r\n      account_number\r\n    , rate AS od_rate\r\n    , rate_number AS od_reate_number\r\n    , MIN(agreement_date_7) OVER(PARTITION BY account_number) AS od_agreement_date_original\r\n    , MIN(expiration_date_7) OVER(PARTITION BY account_number) AS od_expiration_date_original\r\n    , agreement_date_7 AS od_agreement_date_current\r\n    , expiration_date_7 AS od_expiration_date_current\r\n    , authorized_limit AS od_authorized_limit\r\n    , draw_limit AS od_draw_limit\r\n    , ROW_NUMBER() OVER(PARTITION BY account_number ORDER BY sequence_number DESC) AS rn\r\n  FROM\r\n      overdraft_tier001\r\n)\r\n, dat_overdraft AS (\r\n  SELECT\r\n      account_number\r\n    , od_rate\r\n    , od_reate_number\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(od_agreement_date_original))  AS od_agreement_date_original\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(od_expiration_date_original)) AS od_expiration_date_original\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(od_agreement_date_current))   AS od_agreement_date_current\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(od_expiration_date_current))  AS od_expiration_date_current\r\n    , od_authorized_limit\r\n    , od_draw_limit\r\n  FROM\r\n      dat_overdraft_rn\r\n  WHERE\r\n      rn = 1\r\n)\r\n, dat_all_account_w_od_inf AS (\r\n  SELECT\r\n      a.*\r\n    , b.od_rate AS od_rate_current\r\n    , b.od_reate_number AS od_reate_number_current\r\n    , b.od_agreement_date_original\r\n    , b.od_expiration_date_original\r\n    , b.od_agreement_date_current\r\n    , b.od_expiration_date_current\r\n    , b.od_authorized_limit AS od_authorized_limit_current\r\n    , b.od_draw_limit AS od_draw_limit_current\r\n    , CASE\r\n        WHEN b.account_number IS NOT NULL \r\n          AND od_authorized_limit > 0\r\n          AND od_expiration_date_current > to_number(to_char(sysdate, 'YYYYDDD'))\r\n          AND status = 1 THEN 1\r\n        ELSE 0\r\n      END AS is_overdraft_current\r\n  FROM\r\n    dat_all_account a\r\n  LEFT JOIN dat_overdraft b ON a.account_number = b.account_number\r\n)\r\n, dat_all_account_final_w_source_customer AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.customer_number\r\n    , a.account_number\r\n    , a.currency_type\r\n    , a.product_code\r\n    , a.account_name\r\n    , a.open_date\r\n    , a.open_time\r\n    , a.status\r\n    , a.status_date\r\n    , a.workstation_id\r\n    , a.user_id\r\n    , a.branch_code\r\n    , a.subbranch_no\r\n    , a.od_rate_current\r\n    , a.od_reate_number_current\r\n    , a.od_agreement_date_original\r\n    , a.od_expiration_date_original\r\n    , a.od_agreement_date_current\r\n    , a.od_expiration_date_current\r\n    , a.od_authorized_limit_current\r\n    , a.od_draw_limit_current\r\n    , a.is_overdraft_current\r\n    , ROW_NUMBER() OVER(PARTITION BY a.customer_number ORDER BY a.open_date , a.open_time) AS rn\r\n    , b.source_customer\r\n  FROM\r\n      dat_all_account_w_od_inf a\r\n  LEFT JOIN {{ ref('int__customer')}} b ON a.customer_number = b.customer_number\r\n)\r\n, dat_result AS (\r\n  SELECT\r\n      etl_date\r\n    , customer_number\r\n    , account_number\r\n    , currency_type\r\n    , product_code\r\n    , account_name\r\n    , open_date\r\n    , open_time\r\n    , status\r\n    , status_date\r\n    , workstation_id\r\n    , user_id\r\n    , branch_code\r\n    , subbranch_no\r\n    , od_rate_current\r\n    , od_reate_number_current\r\n    , od_agreement_date_original\r\n    , od_expiration_date_original\r\n    , od_agreement_date_current\r\n    , od_expiration_date_current\r\n    , od_authorized_limit_current\r\n    , od_draw_limit_current\r\n    , is_overdraft_current\r\n    , CASE\r\n        WHEN rn = 1 THEN source_customer\r\n        WHEN product_code LIKE '%OL'\r\n          OR product_code LIKE '%ONL'\r\n          OR user_id LIKE 'EBANKING%' \r\n          THEN 1008\r\n        ELSE 9999\r\n      END AS source_account\r\n  FROM\r\n    dat_all_account_final_w_source_customer\r\n)\r\n, dat_hash AS (  \r\n  SELECT\r\n      standard_hash(customer_number\r\n                    || '#'\r\n                    || account_number\r\n                    || '#'\r\n                    || currency_type\r\n                    || '#'\r\n                    || product_code\r\n                    || '#'\r\n                    || account_name\r\n                    || '#'\r\n                    || open_date\r\n                    || '#'\r\n                    || open_time\r\n                    || '#'\r\n                    || status\r\n                    || '#'\r\n                    || status_date\r\n                    || '#'\r\n                    || workstation_id\r\n                    || '#'\r\n                    || user_id\r\n                    || '#'\r\n                    || branch_code\r\n                    || '#'\r\n                    || subbranch_no\r\n                    || '#'\r\n                    || od_rate_current\r\n                    || '#'\r\n                    || od_reate_number_current\r\n                    || '#'\r\n                    || od_agreement_date_original\r\n                    || '#'\r\n                    || od_expiration_date_original\r\n                    || '#'\r\n                    || od_agreement_date_current\r\n                    || '#'\r\n                    || od_expiration_date_current\r\n                    || '#'\r\n                    || od_authorized_limit_current\r\n                    || '#'\r\n                    || od_draw_limit_current\r\n                    || '#'\r\n                    || is_overdraft_current\r\n                    || '#'\r\n                    || source_account) AS hash_diff\r\n    , etl_date\r\n    , customer_number\r\n    , account_number\r\n    , currency_type\r\n    , product_code\r\n    , account_name\r\n    , open_date\r\n    , open_time\r\n    , status\r\n    , status_date\r\n    , workstation_id\r\n    , user_id\r\n    , branch_code\r\n    , subbranch_no\r\n    , od_rate_current\r\n    , od_reate_number_current\r\n    , od_agreement_date_original\r\n    , od_expiration_date_original\r\n    , od_agreement_date_current\r\n    , od_expiration_date_current\r\n    , od_authorized_limit_current\r\n    , od_draw_limit_current\r\n    , is_overdraft_current\r\n    , source_account\r\n  FROM\r\n      dat_result\r\n)\r\n  SELECT * FROM dat_hash",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int__casa_account.sql",
            "original_file_path": "models\\int\\int__casa_account.sql",
            "name": "int__casa_account",
            "alias": "int__casa_account",
            "checksum": {
                "name": "sha256",
                "checksum": "6f485614c9c4d3dc8dd9d16f4a42406dc8a4ba21ca1969d60fa20c96efb5d446"
            },
            "tags": [],
            "refs": [
                [
                    "stg_core__demanddeposit_master001"
                ],
                [
                    "stg_core__demanddeposit_master002"
                ],
                [
                    "int__customer"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "unique_key": "account_number",
                "post-hook": [
                    "{{ create_index( this, \"account_number, customer_number \") }}"
                ]
            },
            "created_at": 1672822571.743833
        },
        "model.dga_data_model.int__customer": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg_core__loan_master002",
                    "model.dga_data_model.stg_core__demanddeposit_master001",
                    "model.dga_data_model.stg_jupiter__jupiter_cif_register_history",
                    "model.dga_data_model.stg_dwh__customer_master001",
                    "model.dga_data_model.stg__customer_marital_status",
                    "model.dga_data_model.stg__customer_job_infomation",
                    "model.dga_data_model.stg__df_customer_sts_type",
                    "model.dga_data_model.stg__customer_connection_pivot",
                    "model.dga_data_model.stg__customer_address",
                    "model.dga_data_model.stg_dwh__customer_master002",
                    "model.dga_data_model.stg__vw_df_customer_active_latest"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int__customer"
            ],
            "unique_id": "model.dga_data_model.int__customer",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nWITH loan_cus AS ( \r\n  SELECT\r\n    l.customer_number\r\n  FROM\r\n    {{ ref('stg_core__loan_master002')}} l\r\n  WHERE\r\n    l.loan_type LIKE '%DNTN%'\r\n  GROUP BY\r\n    l.customer_number\r\n)\r\n, casa_cus AS (\r\n  SELECT\r\n    c.customer_number\r\n  FROM\r\n    {{ ref('stg_core__demanddeposit_master001')}} c\r\n  WHERE\r\n    c.product_code LIKE '%S-CA32%'\r\n  GROUP BY\r\n    c.customer_number\r\n)\r\n, jupiter_cus AS (\r\n  SELECT\r\n      a.id\r\n    , a.customer_number\r\n    , a.sale_code\r\n    , a.create_by\r\n    , a.cif_number_company AS customer_company\r\n    , b.customer_code AS customer_refer\r\n    , ROW_NUMBER() OVER(PARTITION BY a.customer_number ORDER BY id) AS rn\r\n  FROM\r\n    {{ ref('stg_jupiter__jupiter_cif_register_history') }} a\r\n  LEFT JOIN customer_master001 b ON a.valid_sale_code = b.customer_code\r\n  WHERE\r\n      a.status = 'SUCC'\r\n)\r\n, dat_cst_general_info AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.bank_number\r\n    , a.branch_number\r\n    , a.customer_number\r\n    , a.customer_shortname\r\n    , a.formatted_short_name\r\n    , a.customer_fullname_locale\r\n    , a.customer_fullname_english\r\n    , a.relationship_manager\r\n    , a.resident_code\r\n    , a.country_of_citizenship\r\n    , a.original_date_of_birth\r\n    , a.date_of_birth\r\n    , a.original_contact_date\r\n    , a.contact_date\r\n    , a.customer_register_number\r\n    , a.id_type_code\r\n    , a.place_of_birth\r\n    , a.marital_status_code\r\n    , b.marital_status_name\r\n    , a.marital_status_date\r\n    , a.gender\r\n    , a.user_id\r\n    , a.workstation_id\r\n    , a.customer_sts_code\r\n    , d.status_name AS customer_sts_name\r\n    , a.customer_status_date\r\n    , a.tax_code_id\r\n    , a.reporting_branch\r\n    , a.department_code\r\n    , a.individual\r\n    , a.division\r\n    , a.business_type AS industry_code\r\n    , c.industry_name\r\n    , a.tax_code_final\r\n    , CASE\r\n        --CIF\r\n        WHEN a.individual = 'Y' AND a.banking_division_infor8 = 'Y' THEN 'CB'\r\n        WHEN a.individual = 'Y' AND a.banking_division_infor1 = 'Y' THEN 'QLTD'\r\n        WHEN a.individual = 'Y' THEN 'RB'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor1 = 'Y' THEN 'QLTD'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor2 = 'Y' THEN 'RBTC'\r\n        WHEN a.individual = 'N' AND a.customer_segmentation2 = 'Y' THEN 'SOE'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor4 = 'Y' AND a.customer_rating = 41 THEN 'B'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor4 = 'Y' THEN 'FI'\r\n        WHEN \r\n          a.individual = 'N'\r\n          AND a.banking_division_infor5 = 'Y'\r\n          AND a.banking_division_infor3 = 'N'\r\n          AND a.banking_division_infor4 = 'N'\r\n          AND a.banking_division_infor6 = 'N'\r\n          AND a.banking_division_infor7 = 'N' \r\n          THEN 'FDI'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor6 = 'Y' THEN 'LC'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor7 = 'Y' THEN 'BB'\r\n        WHEN a.individual = 'N' AND a.banking_division_infor8 = 'Y' THEN 'ME'\r\n        WHEN a.individual = 'N' AND a.customer_segmentation1 = 'Y' THEN 'MC'            \r\n        --LOAN\r\n        WHEN a.banking_division_infor3 = 'Y' AND lc.customer_number IS NOT NULL THEN 'SME'\r\n        WHEN a.banking_division_infor7 = 'Y' AND lc.customer_number IS NOT NULL THEN 'BB'\r\n        WHEN \r\n          a.individual = 'Y'\r\n          AND a.banking_division_infor3 != 'Y'\r\n          AND a.banking_division_infor7 != 'Y'\r\n          AND lc.customer_number IS NOT NULL \r\n          THEN 'RBTC'            \r\n        --CASA\r\n        WHEN a.banking_division_infor2 != 'Y' AND cc.customer_number IS NOT NULL THEN 'BB'\r\n        ELSE 'SME'\r\n      END AS division_lv2\r\n    FROM\r\n      {{ ref('stg_dwh__customer_master001')}} a\r\n    LEFT JOIN {{ ref('stg__customer_marital_status')}} b ON a.marital_status_code = b.cfmstc\r\n    LEFT JOIN {{ ref('stg__customer_job_infomation')}} c ON a.business_type = c.cfbust\r\n    LEFT JOIN {{ ref('stg__df_customer_sts_type')}} d ON a.customer_sts_code = d.status\r\n    LEFT JOIN loan_cus lc ON a.customer_number = lc.customer_number\r\n    LEFT JOIN casa_cus cc ON a.customer_number = cc.customer_number\r\n)\r\n, dat_result AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.bank_number\r\n    , a.branch_number\r\n    , a.customer_number\r\n    , a.customer_shortname\r\n    , a.formatted_short_name\r\n    , a.customer_fullname_locale\r\n    , a.customer_fullname_english\r\n    , a.relationship_manager\r\n    , a.resident_code\r\n    , a.country_of_citizenship\r\n    , a.original_date_of_birth\r\n    , a.date_of_birth\r\n    , a.original_contact_date\r\n    , a.contact_date\r\n    , a.customer_register_number\r\n    , a.id_type_code\r\n    , a.place_of_birth\r\n    , a.marital_status_code\r\n    , a.marital_status_name\r\n    , a.marital_status_date\r\n    , a.gender\r\n    , a.user_id\r\n    , a.workstation_id\r\n    , a.customer_sts_code\r\n    , a.customer_sts_name\r\n    , a.customer_status_date\r\n    , a.tax_code_id\r\n    , a.reporting_branch\r\n    , a.department_code\r\n    , a.individual\r\n    , a.industry_code\r\n    , a.industry_name\r\n    , b.office_phone_address\r\n    , b.home_phone_address\r\n    , b.mobile_phone_address\r\n    , is_mobile_phone(fnc_remove_null_text(b.mobile_phone_address)) AS formatted_mobile_phone_address\r\n    , b.email_address\r\n    , c.customer_address_line_1\r\n    , c.customer_address_line_2\r\n    , c.customer_address_line_3\r\n    , c.customer_address_line_4\r\n    , c.permanent_address_city_name\r\n    , c.permanent_address_city_code\r\n    , c.permanent_address_country\r\n    , a.division_lv2\r\n    , CASE\r\n        WHEN a.division_lv2 IN ( 'CB', 'RB', 'RBTC', 'BB', 'ME' ) THEN 'RB'\r\n        WHEN a.division_lv2 IN ( 'FDI', 'LC', 'MC', 'SME' ) THEN 'EB'\r\n        WHEN a.division_lv2 IN ( 'QLTD', 'SOE', 'B', 'FI' ) THEN 'OTHER'\r\n      END AS division\r\n    , d.biz_line\r\n    , d.id_issue_place\r\n    , d.id_issue_remark\r\n    , d.original_id_issue_date\r\n    , d.id_issue_date\r\n    , CASE\r\n        WHEN is_valid_email(fnc_remove_null_text(b.email_address)) = 1 THEN fnc_remove_null_text(b.email_address)\r\n        ELSE NULL\r\n      END AS valid_format_email_address\r\n    , f.segment_lv1_rb\r\n    , f.segment_lv2_rb\r\n    , tax_code_final\r\n    , g.customer_company\r\n    , g.customer_refer\r\n    , g.sale_code\r\n    , CASE\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND upper(g.sale_code) LIKE '%ACCESSTRADE%' THEN 1001 -- ACCESSTRADE\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND upper(g.sale_code) LIKE '%CBNV%' THEN 1002 -- CBNV\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND upper(g.sale_code) LIKE '%MSBPAY%' THEN 1003 -- Cong thanh toan\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND upper(g.sale_code) LIKE '%CTV1%' THEN 1004 -- CTV\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND upper(g.sale_code) LIKE '%TOBR%' THEN 1005 -- MKT\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND upper(g.sale_code) LIKE '%LH%' THEN 1006 -- Lending Hub\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' AND customer_refer IS NOT NULL THEN 1007 -- KH GT KH\r\n        WHEN upper(g.create_by) LIKE '%EKYC%' THEN 1000 -- EKYC_OTHER\r\n        ELSE 9999 -- COUNTER\r\n      END AS source_customer\r\n  FROM\r\n    dat_cst_general_info        a\r\n  LEFT JOIN {{ ref('stg__customer_connection_pivot')}} b ON a.customer_number = b.customer_number\r\n  LEFT JOIN {{ ref('stg__customer_address')}} c ON a.customer_number = c.customer_number\r\n  LEFT JOIN {{ ref('stg_dwh__customer_master002')}} d ON a.customer_number = d.customer_number AND d.rec_current_ind = 'Y'\r\n  LEFT JOIN {{ ref('stg__vw_df_customer_active_latest')}} f ON a.customer_number = f.customer_number\r\n  LEFT JOIN jupiter_cus g ON a.customer_number = g.customer_number ANd g.rn = 1                    \r\n)\r\n, dat_hash AS (\r\n  SELECT\r\n      etl_date\r\n    , standard_hash(bank_number\r\n                      || '#'\r\n                      || branch_number\r\n                      || '#'\r\n                      || customer_number\r\n                      || '#'\r\n                      || customer_shortname\r\n                      || '#'\r\n                      || formatted_short_name\r\n                      || '#'\r\n                      || customer_fullname_locale\r\n                      || '#'\r\n                      || customer_fullname_english\r\n                      || '#'\r\n                      || relationship_manager\r\n                      || '#'\r\n                      || resident_code\r\n                      || '#'\r\n                      || country_of_citizenship\r\n                      || '#'\r\n                      || original_date_of_birth\r\n                      || '#'\r\n                      || date_of_birth\r\n                      || '#'\r\n                      || original_contact_date\r\n                      || '#'\r\n                      || contact_date\r\n                      || '#'\r\n                      || customer_register_number\r\n                      || '#'\r\n                      || id_type_code\r\n                      || '#'\r\n                      || id_issue_place\r\n                      || '#'\r\n                      || id_issue_remark\r\n                      || '#'\r\n                      || original_id_issue_date\r\n                      || '#'\r\n                      || id_issue_date\r\n                      || '#'\r\n                      || place_of_birth\r\n                      || '#'\r\n                      || marital_status_code\r\n                      || '#'\r\n                      || marital_status_name\r\n                      || '#'\r\n                      || marital_status_date\r\n                      || '#'\r\n                      || gender\r\n                      || '#'\r\n                      || user_id\r\n                      || '#'\r\n                      || workstation_id\r\n                      || '#'\r\n                      || customer_sts_code\r\n                      || '#'\r\n                      || customer_sts_name\r\n                      || '#'\r\n                      || customer_status_date\r\n                      || '#'\r\n                      || tax_code_id\r\n                      || '#'\r\n                      || reporting_branch\r\n                      || '#'\r\n                      || department_code\r\n                      || '#'\r\n                      || individual\r\n                      || '#'\r\n                      || industry_code\r\n                      || '#'\r\n                      || industry_name\r\n                      || '#'\r\n                      || office_phone_address\r\n                      || '#'\r\n                      || home_phone_address\r\n                      || '#'\r\n                      || mobile_phone_address\r\n                      || '#'\r\n                      || formatted_mobile_phone_address\r\n                      || '#'\r\n                      || email_address\r\n                      || '#'\r\n                      || valid_format_email_address\r\n                      || '#'\r\n                      || customer_address_line_1\r\n                      || '#'\r\n                      || customer_address_line_2\r\n                      || '#'\r\n                      || customer_address_line_3\r\n                      || '#'\r\n                      || customer_address_line_4\r\n                      || '#'\r\n                      || permanent_address_city_name\r\n                      || '#'\r\n                      || permanent_address_city_code\r\n                      || '#'\r\n                      || permanent_address_country\r\n                      || '#'\r\n                      || division\r\n                      || '#'\r\n                      || division_lv2\r\n                      || '#'\r\n                      || biz_line\r\n                      || '#'\r\n                      || segment_lv1_rb\r\n                      || '#'\r\n                      || segment_lv2_rb, 'SHA512') AS hash_diff\r\n    , bank_number\r\n    , branch_number\r\n    , customer_number\r\n    , customer_shortname\r\n    , formatted_short_name\r\n    , customer_fullname_locale\r\n    , customer_fullname_english\r\n    , relationship_manager\r\n    , resident_code\r\n    , country_of_citizenship\r\n    , original_date_of_birth\r\n    , date_of_birth\r\n    , original_contact_date\r\n    , contact_date\r\n    , customer_register_number\r\n    , id_type_code\r\n    , id_issue_place\r\n    , id_issue_remark\r\n    , original_id_issue_date\r\n    , id_issue_date\r\n    , place_of_birth\r\n    , marital_status_code\r\n    , marital_status_name\r\n    , marital_status_date\r\n    , gender\r\n    , user_id\r\n    , workstation_id\r\n    , customer_sts_code\r\n    , customer_sts_name\r\n    , customer_status_date\r\n    , tax_code_id\r\n    , reporting_branch\r\n    , department_code\r\n    , individual\r\n    , industry_code\r\n    , industry_name\r\n    , office_phone_address\r\n    , home_phone_address\r\n    , mobile_phone_address\r\n    , formatted_mobile_phone_address\r\n    , email_address\r\n    , valid_format_email_address\r\n    , customer_address_line_1\r\n    , customer_address_line_2\r\n    , customer_address_line_3\r\n    , customer_address_line_4\r\n    , permanent_address_city_name\r\n    , permanent_address_city_code\r\n    , permanent_address_country\r\n    , division\r\n    , division_lv2\r\n    , biz_line\r\n    , segment_lv1_rb\r\n    , segment_lv2_rb\r\n    , source_customer\r\n    , tax_code_final\r\n    , customer_company\r\n    , customer_refer\r\n    , sale_code\r\n  FROM\r\n    dat_result\r\n)\r\nSELECT * FROM dat_hash",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int__customer.sql",
            "original_file_path": "models\\int\\int__customer.sql",
            "name": "int__customer",
            "alias": "int__customer",
            "checksum": {
                "name": "sha256",
                "checksum": "6792f5f91f96bf296034db5c5830163e55691cf9550a60507d8bc663e15039f2"
            },
            "tags": [],
            "refs": [
                [
                    "stg_core__loan_master002"
                ],
                [
                    "stg_core__demanddeposit_master001"
                ],
                [
                    "stg_jupiter__jupiter_cif_register_history"
                ],
                [
                    "stg_dwh__customer_master001"
                ],
                [
                    "stg__customer_marital_status"
                ],
                [
                    "stg__customer_job_infomation"
                ],
                [
                    "stg__df_customer_sts_type"
                ],
                [
                    "stg__customer_connection_pivot"
                ],
                [
                    "stg__customer_address"
                ],
                [
                    "stg_dwh__customer_master002"
                ],
                [
                    "stg__vw_df_customer_active_latest"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822571.7518268
        },
        "model.dga_data_model.report__list_approved_customer_by_df_001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dga_data_model.int_way4__contract",
                    "model.dga_data_model.int_way4__contract",
                    "model.dga_data_model.int_way4__contract",
                    "model.dga_data_model.imp__topup_bscore",
                    "model.dga_data_model.imp_list_fraudulent_sale",
                    "model.dga_data_model.int__customer",
                    "model.dga_data_model.imp__restrictive_customer"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "monthly"
                ],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": [
                    "created_month",
                    "customer_number"
                ],
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "report__list_approved_customer_by_df_001"
            ],
            "unique_id": "model.dga_data_model.report__list_approved_customer_by_df_001",
            "raw_code": "{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key=['created_month', 'customer_number'],\r\n  )\r\n}}\r\nWITH contract_cus AS (\r\n    /* List customer has at least one active contract (M/V/O/B/W ) */\r\n    SELECT\r\n      customer_number\r\n    FROM\r\n      {{ ref('int_way4__contract') }}\r\n    WHERE\r\n      regexp_like(contract_number, '(-M-|-V-|-O-|-B-|-W-)')\r\n      AND LOWER(contract_status_name) = 'account ok'\r\n    GROUP BY customer_number\r\n)\r\n, list_customer_contract AS (\r\n    /*List customers who satisfy the conditions related to the contract */\r\n    SELECT\r\n      contract.customer_number\r\n      , LISTAGG(-1 * contract.auth_limit_amount, ',') AS contract_auth_limit_amount\r\n      , LISTAGG(contract.contract_number, ',') AS contract_number\r\n      , LISTAGG(contract.date_open, ',') AS contract_date_open\r\n      , LISTAGG(contract.add_info_01, ',') AS contract_add_info_01\r\n    FROM\r\n      {{ ref('int_way4__contract') }} contract\r\n    INNER JOIN contract_cus ON\r\n      contract_cus.customer_number = contract.customer_number\r\n    WHERE\r\n      contract.contract_number LIKE '%-L-%'\r\n      AND abs(contract.auth_limit_amount) <= 100e6\r\n      AND lower(contract.contract_status_name) = 'account ok'\r\n      AND (\r\n--         contract.add_info_01 IN ('MIG2015', 'Full Payment', 'Min Payment') -- will update when have infor about df001's add_info_01\r\n--         OR\r\n        contract.contract_age >= 6 )\r\n    GROUP BY\r\n      contract.customer_number\r\n)\r\n, list_customer_add_info_df001 AS (\r\n  SELECT\r\n    contract.customer_number\r\n  FROM\r\n    {{ ref('int_way4__contract') }} contract\r\n  WHERE\r\n    contract.add_info_01 IN ('texxsa') -- se thay doi sau\r\n  GROUP BY\r\n    contract.customer_number\r\n)\r\n, list_customer_b_score AS (\r\n  /* List customers who satisfy the conditions related to bscore */\r\n  SELECT\r\n    bscore.cif AS customer_number,\r\n    bscore.id,\r\n    bscore.rank\r\n  FROM\r\n    {{ ref('imp__topup_bscore')}} bscore\r\n  LEFT JOIN list_customer_add_info_df001 df001 ON df001.customer_number = bscore.cif\r\n  WHERE\r\n    bscore.month = to_number(to_char(add_months(sysdate, -1), 'YYYYMM'))\r\n    AND (\r\n    df001.customer_number IS NOT NULL\r\n    OR bscore.rank IN ('B1','B2','B3','B4','B5','B6','B7','B8','B9','B10','B11','B12','B13','B14','B15','B16','B17','B18')\r\n  )\r\n)\r\n, pln AS (\r\n  SELECT\r\n    cif,\r\n    pln_sau_cic,\r\n    ROW_NUMBER() OVER(PARTITION BY cif ORDER BY pln_sau_cic) AS rk\r\n  FROM\r\n    base.dwh__ccl_pln @dga_wz\r\n  WHERE trunc(import_date, 'month') = trunc(sysdate, 'month')\r\n)\r\n, fraudulent_sale AS (\r\n  SELECT\r\n    cif\r\n  FROM\r\n    {{ ref('imp_list_fraudulent_sale')}}\r\n  GROUP BY cif\r\n)\r\nSELECT\r\n    trunc(sysdate, 'month') AS created_month\r\n  , cus.customer_number\r\n  , cus.date_of_birth\r\n  , cus.id_issue_date\r\n  , cus.id_issue_remark\r\n  , cus.formatted_mobile_phone_address\r\n  , cus.valid_format_email_address\r\n  , cus.customer_address_line_1 || cus.customer_address_line_2 || cus.customer_address_line_3 AS customer_address\r\n  , cus.customer_register_number\r\n  , cus.formatted_short_name\r\n  , cus.gender\r\n  , cus.marital_status_name\r\n  , cus.customer_age\r\n  , contract.contract_auth_limit_amount\r\n  , contract.contract_number\r\n  , contract.contract_date_open\r\n  , contract.contract_add_info_01\r\n  , bscore.rank\r\n  , bscore.id\r\n  , CASE WHEN fs.cif IS NOT NULL THEN 1 ELSE 0 END AS is_sale_fraud\r\n  , pln.pln_sau_cic\r\nFROM\r\n  {{ ref('int__customer') }} cus\r\n  LEFT JOIN {{ ref('imp__restrictive_customer') }} restric_cus ON restric_cus.cif = cus.customer_number\r\n  INNER JOIN list_customer_contract contract ON contract.customer_number = cus.customer_number\r\n  LEFT JOIN list_customer_b_score bscore ON bscore.customer_number = cus.customer_number\r\n  LEFT JOIN pln ON pln.cif = cus.customer_number AND pln.rk = 1\r\n  LEFT JOIN fraudulent_sale fs ON fs.cif= cus.customer_number\r\nWHERE\r\n  cus.division = 'RB'\r\n  AND restric_cus.cif IS NULL -- remove restrictive customers\r\n  AND (\r\n    (cus.gender = 'M' AND cus.customer_age BETWEEN 20 AND 60)\r\n    OR (cus.gender = 'F' AND cus.customer_age BETWEEN 20 AND 50)\r\n  )\r\n  AND (pln.cif IS NULL OR pln.pln_sau_cic = 'A')",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\report__list_approved_customer_by_df_001.sql",
            "original_file_path": "models\\mart\\report__list_approved_customer_by_df_001.sql",
            "name": "report__list_approved_customer_by_df_001",
            "alias": "report__list_approved_customer_by_df_001",
            "checksum": {
                "name": "sha256",
                "checksum": "c1ec2891c5678a3ed722623012748ea3643455495e564a46b648443c2e0eda2d"
            },
            "tags": [
                "monthly"
            ],
            "refs": [
                [
                    "int_way4__contract"
                ],
                [
                    "int_way4__contract"
                ],
                [
                    "int_way4__contract"
                ],
                [
                    "imp__topup_bscore"
                ],
                [
                    "imp_list_fraudulent_sale"
                ],
                [
                    "int__customer"
                ],
                [
                    "imp__restrictive_customer"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\mart\\mart.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "monthly"
                ],
                "materialized": "incremental",
                "unique_key": [
                    "created_month",
                    "customer_number"
                ]
            },
            "created_at": 1672822572.0654986
        },
        "model.dga_data_model.report__mobio_marketing_campaign": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": "mobio_marketing_campaign",
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "report__mobio_marketing_campaign"
            ],
            "unique_id": "model.dga_data_model.report__mobio_marketing_campaign",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    alias = 'mobio_marketing_campaign'\r\n  )\r\n}}\r\nWITH casa_account AS (\r\n  SELECT\r\n      dm1.customer_number\r\n    , dm1.account_number\r\n    , dm1.product_code\r\n    , dm1.date_opened\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(dm1.date_opened)) AS open_date\r\n    , RANK() OVER(PARTITION by dm1.customer_number ORDER BY dm1.date_opened ASC, dm1.account_number  DESC) AS rk\r\n  FROM df_2.demanddeposit_master001 dm1\r\n)\r\n, first_casa_account AS (\r\n  SELECT\r\n      ca.customer_number\r\n    , ca.account_number\r\n    , ca.open_date\r\n    , ca.product_code\r\n    , CASE ca.product_code\r\n        WHEN 'R-CAPR01' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC01' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR03' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC03' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR06' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC06' THEN 'M-Payroll'\r\n        WHEN 'R-CAMPAYR' THEN 'M-Payroll'\r\n        WHEN 'R-CAMPAYR1' THEN 'M-Payroll'\r\n        WHEN 'R-PAYROFC' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR02' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC02' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR05' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC05' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR08' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC08' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRMEGA' THEN 'M-Payroll'\r\n        WHEN 'R-CAFCMEGA' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRVNPT' THEN 'M-Payroll'\r\n        WHEN 'R-CAFCVNPT' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR09' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC09' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR07' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC07' THEN 'M-Payroll'\r\n        WHEN 'R-CAMPAYR0' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR8N' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC8N' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR1N' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC1N' THEN 'M-Payroll'\r\n        WHEN 'R-CAPR9N' THEN 'M-Payroll'\r\n        WHEN 'R-CAPRFC9N' THEN 'M-Payroll'\r\n        WHEN 'R-CAMBUSS1' THEN 'M-Business Gold'\r\n        WHEN 'R-CABU1S68' THEN 'M-Business Gold'\r\n        WHEN 'R-CAMBUSS2' THEN 'M-First'\r\n        WHEN 'R-CABUS2SD' THEN 'M-First'\r\n        WHEN 'R-CABU2S68' THEN 'M-First'\r\n        WHEN 'R-CABU2S86' THEN 'M-First'\r\n        WHEN 'R-CABUS1SD' THEN 'M-Business Gold'\r\n        WHEN 'R-CABUS1OL' THEN 'M-Business Gold'\r\n        WHEN 'R-CABUFAOL' THEN 'M-Business Fast'\r\n        WHEN 'R-CABUSSFA' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU68FA' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU88FA' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU1S86' THEN 'M-Business Gold'\r\n        WHEN 'R-CABU86FA' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU11FA' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU1S11' THEN 'M-Business Gold'\r\n        WHEN 'R-CABU2S11' THEN 'M-First'\r\n        WHEN 'R-CAFA86OL' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU2S79' THEN 'M-First'\r\n        WHEN 'R-CABU79FA' THEN 'M-Business Fast'\r\n        WHEN 'R-CABU1S79' THEN 'M-Business Gold'\r\n        WHEN 'R-CAKIMPHA' THEN 'Kim Ph\u00e1t'\r\n        WHEN 'R-CAKPSD68' THEN 'Kim Ph\u00e1t'\r\n        WHEN 'R-CAKPSD' THEN 'Kim Ph\u00e1t'\r\n        WHEN 'R-CAKPSD86' THEN 'Kim Ph\u00e1t'\r\n        WHEN 'R-CAKPSD11' THEN 'Kim Ph\u00e1t'\r\n        WHEN 'R-CAKPSD79' THEN 'Kim Ph\u00e1t'\r\n        WHEN 'R-CAMBASIC' THEN 'M-PRO'\r\n        WHEN 'R-CABASIFC' THEN 'M-PRO'\r\n        WHEN 'R-CABASICB' THEN 'M-PRO'\r\n        WHEN 'R-CAMPROSD' THEN 'M-PRO'\r\n        WHEN 'R-CAPROS68' THEN 'M-PRO'\r\n        WHEN 'R-CAMPROOL' THEN 'M-PRO'\r\n        WHEN 'R-CAPRO86' THEN 'M-PRO'\r\n        WHEN 'R-CAPRO11' THEN 'M-PRO'\r\n        WHEN 'R-CAPR86OL' THEN 'M-PRO'\r\n        WHEN 'R-CAPRO79 ' THEN 'M-PRO'\r\n        WHEN 'R-CAPREM+' THEN 'M-First'\r\n        WHEN 'R-CAPREMSD' THEN 'M-First'\r\n        WHEN 'R-CAPRES68' THEN 'M-First'\r\n        WHEN 'R-CAPRES86' THEN 'M-First'\r\n        WHEN 'R-CAPRES11' THEN 'M-First'\r\n        WHEN 'R-CAPRES79' THEN 'M-First'\r\n        WHEN 'R-MFCB1' THEN 'M-First'\r\n        WHEN 'CAM1' THEN 'M1'\r\n        WHEN 'CAM1FC' THEN 'M1'\r\n        WHEN 'R-CAMCO10' THEN 'M-money'\r\n        WHEN 'R-CAMM10OL' THEN 'M-money'\r\n        WHEN 'R-CAMC10FC' THEN 'M-money'\r\n        WHEN 'R-CAMM86OL' THEN 'M-money'\r\n        WHEN 'R-CAMCO86' THEN 'M-money'\r\n        WHEN 'SV11' THEN 'Other'\r\n        WHEN 'SV11FC' THEN 'Other'\r\n        WHEN 'SVVIP' THEN 'Other'\r\n        WHEN 'R-CASTAFF' THEN 'Other'\r\n        WHEN 'R-CATNG' THEN 'Other'\r\n        WHEN 'C-CATCSTK' THEN 'OD'\r\n        WHEN 'R-CATCMLCO' THEN 'OD'\r\n        WHEN 'R-CATCONL' THEN 'OD'\r\n        WHEN 'R-CATCSTK' THEN 'OD'\r\n        ELSE 'Unknown'\r\n      END AS product_name\r\n  FROM casa_account ca\r\n  WHERE rk = 1\r\n)\r\n, fd_info AS (\r\n  SELECT\r\n    fd.account_number -- ten so tiet kiem\r\n    , fd.customer_number\r\n    , fd.balance -- gia tri so tiet kiem\r\n    , fd.currency_type -- loai tien gui tiet kiem\r\n        , CASE\r\n            WHEN length(fd.issue_date) = 5 THEN to_date('0'|| to_char(fd.issue_date), 'DDMMYY')\r\n            WHEN length(fd.issue_date) = 6 THEN to_date( to_char(fd.issue_date), 'DDMMYY') END\r\n            AS issue_date\r\n    , pcg.product_name -- ten loai so tiet kiem\r\n        , b.product_code\r\n    , RANK() OVER(PARTITION BY fd.customer_number ORDER BY fd.account_number ASC ) AS rk\r\n  FROM\r\n    df_2.fixeddeposit_master001 fd\r\n  LEFT JOIN df_2.fixeddeposit_master003 fd1 ON\r\n    fd1.account_no = fd.account_number\r\n    AND fd1.etl_date = 2022338\r\n  LEFT JOIN dwh_fddm_product b ON fd1.product_sk = b.product_sk\r\n  LEFT JOIN df_2.huyendtk3_fd_product_code pcg ON pcg.product_code = b.product_code\r\n)\r\nSELECT\r\n    dc.formatted_short_name\r\n    , ca.account_number AS casa_account_number\r\n    , to_char(to_date(ca.open_date, 'YYYYMMDD'), 'DD/MM/YYYY') AS casa_open_date\r\n    , ca.product_code AS casa_product_code\r\n    , ca.product_name AS casa_product_name\r\n    , fd.account_number as fd_account_number\r\n    , to_char(fd.balance) || ' ' || fd.currency_type AS fd_amount\r\n    , to_char(fd.issue_date, 'DD/MM/YYYY') AS fd_issue_date\r\n    , fd.product_code AS fd_product_code\r\n    , fd.product_name AS fd_product_name\r\nFROM\r\n  first_casa_account ca\r\nLEFT JOIN df_customer dc ON ca.customer_number = dc.customer_number\r\nLEFT JOIN fd_info fd ON ca.customer_number = fd.customer_number AND fd.rk = 1\r\nWHERE fd.customer_number IS NOT NULL",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\report__mobio_marketing_campaign.sql",
            "original_file_path": "models\\mart\\report__mobio_marketing_campaign.sql",
            "name": "report__mobio_marketing_campaign",
            "alias": "mobio_marketing_campaign",
            "checksum": {
                "name": "sha256",
                "checksum": "348f6dd56cc16cc4473686a101acf340573cb828c1c22607031bf522e3f4aab8"
            },
            "tags": [
                "daily"
            ],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\mart\\mart.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ],
                "materialized": "table",
                "alias": "mobio_marketing_campaign"
            },
            "created_at": 1672822572.0654986
        },
        "model.dga_data_model.stg_core__demanddeposit_master001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number, account_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__demanddeposit_master001"
            ],
            "unique_id": "model.dga_data_model.stg_core__demanddeposit_master001",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"customer_number, account_number\") }}'\r\n  )\r\n}}\r\nSELECT \r\n  record_id\r\n  , bank_number\r\n  , branch_code\r\n  , reporting_branch\r\n  , account_number\r\n  , account_type\r\n  , currency_type\r\n  , product_code\r\n  , short_name\r\n  , formatted_short_name\r\n  , account_name\r\n  , customer_number\r\n  , officer\r\n  , status\r\n  , account_group_number\r\n  , related_account_group_number\r\n  , close_status\r\n  , class\r\n  , currency_decimals\r\n  , gl_group_code\r\n  , cost_center\r\n  , product_code2\r\n  , stop_code\r\n  , hold_code\r\n  , alert_code\r\n  , special_instruction_code\r\n  , print_interest_check\r\n  , date_opened\r\n  , fnc_convert_date_to_date_id(is_date_yyyyddd(date_opened)) AS open_date\r\n  , date_of_status\r\n  , fnc_convert_date_to_date_id(is_date_yyyyddd(date_of_status)) AS status_date\r\n  , date_entered\r\n  , date_last_overdrawn\r\n  , prior_last_active_date\r\n  , date_last_active\r\n  , date_last_contact\r\n  , date_last_interest_paid\r\n  , date_last_statement\r\n  , date_last_maintenance\r\n  , date_last_deposit\r\n  , date_sc_waive_expires\r\n  -- , open_date\r\n  , date_of_status2\r\n  , date_entered2\r\n  , date_last_overdrawn2\r\n  , prior_last_active_date2\r\n  , date_last_active2\r\n  , date_last_contact2\r\n  , date_last_interest_paid2\r\n  , date_last_statement2\r\n  , date_last_maintenance2\r\n  , date_last_deposit2\r\n  , date_sc_waive_expires2\r\n  , amt_of_last_deposit\r\n  , blocked_amount\r\n  , total_oc_amount\r\n  , total_ocp_amount\r\n  , total_odoc_amount\r\n  , total_mc_amount\r\n  , total_ibt_amount\r\n  , total_llc_amount\r\n  , total_extra_amount\r\n  , total_suspense_amount\r\n  , float_drawing_amount\r\n  , balance\r\n  , yesterday_ledger_balance\r\n  , excess_overdrawn_balance\r\n  , yesterday_excess_overdrawn_bal\r\n  , charged_off_balance\r\n  , previous_statement_balance\r\n  , prev_year_end_ledger_balance\r\n  , minimum_balance\r\n  , maximum_balance\r\n  , collected_balance\r\n  , accrued_od_interest\r\n  , yesterday_accrued_od_interest\r\n  , exs_accrued_today\r\n  , od_accrued_today\r\n  , aggregate_days\r\n  , aggregate_ledger_balance\r\n  , aggregate_collected_balance\r\n  , aggregate_days_ledger_negative\r\n  , agg_negative_ledger_bal\r\n  , agg_days_collected_negative\r\n  , agg_negative_collected_bal\r\n  , min_bal___int_cycle\r\n  , max_bal___int_cycle\r\n  , minimum_balance___m_t_d\r\n  , maximum_balance___m_t_d\r\n  , agg_days___int_cycle\r\n  , agg_ledger_bal___int_cycle\r\n  , agg_collected_bal___int_cycle\r\n  , accrued_interest\r\n  , alternate_accrued_interest\r\n  , int_accrued_today\r\n  , ytd_interest_paid\r\n  , ytd_interest_charged\r\n  , previous_ytd_interest_paid\r\n  , amt_of_last_int_pd\r\n  , int_paid_today\r\n  , od_intcapitalised_today\r\n  , od_intcapitalised_today2\r\n  , statement_cycle\r\n  , statement_code\r\n  , interest_cycle\r\n  , service_charge_cycle\r\n  , service_charge_mode\r\n  , user_code\r\n  , user_code_2\r\n  , user_code_3\r\n  , user_code_4\r\n  , user_code_5\r\n  , user_code_6\r\n  , user_code_7\r\n  , user_code_8\r\n  , number_of_debits\r\n  , amount_of_debits\r\n  , number_of_credits\r\n  , amount_of_credits\r\n  , number_sc_debits\r\n  , amount_sc_debits\r\n  , number_sc_credits\r\n  , amount_sc_credits\r\n  , number_of_debits2\r\n  , amount_of_debits2\r\n  , number_of_credits2\r\n  , amount_of_credits2\r\n  , number_sc_debits2\r\n  , amount_sc_debits2\r\n  , number_sc_credits2\r\n  , amount_sc_credits2\r\n  , no_of_on_us__atm_credits\r\n  , amt_of_o_nus_atm_credits\r\n  , no_of_on_us__atm_debits\r\n  , amt_of_on_us_atm_debits\r\n  , no_of_frgn__atm_credits\r\n  , amt_of_frgn_atm_credits\r\n  , no_of_frgn__atm_debits\r\n  , amt_of_frgn_atm_debits\r\n  , number_of_deposit_days\r\n  , amount_of_nsf_items\r\n  , overdraft_limit_code\r\n  , signature_verification\r\n  , overdraft_protection\r\n  , valid_for_check_book\r\n  , atm_card\r\n  , include_on_combined_statement\r\n  , hold_mail_code\r\n  , automatic_nsf_charge\r\n  , high_volume_account\r\n  , bad_check_incident\r\n  , times_od_this_cycle\r\n  , times_od_this_qtr\r\n  , times_od_2nd_qtr\r\n  , times_od_3rd_qtr\r\n  , times_od_4th_qtr\r\n  , times_od_last_year\r\n  , times_od_life_to_date\r\n  , related_account_no\r\n  , related_account_type\r\n  , no_cks_deposit_on_us\r\n  , no_cks_deposit_foreign\r\n  , list_post_code\r\n  , interest_rate_no\r\n  , interest_rate\r\n  , credit_rate_flag\r\n  , rate_variance\r\n  , rate_variance_code\r\n  , rate_floor\r\n  , rate_ceiling\r\n  , rate_review_date\r\n  , rate_review_date2\r\n  , rate_review_term\r\n  , rate_review_term_code\r\n  , excess_intrate_no\r\n  , excess_interest_rate\r\n  , excess_rate_flag\r\n  , excess_rate_variance\r\n  , excess_rate_variance_code\r\n  , excess_rate_floor\r\n  , excess_rate_ceiling\r\n  , excess_rate_review_date\r\n  , excess_rate_review_date2\r\n  , excess_rate_review_term\r\n  , exces_rate_review_term_code\r\n  , auto_maintain_npl_status\r\n  , nonperforming_status\r\n  , first_reached_excess_date\r\n  , first_reached_excess_date2\r\n  , no_debits_up_to_3\r\n  , no_debits_up_to_6\r\n  , no_debits_up_to_3_exceed\r\n  , no_debits_up_to_6_exceed\r\n  , cash_deposit_this_cycle\r\n  , cash_paid_this_cycle\r\n  , aggregate_days_this_qtr\r\n  , agg_ledger_bal_this_qtr\r\n  , agg_collected_bal_this_qtr\r\n  , avg_ledger_bal_prior_qtr_1\r\n  , avg_ledger_bal_prior_qtr_2\r\n  , avg_ledger_bal_prior_qtr_3\r\n  , avg_ledger_bal_prior_qtr_4\r\n  , avg_collected_bal_prior_qtr_1\r\n  , avg_collected_bal_prior_qtr_2\r\n  , avg_collected_bal_prior_qtr_3\r\n  , avg_collected_bal_prior_qtr_4\r\n  , special_information_code_1\r\n  , special_information_code_2\r\n  , special_information_code_3\r\n  , special_information_code_4\r\n  , special_message\r\n  , club_plan\r\n  , no_nsf_this_cycle\r\n  , no_nsf_this_qtr\r\n  , no_nsf_2nd_qtr\r\n  , no_nsf_3rd_qtr\r\n  , no_nsf_4th_qtr\r\n  , no_nsf_last_year\r\n  , no_nsf_life_to_date\r\n  , total_accrual_float\r\n  , total_availibility_float\r\n  , total_cash_float\r\n  , no_of_enclosures\r\n  , eft_flag\r\n  , minimum_charge\r\n  , no_large_bal_fluctuation_mtd\r\n  , no_large_bal_fluctuation_ytd\r\n  , times_on_kite_suspect_report\r\n  , federal_wh_code\r\n  , state_wh_code\r\n  , state\r\n  , date_wh_code_changed\r\n  , date_wh_code_changed2\r\n  , alternate_account_no\r\n  , alternate_account_type\r\n  , fed_wh_alternate_rate\r\n  , state_wh_alternate_rate\r\n  , fed_wh_today\r\n  , federal_wh_mtd\r\n  , federal_wh_qtd\r\n  , federal_wh_ytd\r\n  , state_wh_today\r\n  , state_wh_mtd\r\n  , state_wh_qtd\r\n  , state_wh_ytd\r\n  , federal_wh_last_year\r\n  , state_wh_last_year\r\n  , highest_interest_rate_earned\r\n  , nsf_items_exist\r\n  , aft_code\r\n  , statementpassbook_code\r\n  , teller_special_status\r\n  , print_check_statement_order_no\r\n  , mtd_service_charge\r\n  , mtd_interest_paid\r\n  , mtd_od_interest_charged\r\n  , mtd_fees_paid\r\n  , mtd_aggregate_balance\r\n  , mtd_aggregate_days\r\n  , mtd_beginning_accrual\r\n  , mtd_returned_debit_count\r\n  , mtd_returned_debit_amount\r\n  , mtd_returned_credit_count\r\n  , mtd_returned_credit_amount\r\n  , classcar_code\r\n  , selection_number\r\n  , overdraft_limit\r\n  , od_drawing_limit\r\n  , yesterday_od_drawing_limit\r\n  , npl_suspension_limit\r\n  , accrued_on_credit_life\r\n  , yesterday_accr_on_credit_life\r\n  , excess_od_interest\r\n  , seconday_accrued_int\r\n  , sec_accrued_commitment_fee\r\n  , sec_accrued_credit_life\r\n  , accrued_commitment_fee\r\n  , yesterday_accr_commitment_fee\r\n  , od_review_date\r\n  , od_review_date2\r\n  , payment_amount\r\n  , application_number\r\n  , specific_provision_for_debts\r\n  , workstation_id\r\n  , user_id\r\n  , time_account_added AS open_time\r\n  , job_number\r\n  , product_type_change\r\n  , product_change_effdate_ddmmyy\r\n  , product_change_effective_date_\r\n  , online_sweep_flag\r\n  , no_of_withdrawal_for_the_month\r\n  , dormant_status\r\n  , date_of_dormant_status\r\n  , date_of_dormant_status_\r\n  , borrower_code\r\n  , guarantee_number\r\n  , guarantee_amount\r\n  , cgc_date\r\n  , cgc_date_\r\n  , date_claim_submitted_to_cgc\r\n  , date_claim_submitted_to_cgc_\r\n  , date_cgc_notified_of_npl\r\n  , date_cgc_notified_of_npl_\r\n  , date_fee_paid_to_cgc\r\n  , date_fee_paid_to_cgc_\r\n  , sales_officer\r\n  , client_type\r\n  , school_campaign\r\n  , auto_od_limit\r\n  , staff_ac\r\n  , senior_savers\r\n  , reserve_4\r\n  , reserve_5\r\n  , reserve_6\r\n  , reserve_7\r\n  , reserve_8\r\n  , insured_party_customer_number\r\n  , reserve_bucket_2\r\n  , reserve_bucket_3\r\n  , reserve_bucket_4\r\n  , daily_iis_accrual\r\n  , reserve_balance_2\r\n  , reserve_balance_3\r\n  , reserve_balance_4\r\n  , odp_type\r\n  , product_group\r\n  , mode_of_operation\r\n  , sptf_flag\r\n  , date_prev_interest_paid\r\n  , date_prev_interest_paid2\r\n  , product_category\r\n  , department_code\r\n  , tax_code_id\r\n  , account_in_base_currency\r\n  , etl_date\r\nFROM \r\n  df_2.demanddeposit_master001",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__demanddeposit_master001.sql",
            "original_file_path": "models\\staging\\stg_core__demanddeposit_master001.sql",
            "name": "stg_core__demanddeposit_master001",
            "alias": "stg_core__demanddeposit_master001",
            "checksum": {
                "name": "sha256",
                "checksum": "45de1e80b1de25292dd9826540ba3aaa1c010ae68643a568e8a85ee4d3f48193"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"customer_number, account_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg_core__demanddeposit_master002": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"account_no\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__demanddeposit_master002"
            ],
            "unique_id": "model.dga_data_model.stg_core__demanddeposit_master002",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"account_no\") }}'\r\n  )\r\n}}\r\nSELECT \r\n  account_no_sk\r\n  , account_no\r\n  , currency\r\n  , class\r\n  , account_name\r\n  , open_date\r\n  , int_liq_freq_code\r\n  , int_liq_freq\r\n  , special_rate\r\n  , rate_flr\r\n  , rate_cel\r\n  , rate_var\r\n  , rate_var_code\r\n  , rate_review_dt\r\n  , rate_review_term\r\n  , rate_review_code\r\n  , od_auth_limit\r\n  , od_draw_limit\r\n  , od_limit_code\r\n  , overdraft_facility\r\n  , overdraft_type\r\n  , od_rate_code\r\n  , od_rate\r\n  , efft_rate\r\n  , od_rate_flr\r\n  , od_rate_cel\r\n  , od_rate_var\r\n  , od_var_code\r\n  , od_review_dt\r\n  , od_review_term\r\n  , od_review_code\r\n  , od_application_no\r\n  , stmt_facility\r\n  , aft_facility\r\n  , cheque_faclility\r\n  , min_bal\r\n  , max_bal\r\n  , charge_freq\r\n  , charge_type\r\n  , sc_waive_exp_dt\r\n  , min_charge\r\n  , rec_current_ind\r\n  , rec_effective_date\r\n  , pooling_rel\r\n  , account_type\r\n  , subbranch_no\r\n  , branch_code_sk\r\n  , ddsic1\r\n  , etl_date\r\nFROM \r\n  df_2.demanddeposit_master002",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__demanddeposit_master002.sql",
            "original_file_path": "models\\staging\\stg_core__demanddeposit_master002.sql",
            "name": "stg_core__demanddeposit_master002",
            "alias": "stg_core__demanddeposit_master002",
            "checksum": {
                "name": "sha256",
                "checksum": "42fb2e188eca3cc785e0b995c9a2442456766ae30f17e4d0aabf42812d57b9d0"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dga_data_model\\models\\staging\\stg_core__demanddeposit_master002.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"account_no\") }}"
                ]
            },
            "created_at": 1672822571.800638,
            "compiled_code": "\nSELECT \n  account_no_sk\n  , account_no\n  , currency\n  , class\n  , account_name\n  , open_date\n  , int_liq_freq_code\n  , int_liq_freq\n  , special_rate\n  , rate_flr\n  , rate_cel\n  , rate_var\n  , rate_var_code\n  , rate_review_dt\n  , rate_review_term\n  , rate_review_code\n  , od_auth_limit\n  , od_draw_limit\n  , od_limit_code\n  , overdraft_facility\n  , overdraft_type\n  , od_rate_code\n  , od_rate\n  , efft_rate\n  , od_rate_flr\n  , od_rate_cel\n  , od_rate_var\n  , od_var_code\n  , od_review_dt\n  , od_review_term\n  , od_review_code\n  , od_application_no\n  , stmt_facility\n  , aft_facility\n  , cheque_faclility\n  , min_bal\n  , max_bal\n  , charge_freq\n  , charge_type\n  , sc_waive_exp_dt\n  , min_charge\n  , rec_current_ind\n  , rec_effective_date\n  , pooling_rel\n  , account_type\n  , subbranch_no\n  , branch_code_sk\n  , ddsic1\n  , etl_date\nFROM \n  df_2.demanddeposit_master002",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "model.dga_data_model.stg_core__demanddeposit_transaction002": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__demanddeposit_transaction002"
            ],
            "unique_id": "model.dga_data_model.stg_core__demanddeposit_transaction002",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\n  select * from df_2.demanddeposit_transaction002",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__demanddeposit_transaction002.sql",
            "original_file_path": "models\\staging\\stg_core__demanddeposit_transaction002.sql",
            "name": "stg_core__demanddeposit_transaction002",
            "alias": "stg_core__demanddeposit_transaction002",
            "checksum": {
                "name": "sha256",
                "checksum": "d915de9ce6d9d9de9c4ef118c3aa8e08791c06f706594b7ba305ff23ed29dca5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.8163617
        },
        "model.dga_data_model.stg_core__loan_master001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"account_no, rec_current_ind\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__loan_master001"
            ],
            "unique_id": "model.dga_data_model.stg_core__loan_master001",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"account_no, rec_current_ind\") }}'\r\n  )\r\n}}\r\nSELECT \r\n    account_no_sk\r\n  , account_no\r\n  , account_name\r\n  , participation_type\r\n  , org_start_dt\r\n  , book_dt\r\n  , value_dt\r\n  , maturity_dt\r\n  , first_release_dt\r\n  , last_release_dt\r\n  , full_release_dt\r\n  , first_pliq_dt\r\n  , first_iliq_dt\r\n  , tenor\r\n  , tenor_code\r\n  , drawdown_schd\r\n  , revolving\r\n  , spread\r\n  , spread_code\r\n  , based_rate\r\n  , accr_base\r\n  , accr_freq\r\n  , principal_liq_freq\r\n  , principal_liq_freq_code\r\n  , pliq_day\r\n  , interest_liq_freq\r\n  , interest_liq_freq_code\r\n  , iliq_day\r\n  , late_charge_type\r\n  , late_charge_rate\r\n  , dealer_id\r\n  , chg_off_account_no\r\n  , bnm_exempt_yn\r\n  , alternate_schedule_yn\r\n  , prime_review_days\r\n  , prime_review_term\r\n  , prime_review_code\r\n  , rate_review_term\r\n  , rate_review_code\r\n  , rate_review_days\r\n  , rec_current_ind\r\n  , rec_effective_date\r\n  , purpose_name\r\n  , officer_id\r\n  , group_code\r\n  , branch_code_sk\r\n  , product_sk\r\n  , subbranch_no\r\n  , user1\r\n  , user1name\r\n  , user2\r\n  , user2name\r\n  , etl_date\r\nFROM \r\n    df_2.loan_master001",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__loan_master001.sql",
            "original_file_path": "models\\staging\\stg_core__loan_master001.sql",
            "name": "stg_core__loan_master001",
            "alias": "stg_core__loan_master001",
            "checksum": {
                "name": "sha256",
                "checksum": "ffe5f079e1bf0bcbe4e8a4cb6aa18d4f2ef07474fca5a99733eceb0dcec12bbb"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"account_no, rec_current_ind\") }}"
                ]
            },
            "created_at": 1672822571.8163617
        },
        "model.dga_data_model.stg_core__loan_master002": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__loan_master002"
            ],
            "unique_id": "model.dga_data_model.stg_core__loan_master002",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nSELECT \r\n  record_identifier\r\n, bank_number\r\n, branch_number\r\n, reporting_branch\r\n, account_number\r\n, account_type\r\n, account_group_number\r\n, aa_no\r\n, facility_code\r\n, seq_no\r\n, customer_number\r\n, account_name\r\n, short_name\r\n, formatted_short_name\r\n, account_name_1\r\n, account_name_2\r\n, care_of\r\n, effective_rate_indicator\r\n, class_code\r\n, officer\r\n, account_keeper\r\n, status\r\n, application_type\r\n, loan_type\r\n, short_description\r\n, currency_type\r\n, currency_decimals\r\n, group_code\r\n, loan_group\r\n, cost_center\r\n, product_code\r\n, gl_book\r\n, ioc\r\n, multi_ccy_loan_code\r\n, splitmerge_status\r\n, sptf_loan_type\r\n, interest_base\r\n, interest_freq\r\n, year_base\r\n, payment_code\r\n, principal_original_amount\r\n, drawing_limit\r\n, amount_release\r\n, earmark_amount\r\n, memo_post_amount\r\n, prev_rest_balance\r\n, account_balance\r\n, interest_payable\r\n, minimum_charge\r\n, min_int_days\r\n, earn_additional_day_int\r\n, current_month_payoff\r\n, next_month_payoff\r\n, last_excess_amount\r\n, principal_balance\r\n, other_charges\r\n, misc_cost\r\n, assessed_late_charges\r\n, paid_late_charges\r\n, bank_discount\r\n, bank_discount_2\r\n, dealer_discount\r\n, credit_life_premium\r\n, a_h_ins_premium\r\n, misc_ins_premium\r\n, interest_rebate\r\n, interest_rebate_n2\r\n, dealer_rebate\r\n, cr_life_ins_rebate\r\n, ah_ins_rebate\r\n, misc_ins_rebate\r\n, accrued_interest\r\n, secondary_accrued_int\r\n, m_t_d_dealer_accrued_int\r\n, commitment_fee_accr_int\r\n, accrued_penalty_interest\r\n, advance_accrue_interest\r\n, advance_accrue_lcharges\r\n, advance_accrue_com_fees\r\n, advance_earned_interest\r\n, advance_dealer_acc_int\r\n, adv_sus_accrue_interest\r\n, adv_sus_earned_interest\r\n, adv_sus_acc_lc_interest\r\n, daily_accrual\r\n, daily_accr_late_chg\r\n, daily_accr_comm_fee\r\n, daily_dealer_accr\r\n, today_accrued_int\r\n, today_accrued_lc\r\n, today_acc_com_fee\r\n, today_dealer_accrue\r\n, new_payment_amount\r\n, new_pymt_effective_date\r\n, new_pymt_effective_date2\r\n, original_payment_amount\r\n, original_payment_code\r\n, original_payment_freq\r\n, payment_amount\r\n, final_payment\r\n, last_pymt_amount\r\n, partial_pymt_amt\r\n, advance_payment\r\n, capital_repayment\r\n, residue_value\r\n, minumum_balance\r\n, maximum_balance\r\n, developer_limit\r\n, dev_avail_bal\r\n, billed_prin_amt\r\n, billed_int_amt\r\n, billed_escrow_amt\r\n, billed_late_chgs\r\n, billed_other_chgs\r\n, billed_misc_cost\r\n, billed_prin_amt_od\r\n, billed_int_amt_od\r\n, billed_escrow_amt_od\r\n, billed_late_chgs_od\r\n, billed_other_chgs_od\r\n, billed_misc_cost_od\r\n, work_field_bill_prin\r\n, work_field_bill_int\r\n, no_of_days_for_billing\r\n, rebilling\r\n, rebilling_grace_day\r\n, yesterday_os_bal\r\n, yesterday_balance\r\n, yesterdays_other_chgs\r\n, yesterdays_misc_cost\r\n, yesterdays_assessed_lc\r\n, yesterdays_paid_lc\r\n, yesterdays_accrued_int\r\n, yesterdays_accrued_lc\r\n, yesterdays_acc_com_fee\r\n, yesterdays_dealer_accrue\r\n, yesterdays_int_rebate\r\n, yesterdays_int_rebate_2\r\n, yesterday_dealer_rebate\r\n, yesterdays_cl_rebate\r\n, yesterdays_ah_rebate\r\n, yesterdays_misc_ins_reb\r\n, yesterdays_accrual_bal\r\n, yesterdays_accrual_rate\r\n, yesterdays_accr_yr_base\r\n, yesterdays_cf_accr_bal\r\n, yesterdays_cf_accr_rate\r\n, yesterdays_cf_year_base\r\n, yesterdays_lc_accr_bal\r\n, yesterdays_lc_accr_rate\r\n, yest_lc_accr_bal_int\r\n, yest_lc_accr_rate_int\r\n, yesterdays_lc_year_base\r\n, yesterdays_dlr_accr_bal\r\n, yesterdays_dlr_accr_rate\r\n, yesterdays_dlr_year_base\r\n, previous_mth_os\r\n, last_mth_end_current_bal\r\n, last_mth_end_other_chgs\r\n, last_mth_end_misc_cost\r\n, last_mth_end_assessed_lc\r\n, last_mth_end_paid_lc\r\n, last_mth_end_interest\r\n, last_mtd_acc_penalty_int\r\n, last_mtd_comm_acc_int\r\n, last_mtd_dealer_acc\r\n, last_mth_end_int_rebate\r\n, last_mth_end_int_reb_2\r\n, last_mth_end_dealer_reb\r\n, last_mth_end_cl_rebate\r\n, last_mth_end_ah_rebate\r\n, last_mth_end_mis_ins_reb\r\n, yearly_opening_bal\r\n, prev_yr_int_in_susp_wb\r\n, prevyr_int_in_susp_wo\r\n, prevyr_write_back_prov\r\n, prevyr_write_off_prov\r\n, opening_int_in_susp\r\n, last_year_int_in_susp\r\n, previous_mth_int_in_sus\r\n, last_year_provision\r\n, last_month_provision\r\n, last_year_write_back\r\n, last_year_write_off\r\n, prev_year_dealer_rebate\r\n, int_paid_last_year\r\n, lc_paid_last_year\r\n, irs_interest_last_year\r\n, times_extended_last_yr\r\n, org_fees_last_year\r\n, accrued_int_at_year_end\r\n, int_rebate_at_year_end\r\n, mtd_int_paid\r\n, mtd_principal_paid\r\n, mtd_lc_paid\r\n, mtd_misc_chg_paid\r\n, mtd_other_chg_paid\r\n, mtd_payms_received\r\n, mtd_redemption\r\n, mtd_amount_release\r\n, mtd_accr_int_debit\r\n, mtd_late_chg_debit\r\n, mtd_misc_chg_debit\r\n, mtd_other_chg_debit\r\n, ytd_interest_paid\r\n, ytd__principal_paid\r\n, ytd_late_chgs_paid\r\n, ytd_misc_chg_paid\r\n, ytd_other_chg_paid\r\n, ytd_payms_received\r\n, ytd_redemption\r\n, ytd_amount_release\r\n, ytd_accr_int_debit\r\n, ytd_late_chg_debit\r\n, ytd_misc_chg_debit\r\n, ytd_other_chg_debit\r\n, ytd_extension_fees\r\n, ytd_times_extended\r\n, ytd_right_to_cures\r\n, ltd_interest_paid\r\n, ltd_principal_paid\r\n, ltd_lc_paid\r\n, ltd_misc_chg_paid\r\n, ltd_other_chg_paid\r\n, ltd_payms_received\r\n, ltd_redemption\r\n, ltd_accr_int_debit\r\n, ltd_late_chg_debit\r\n, ltd_misc_chg_debit\r\n, ltd_other_chg_debit\r\n, ltd_capital__repayment\r\n, ltd_extension_fees\r\n, ltd_times_renewed\r\n, ltd_irs_interest\r\n, ltd_org_fees\r\n, ltd_times_extended\r\n, ltd_right_to_cures\r\n, ltd_months_extended\r\n, date_last_statement\r\n, date_last_statement2\r\n, balance_last_stmt\r\n, statement_cycle\r\n, statement_code\r\n, total_accrual_float\r\n, tot_availibility_float\r\n, total_cash_float\r\n, total_oc_amount\r\n, total_ocp_amount\r\n, total_odoc_amount\r\n, total_mc_amount\r\n, total_ibt_amount\r\n, total_llc_amount\r\n, total_xtr_amount\r\n, date_entered\r\n, date_entered2\r\n, original_loan_date\r\n, original_loan_date2\r\n, availability_expiry_date\r\n, availability_expiry_date2\r\n, disburse_date\r\n, first_release_date\r\n, last_release_date\r\n, last_release_date2\r\n, full_rel_date\r\n, full_rel_date2\r\n, original_maturity_date\r\n, original_maturity_date2\r\n, principal_maturity_date\r\n, maturity_date\r\n, final_maturity_date\r\n, final_maturity_date2\r\n, int_maturity_date\r\n, int_maturity_date2\r\n, next_review_date\r\n, next_review_date2\r\n, prime_review_date\r\n, prime_review_date2\r\n, prime_review_day\r\n, rate_user_manual_review_date\r\n, rate_user_manual_review_date2\r\n, rate_user_manual_review_day\r\n, next_sched_pymt_date\r\n, next_sched_pymt_date2\r\n, first_pymt_date\r\n, first_pymt_date2\r\n, last_pymt_date\r\n, last_pymt_date2\r\n, next_pymt_due_date\r\n, next_pymt_due_date2\r\n, pymt_day_of_month\r\n, next_interest_repayment_date\r\n, next_int_pymt_due_date\r\n, nxt_sch_int_pymet_due_dt\r\n, nxt_sch_int_pymet_due_dt2\r\n, int_pymt_day_of_month\r\n, pymt_good_thru_date\r\n, pymt_good_thru_date2\r\n, int_paid_to_date\r\n, int_paid_to_date2\r\n, prevint_paid_to_date\r\n, prevint_paid_to_date2\r\n, date_of_refund\r\n, date_of_refund2\r\n, last_rebate_date\r\n, last_rebate_date2\r\n, next_rebate_date\r\n, next_rebate_date2\r\n, status_date\r\n, status_date2\r\n, payoff_date\r\n, payoff_date2\r\n, interest_start_date\r\n, interest_start_date2\r\n, accrue_int_eff_date\r\n, accrue_int_eff_date2\r\n, first_excess_date_6\r\n, first_excess_date_7\r\n, nonaccrual_date\r\n, nonaccrual_date2\r\n, chg_off_date\r\n, chg_off_date2\r\n, date_on_watch_list\r\n, date_on_watch_list2\r\n, reschedule_date\r\n, reschedule_date2\r\n, variation_date\r\n, variation_date2\r\n, last_right_to_cure_date\r\n, last_right_to_cure_date2\r\n, date_extended\r\n, date_renewedextended\r\n, examiner_class_date\r\n, examiner_class_date2\r\n, date_last_cheq_return\r\n, date_last_cheq_return2\r\n, coupon_book_reorder_date\r\n, coupon_book_reorder_date2\r\n, cl_ins_exp_date\r\n, cl_ins_exp_date2\r\n, ah_ins_exp_date\r\n, ah_ins_exp_date2\r\n, collat_ins_expiration\r\n, collat_ins_expiration2\r\n, availability_start_date\r\n, availability_start_date2\r\n, letter_of_offer_date_6\r\n, letter_of_offer_date_7\r\n, date_of_next_rest\r\n, date_of_next_rest2\r\n, date_claim_sub_to_cgc\r\n, date_claim_sub_to_cgc2\r\n, date_cgc_notified_of_npl\r\n, date_cgc_notified_of_npl2\r\n, date_fee_paid_to_cgc\r\n, date_fee_paid_to_cgc2\r\n, cgc_expiry_date\r\n, cgc_expiry_date2\r\n, interest_rate\r\n, dealer_rate\r\n, maturity_rate\r\n, prime_rate_number\r\n, prime_variance\r\n, prime_variance_code\r\n, prime_rate_floor\r\n, prime_rate_ceiling\r\n, rate_var_floor\r\n, rate_var_ceiling\r\n, prime_review_term\r\n, prime_review_term_code\r\n, rate_user_manual_review_term\r\n, term_code_manual_rate_review\r\n, effective_rate\r\n, two_tier_rate\r\n, late_charge_type\r\n, late_charge_rate\r\n, late_chg_grace_period\r\n, lc_grace_int_servicing\r\n, lc_accr_year_base\r\n, accrue_memo_late_charges\r\n, memo_late_charges\r\n, accrue_on__lc_rate_flag\r\n, late_chg_on_int_type\r\n, late_chg_on_int_rate\r\n, lc_on_int_grace_period\r\n, lc_on_int_grace_int_srvc\r\n, amt_to_be_released\r\n, commitment_rate\r\n, commitment_rate_no\r\n, com_fee_accr_year_base\r\n, min_usage_limit\r\n, min_usage_lmt_pct_of_ln_am\r\n, undrawn_limit\r\n, pct_of_total_undrawn\r\n, undrawn_lmt_excess_rate\r\n, undrawn_pct_if_above_lmt\r\n, principal_term\r\n, principal_term_code\r\n, permanent_no_maturity\r\n, max_roll_term\r\n, max_roll_term_code\r\n, payment_frequency\r\n, payment_freq_code\r\n, interest_term\r\n, interest_term_code\r\n, retention_period\r\n, retention_period_code\r\n, no_of_instls_paid\r\n, no_of_advance_instl_due\r\n, current_payment_no\r\n, no_of__instalment_paid\r\n, revolving\r\n, rollover_method\r\n, alternate_pymt_sched\r\n, drawndown_schd\r\n, tiered_loan\r\n, alternate_rate\r\n, standing_inst_code\r\n, tuition_fees\r\n, cpf_flag\r\n, giro\r\n, subsidized_by_3rd_party\r\n, specprov_flag\r\n, cal_rate_base_on_dep_acc\r\n, rate_tied_to_avg_of_bks\r\n, prin_repaym_schd\r\n, prin_inverse_order\r\n, auto_pay_int_by_unutil_prin\r\n, loan_limit_schd\r\n, tranche_working_schd\r\n, s__p_schd\r\n, secondary_loan\r\n, sec_loan_valid_period\r\n, promotion_flag\r\n, introducer_code\r\n, bnm_exempt\r\n, group_staff\r\n, allwed_incentive\r\n, overdue_indicator\r\n, prev_overdue_indicator\r\n, date_set_overdue_ind\r\n, date_set_overdue_ind2\r\n, waive_late_charge\r\n, waive_commitment_fee\r\n, waive_hold_mail_charges\r\n, reminder_code\r\n, re_lease\r\n, territory_code\r\n, collteral_type\r\n, switch_pmtcod_x_amt_rel\r\n, release_document_comp\r\n, cal_instl_nearest_d\r\n, user_code_1\r\n, user_code_2\r\n, sic_code_1\r\n, sic_code_2\r\n, sic_code_3\r\n, sic_code_4\r\n, set_fpdt_upon_first_rel\r\n, cal_first_instl_date\r\n, auto_update_pymt_cpde\r\n, default_pymt_cpde\r\n, nmth_grace_on_bkdisc_cal\r\n, disburse_onbef_day\r\n, day_for_auto_first_pymt\r\n, auto_set_nipdt\r\n, disburse_onbef_day2\r\n, day_for_auto_nipdt\r\n, auto_extend_maturity_dat\r\n, maturity_calc_method\r\n, auto_set_maturity_date\r\n, dealer_cal_mathod\r\n, dealer_com_payment\r\n, insider_code\r\n, participation_code\r\n, credit_line_code\r\n, department_code\r\n, purpose_code\r\n, call_report_code\r\n, dealer_participation_n\r\n, dealer_group\r\n, refinance_from\r\n, refinance_to\r\n, hold_mail_code\r\n, waive_hold_mail\r\n, include_on_stmt_code\r\n, print_billing_notice\r\n, prnt_confirmation_letter\r\n, past_due_notice_code\r\n, past_due_history_flag\r\n, send_past_due_notice\r\n, on_past_due_report\r\n, classification_type\r\n, investment_ac\r\n, credit_rating_code\r\n, special_message_flag\r\n, teller_special_status\r\n, escrowmortgage_info\r\n, close_on_zero_bal_code\r\n, cl_insurance_company_n\r\n, ah_insurance_company_n\r\n, misc_insurance_company_n\r\n, print_coupon_book_flag\r\n, coupon_book_term\r\n, arm_info_code\r\n, alm_type\r\n, participation_percent\r\n, partchg_off_acct_num\r\n, cr_line_acct_num\r\n, deal_no\r\n, notice_pre_days\r\n, include_escrow_in_payoff\r\n, requires_1098\r\n, stmt_or_passbook_code\r\n, watch_list_code\r\n, interest_free_amount\r\n, int_free_pmt_portion\r\n, amortized_pymt_suspense\r\n, one_mo_int_on_amort_loan\r\n, interest_trnxpaid_today\r\n, reamortize_alt_sch_exp\r\n, reamortize_payment_amt\r\n, reamortise_when_cp\r\n, reamortise_pymt_grace\r\n, reamortise_upon_disburse\r\n, reamortize_rate_chg_opt\r\n, reamortize_caprep_opt\r\n, reamortize_disburse_opt\r\n, board_applies_yn\r\n, rate_duration\r\n, update_mat_dt__rate_chg\r\n, update_mat_date___cp\r\n, update_mat_date___disb\r\n, purchase_contract_no\r\n, purchase_value\r\n, purchase_contract_rate\r\n, date_redeem___cagamas\r\n, date_redeem___cagamas2\r\n, date_of_purchase\r\n, date_of_purchase2\r\n, mthly_instl_cagamas\r\n, cagamas_qualify\r\n, npl_flag\r\n, npl_status\r\n, yesterday_npl_status\r\n, npl_status_b4_variation\r\n, npl_date\r\n, npl_date2\r\n, variation_npl_status\r\n, amount_in_default_before\r\n, months_in_default_before\r\n, total_int_unpaid\r\n, total_int_in_susp\r\n, total_lc_in_susp\r\n, taxable_int_in_susp\r\n, non_taxable_int_in_susp\r\n, interest_before_suspense\r\n, late_charges_b4_suspense\r\n, prev_npl_status_date\r\n, prev_npl_status_date2\r\n, int_payment_after_npl\r\n, payment_after_pl\r\n, int_rebate_on_pl_date\r\n, int_before_non_taxable\r\n, npl_allocate_int_first\r\n, start_mth_cont_12_mths\r\n, judgement__sum\r\n, judgement_date\r\n, judgement_date2\r\n, judgement_sum_accr_int\r\n, jdsum_accrual_indicator\r\n, classified_acctcode\r\n, reason_of_classification\r\n, previous_car_code\r\n, date_classified\r\n, date_classified2\r\n, previous_date_clas\r\n, previous_date_clas2\r\n, yesterday_account_status\r\n, yesterday_bank_no\r\n, yesterday_branch_no\r\n, yesterday_group_code\r\n, yesterday_cost_centre\r\n, yesterday_prod_code\r\n, yesterday_gl_book\r\n, yesterday_ioc\r\n, last_transfer_date6_bank\r\n, last_transfer_date7_bank\r\n, last_transfer_date6_brn\r\n, last_transfer_date7_brn\r\n, lst_trnsfr_date6_gl_grp\r\n, lst_trnsfr_date7_gl_grp\r\n, lst_trnsfr_date6_costctr\r\n, lst_trnsfr_date7_costctr\r\n, lst_trnsfr_date6_prodcod\r\n, lst_trnsfr_date7_prodcod\r\n, lst_trnsfr_date6_glbook\r\n, lst_trnsfr_date7_glbook\r\n, last_transfer_date6_ioc\r\n, last_transfer_date7_ioc\r\n, subj_int_in_lieu_of_notc\r\n, part_prepaym_notc_term\r\n, part_prepaym_notc_tm_cd\r\n, cmmn_of_prepymt_per_ind\r\n, cmmn_of_prepymt_date_6\r\n, cmmn_of_prepymt_date_7\r\n, early_sett_notc_term\r\n, early_sett_notc_tm_cd\r\n, cmmn_of_early_settle_ind\r\n, cmmn_of_esett_date_6\r\n, cmmn_of_esett_date_7\r\n, subj_to_prepaym_fee\r\n, cpre_pym_pof_win_x_mth\r\n, calc_if_ful_poff_within\r\n, prepaym_fee_flat_amt\r\n, p_fee_pct_of_amt_prepaid\r\n, p_fee_pct_of_loan_amount\r\n, p_fee_pct_unexpr_period\r\n, prepaym_fee_flat_amt2\r\n, p_fee_pct_of_amt_prepaid2\r\n, p_fee_pct_of_loan_amount2\r\n, p_fee_pct_unexpr_period2\r\n, pct_on_interest_rebate\r\n, penalty_on_int_rebate\r\n, tiered_prepayment\r\n, subj_to_repl_cost\r\n, repl_cost_flat_amt\r\n, repcst_pct_of_amt_prepaid\r\n, repcst_pct_of_loan_amount\r\n, repl_cost_flat_amt2\r\n, repcst_pct_of_amt_settled\r\n, repcst_pct_of_loan_amount2\r\n, repcst_pct_mmc_interface\r\n, subj_to_cancel_fee\r\n, cancel_fee_expr_drw_schd\r\n, cancel_fee_early_sett\r\n, esett_cfee_pct_unexpr_dura\r\n, avail_cfee_pct_of_undrawn\r\n, avail_cfee_pct_unexpr_dura\r\n, grace_day_int_lieu_ntc\r\n, term_from_lo_date\r\n, term_code_from_lo_date\r\n, renewedextended_this_mo\r\n, times_varied_l_t_d\r\n, times_varied_y_t_d\r\n, times_reschd_y_t_d\r\n, times_varied_last_yr\r\n, times_reschd_last_yr\r\n, profit_period_late_chgs\r\n, point_to_point_lc_earn\r\n, profit_period_ext_fees\r\n, profit_period_agg_bal\r\n, profit_period_int_earned\r\n, point_to_point_int_earn\r\n, profit_period_agg_days\r\n, times_past_due_10_29\r\n, times_past_due_30_59\r\n, times_past_due_60_89\r\n, times_past_due_90_o\r\n, last_year_past_due_10_29\r\n, last_year_past_due_30_59\r\n, last_year_past_due_60_89\r\n, last_year_past_due_90_o\r\n, l_t_d_past_due_10_29\r\n, l_t_d_past_due_30_59\r\n, l_t_d_past_due_60_89\r\n, l_t_d_past_due_90_o\r\n, advance_margin\r\n, retension__sum\r\n, total_amount_to_be_refund\r\n, allowable_refund_amount\r\n, actual_amount_refunded\r\n, percentage_pledged\r\n, margin_rate_downupwards\r\n, invoicechequepn_number\r\n, type_of_exchange\r\n, withholding_code\r\n, collateral_code\r\n, demandstudent_loan_code\r\n, standard_industry_code\r\n, demand_loan_code\r\n, title_still_needed_code\r\n, census_tract_1\r\n, state_code\r\n, county_code\r\n, investor_number\r\n, prepayment_penalty_code\r\n, loan_scheme_code\r\n, small_scale_code\r\n, borrower_code\r\n, guarantee_no\r\n, guarantee_cover\r\n, pgs_effective_date\r\n, pgs_effective_date2\r\n, cash_bonus\r\n, appraised_value\r\n, current_rest_amount\r\n, origination_fees_ytd\r\n, reduced_balance\r\n, balloon_payment\r\n, invalid_override\r\n, batch_number\r\n, amount_of_proceeds\r\n, amount_advanced\r\n, created_user\r\n, created_date\r\n, created_date2\r\n, created_time\r\n, history_posting_order\r\n, user_id\r\n, workstation_id\r\n, last_maint_date\r\n, last_maint_date2\r\n, last_maint_time\r\n, etl_date\r\nFROM \r\n  df_2.loan_master002",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__loan_master002.sql",
            "original_file_path": "models\\staging\\stg_core__loan_master002.sql",
            "name": "stg_core__loan_master002",
            "alias": "stg_core__loan_master002",
            "checksum": {
                "name": "sha256",
                "checksum": "7581c5d7839bc4621bb1086bc40d3e817247edaa7d2db14e0326d4008a610429"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg_dwh__customer_master001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__customer_master001"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__customer_master001",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nWITH df_cus AS (\r\n  SELECT\r\n      identifier\r\n    , retention\r\n    , bank_number\r\n    , branch_number\r\n    , cost_center\r\n    , customer_status\r\n    , customer_code AS customer_number\r\n    , customer_type\r\n    , salutation\r\n    , customer_shortname\r\n    , formatted_short_name\r\n    , customer_fullname_locale\r\n    , customer_fullname_english\r\n    , mother_maiden_name\r\n    , inquiry_code\r\n    , relationship_manager\r\n    , insider_code\r\n    , customer_vip_code\r\n    , hold_mail_code\r\n    , promotional_mail_code\r\n    , profit_analysis\r\n    , banking_division_infor1\r\n    , banking_division_infor2\r\n    , banking_division_infor3\r\n    , banking_division_infor4\r\n    , banking_division_infor5\r\n    , banking_division_infor6\r\n    , banking_division_infor7\r\n    , banking_division_infor8\r\n    , customer_segmentation1\r\n    , customer_segmentation2\r\n    , customer_segmentation3\r\n    , customer_segmentation4\r\n    , customer_segmentation5\r\n    , customer_segmentation6\r\n    , customer_segmentation7\r\n    , customer_segmentation8\r\n    , address_sequence\r\n    , resident_code\r\n    , service_recovery_flag\r\n    , country_of_citizenship\r\n    , residence_bus_oper_cntry_code\r\n    , racecountry_of_heritage\r\n    , religion_code\r\n    , language_identifier\r\n    , name_format\r\n    , customer_title_before_start\r\n    , customer_title_before_length\r\n    , customer_first_name_start\r\n    , customer_first_name_length\r\n    , customer_middle_name_start\r\n    , customer_middle_name_length\r\n    , customer_surname_start\r\n    , customer_surname_length\r\n    , customer_name_suffix\r\n    , customer_name_suffix_length\r\n    , customer_title_after_start\r\n    , customer_title_after_length\r\n    , customer_name_control\r\n    , original_customer_date AS original_contact_date\r\n    , original_date\r\n    , date_of_last_maintenance\r\n    , date_of_last_maintenance2\r\n    , customer_review_date_\r\n    , customer_review_date_ddmmyy\r\n    , customer_register_number\r\n    , id_type_code\r\n    , date_of_birth_ AS original_date_of_birth\r\n    , customer_birthday\r\n    , marital_status_code\r\n    , marital_status_date_\r\n    , marital_status_date_ddmmyy\r\n    , deceased_customer_flag\r\n    , deceaseddissolved_date_\r\n    , deceaseddissolved_date_ddmmyy\r\n    , gender\r\n    , class\r\n    , individual\r\n    , smsa_code\r\n    , business_type\r\n    , sub_class\r\n    , customer_rating\r\n    , customer_group_code\r\n    , customer_combined_cycle\r\n    , fed_wh_code\r\n    , state_wh_code\r\n    , federal_withholding_date_\r\n    , federal_withholding_date\r\n    , user_id\r\n    , workstation_id\r\n    , time\r\n    , customer_sts AS customer_sts_code\r\n    , customer_status_date_ddmmyy\r\n    , customer_status_date_\r\n    , tax_code_id\r\n    , reporting_branch\r\n    , department_code\r\n    , etl_date                                                                     \r\n    , regexp_replace(customer_register_number,  '[^0-9]+',  '') AS customer_register_number_cleansed\r\n    , regexp_replace(tax_code_id,  '[^0-9]+',  '') AS tax_code_cleansed\r\n    , is_valid_tax_code(regexp_replace(customer_register_number,  '[^0-9]+',  '')) AS is_valid_customer_register_number_cleansed\r\n    , is_valid_tax_code(regexp_replace(tax_code_id,  '[^0-9]+',  '')) AS is_valid_tax_code_cleansed\r\n    , fnc_remove_null_text(place_of_birth)    AS place_of_birth\r\n  FROM\r\n--     df_2.customer_master001\r\n    df_2.customer_master001\r\n)\r\n, df_cus_decode AS (\r\nSELECT \r\n  dc.*\r\n  , decode(\r\n      dc.is_valid_tax_code_cleansed\r\n      , 1\r\n      , dc.tax_code_cleansed\r\n      , decode(dc.is_valid_customer_register_number_cleansed\r\n      , 1\r\n      , dc.customer_register_number_cleansed\r\n      , NULL)\r\n    ) AS valid_format_tax_code \r\nFROM \r\n  df_cus dc  \r\n)\r\n, df_cus_tax AS (\r\n  SELECT \r\n    dct.*\r\n    , CASE\r\n        WHEN length(dct.valid_format_tax_code) = 13 \r\n          THEN substr(dct.valid_format_tax_code, 1, 10) || '-'|| substr(dct.valid_format_tax_code, 11)\r\n        ELSE dct.valid_format_tax_code\r\n      END AS tax_code_final\r\n    , is_date_yyyyddd(dct.original_date_of_birth) AS date_of_birth\r\n    , is_date_yyyyddd(dct.original_contact_date) AS contact_date\r\n    , fnc_remove_null_text(dct.place_of_birth)    AS place_of_birth_cleaned\r\n    , is_date_yyyyddd(dct.marital_status_date_)   AS marital_status_date\r\n    , is_date_yyyyddd(dct.customer_status_date_)  AS customer_status_date\r\n    , CASE\r\n        WHEN dct.individual = 'Y' THEN 'RB'\r\n        WHEN dct.individual = 'N' THEN 'EB'\r\n        ELSE 'OTHER'\r\n      END AS division\r\n  FROM \r\n    df_cus_decode dct\r\n)\r\nSELECT \r\n  dct.* \r\nFROM \r\n  df_cus_tax dct",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__customer_master001.sql",
            "original_file_path": "models\\staging\\stg_dwh__customer_master001.sql",
            "name": "stg_dwh__customer_master001",
            "alias": "stg_dwh__customer_master001",
            "checksum": {
                "name": "sha256",
                "checksum": "051761e78d4aef4fdf8b56b3aefa3622fe0ee779979b9c6bd50210fdf6a4800f"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg_dwh__customer_master002": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__customer_master002"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__customer_master002",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nSELECT \r\n    customer_sk\r\n  , customer_no AS customer_number\r\n  , country_code\r\n  , customer_type AS biz_line\r\n  , customer_name\r\n  , sector_code_sk\r\n  , identifier_type\r\n  , identifier_no\r\n  , id_issue_place\r\n  , id_issue_date AS original_id_issue_date\r\n  , is_date_yyyyddd(id_issue_date) AS id_issue_date\r\n  , id_expired_date\r\n  , gender\r\n  , birth_place\r\n  , birth_date\r\n  , marital_status\r\n  , marital_date\r\n  , residence\r\n  , address\r\n  , tax_code\r\n  , rating_level\r\n  , officer_id\r\n  , rec_current_ind\r\n  , rec_effective_date\r\n  , customer_name_2\r\n  , original_date\r\n  , vip_code\r\n  , customer_rating_code\r\n  , subbranch_no\r\n  , maker_id\r\n  , branch_code\r\n  , issue_remark AS id_issue_remark\r\n  , individual\r\n  , customer_status\r\n  , customer_status_desc\r\n  , cfinsc\r\n  , etl_date\r\nFROM \r\n  df_2.customer_master002",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__customer_master002.sql",
            "original_file_path": "models\\staging\\stg_dwh__customer_master002.sql",
            "name": "stg_dwh__customer_master002",
            "alias": "stg_dwh__customer_master002",
            "checksum": {
                "name": "sha256",
                "checksum": "5116274dc5af5eee10c524c3195354e286b32149d7ddc7840f818006e66e031c"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg_dwh__demanddeposit_master003": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dga_data_model.dwh__demanddeposit_master003"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [
                    "daily"
                ],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__demanddeposit_master003"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__demanddeposit_master003",
            "raw_code": "SELECT\r\n  *\r\nFROM\r\n  {{ ref('dwh__demanddeposit_master003')}}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__demanddeposit_master003.sql",
            "original_file_path": "models\\staging\\stg_dwh__demanddeposit_master003.sql",
            "name": "stg_dwh__demanddeposit_master003",
            "alias": "stg_dwh__demanddeposit_master003",
            "checksum": {
                "name": "sha256",
                "checksum": "7408c3cf88f85ef8817c9b00bad422cb182ec36b0d4e5b90263c25fdf901b7bc"
            },
            "tags": [
                "daily"
            ],
            "refs": [
                [
                    "dwh__demanddeposit_master003"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "tags": [
                    "daily"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg_dwh__dwh_csdm_branch": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__dwh_csdm_branch"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__dwh_csdm_branch",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  branch_code_sk\r\n  , branch_code\r\n  , branch_name\r\n  , branch_description\r\n  , parent_branch_code\r\n  , parent_branch_name\r\n  , branch_sbv_code\r\n  , branch_level\r\n  , group_code\r\n  , group_name\r\n  , cpc_code\r\n  , cpc_name\r\n  , area_code\r\n  , area_name\r\n  , auth_stat\r\n  , rec_current_ind\r\n  , rec_effective_date\r\n  , maker_id\r\n  , maker_stamp_dt\r\n  , checker_id\r\n  , checker_stamp_dt\r\n  , etl_date\r\nFROM \r\n  df_2.dwh_csdm_branch",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__dwh_csdm_branch.sql",
            "original_file_path": "models\\staging\\stg_dwh__dwh_csdm_branch.sql",
            "name": "stg_dwh__dwh_csdm_branch",
            "alias": "stg_dwh__dwh_csdm_branch",
            "checksum": {
                "name": "sha256",
                "checksum": "18c53c0ddb3b630a930e1ed176421eb4015a7e6d6e4dae1b955921f18b138ff5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.8498247
        },
        "model.dga_data_model.stg_dwh__dwh_csdm_transaction_code": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__dwh_csdm_transaction_code"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__dwh_csdm_transaction_code",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  tran_sk\r\n  , module\r\n  , trn_code\r\n  , trn_type\r\n  , dorc_ind\r\n  , affect_code\r\n  , description\r\n  , event_code\r\n  , event_name\r\n  , etl_date\r\nFROM \r\n  df_2.dwh_csdm_transaction_code",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__dwh_csdm_transaction_code.sql",
            "original_file_path": "models\\staging\\stg_dwh__dwh_csdm_transaction_code.sql",
            "name": "stg_dwh__dwh_csdm_transaction_code",
            "alias": "stg_dwh__dwh_csdm_transaction_code",
            "checksum": {
                "name": "sha256",
                "checksum": "c999ccf720d7dc4294e91a6cadbb38571e99df5e27b89e491aa1eae69c570cdd"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.8498247
        },
        "model.dga_data_model.stg_dwh__dwh_cydm_rate_history": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__dwh_cydm_rate_history"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__dwh_cydm_rate_history",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  branch_code\r\n  , ccy1\r\n  , ccy2\r\n  , buy_rate\r\n  , sell_rate\r\n  , mid_rate\r\n  , avg_rate\r\n  , buy_spread\r\n  , sale_spread\r\n  , rate_type\r\n  , start_date\r\n  , end_date\r\n  , datekey\r\n  , etl_date\r\nFROM \r\n  df_2.dwh_cydm_rate_history",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__dwh_cydm_rate_history.sql",
            "original_file_path": "models\\staging\\stg_dwh__dwh_cydm_rate_history.sql",
            "name": "stg_dwh__dwh_cydm_rate_history",
            "alias": "stg_dwh__dwh_cydm_rate_history",
            "checksum": {
                "name": "sha256",
                "checksum": "4a8b3920b1e8c3e2ffde457d0d72390255c0e326c5e891f21baaff0b490a6fb7"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.8498247
        },
        "model.dga_data_model.stg_dwh__dwh_dddm_product": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__dwh_dddm_product"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__dwh_dddm_product",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  product_sk\r\n  , product_code\r\n  , product_name\r\n  , product_slogan\r\n  , category\r\n  , currency\r\n  , avail_bal_type\r\n  , unused_limit_include\r\n  , min_bal_type\r\n  , min_reqd_bal\r\n  , unclaim_no_days\r\n  , closed_no_days\r\n  , int_bearing\r\n  , accr_bal\r\n  , reserved\r\n  , max_accr_bal\r\n  , min_accr_bal\r\n  , accr_method\r\n  , year_basis\r\n  , tier\r\n  , cumulative\r\n  , interest_code\r\n  , rate_variance\r\n  , efft_rate\r\n  , accr_freq\r\n  , accr_freq_code\r\n  , overdraft\r\n  , od_rate_code\r\n  , od_rate\r\n  , od_bal_type\r\n  , od_min_bal\r\n  , od_year_basis\r\n  , od_accr_method\r\n  , min_od_int\r\n  , dorm_no_days\r\n  , stmt_dorm\r\n  , dorm_charge\r\n  , dorm_bal_type\r\n  , dormal_bal\r\n  , charge_freq\r\n  , charge_freq_code\r\n  , min_charge\r\n  , charge_bearing\r\n  , neg_bal_charge\r\n  , zero_bal_charge\r\n  , sweep_facility\r\n  , stmt_facility\r\n  , stmt_freq_code\r\n  , stmt_freq\r\n  , checkbook_facility\r\n  , dr_no_limit\r\n  , gl_group\r\n  , rec_current_ind\r\n  , rec_effecttive_date\r\n  , grp\r\n  , product_bk\r\n  , etl_date\r\nFROM \r\n  df_2.dwh_dddm_product",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__dwh_dddm_product.sql",
            "original_file_path": "models\\staging\\stg_dwh__dwh_dddm_product.sql",
            "name": "stg_dwh__dwh_dddm_product",
            "alias": "stg_dwh__dwh_dddm_product",
            "checksum": {
                "name": "sha256",
                "checksum": "944841fd273866caa4534398165fee816a8671f2e2011c2ef6d9684d9ac3309c"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.865411
        },
        "model.dga_data_model.stg_dwh__dwh_fddm_product": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__dwh_fddm_product"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__dwh_fddm_product",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n    product_sk\r\n  , product_code\r\n  , product_name\r\n  , product_slogan\r\n  , start_date\r\n  , end_date\r\n  , currency\r\n  , term\r\n  , term_code\r\n  , min_term\r\n  , accr_bal\r\n  , reserve_percentage\r\n  , max_accr_bal\r\n  , min_accr_bal\r\n  , accr_method\r\n  , year_basis\r\n  , tier\r\n  , cumulative\r\n  , interest_code\r\n  , rate_variance\r\n  , int_liq_freq\r\n  , int_liq_req_code\r\n  , int_liq_type\r\n  , partial_withdr\r\n  , renew_allow\r\n  , stmt_facility\r\n  , min_bal_type\r\n  , min_reqd_bal\r\n  , gl_group\r\n  , rec_current_ind\r\n  , rec_effecttive_date\r\n  , product_bk\r\n  , etl_date\r\nFROM \r\n  df_2.dwh_fddm_product",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__dwh_fddm_product.sql",
            "original_file_path": "models\\staging\\stg_dwh__dwh_fddm_product.sql",
            "name": "stg_dwh__dwh_fddm_product",
            "alias": "stg_dwh__dwh_fddm_product",
            "checksum": {
                "name": "sha256",
                "checksum": "f2f0d09b9f146fda5c4ff16a2d2780c5f89765f90ed27f0bf1a426cb939fad3f"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.865411
        },
        "model.dga_data_model.stg_dwh__fixeddeposit_master002": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__fixeddeposit_master002"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__fixeddeposit_master002",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  account_sk\r\n  , account_no\r\n  , account_name\r\n  , currency\r\n  , class\r\n  , open_date\r\n  , term\r\n  , maturity_req\r\n  , redemption_date\r\n  , renew_code\r\n  , int_liq_freq\r\n  , rate_code\r\n  , rate_schd\r\n  , rate_flr\r\n  , rate_cel\r\n  , rate_var\r\n  , rate_review_term\r\n  , tier\r\n  , cumulative\r\n  , int_liq_type\r\n  , int_liq_account\r\n  , int_liq_account_type\r\n  , stmt_facility\r\n  , org_amount\r\n  , rec_current_ind\r\n  , rec_effective_date\r\n  , branch_code_sk\r\n  , subbranch_no\r\n  , subbranch_sk\r\n  , serial_no\r\n  , account_group_no\r\n  , user_id\r\n  , etl_date\r\nFROM \r\n  df_2.fixeddeposit_master002",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__fixeddeposit_master002.sql",
            "original_file_path": "models\\staging\\stg_dwh__fixeddeposit_master002.sql",
            "name": "stg_dwh__fixeddeposit_master002",
            "alias": "stg_dwh__fixeddeposit_master002",
            "checksum": {
                "name": "sha256",
                "checksum": "ca83f574d91bdd8908bb9d0c9008f6f77ffb5b94bc597b3017b75f3b23084846"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.865411
        },
        "model.dga_data_model.stg_dwh__fixeddeposit_master003": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_dwh__fixeddeposit_master003"
            ],
            "unique_id": "model.dga_data_model.stg_dwh__fixeddeposit_master003",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT\r\n  etl_date\r\n  , branch_sk\r\n  , account_sk\r\n  , account_no\r\n  , currency\r\n  , product_sk\r\n  , customer_sk\r\n  , customer_no\r\n  , status\r\n  , status_since\r\n  , to_number(to_char(to_date(open_date, 'YYYYDDD'), 'YYYYMMDD')) AS open_date\r\n  , term\r\n  , maturity_date\r\n  , last_renew_bal\r\n  , last_renew_date\r\n  , renew_count\r\n  , last_update_dt\r\n  , rate\r\n  , rate_review_dt\r\n  , accr_amount\r\n  , today_accr_dr\r\n  , expected_accr_int\r\n  , last_liq_date\r\n  , next_liq_date\r\n  , withdrawable_int\r\n  , org_discount_amt\r\n  , org_amount\r\n  , acy_blocked_amt\r\n  , acy_ledger_bal\r\n  , lcy_ledger_bal\r\n  , ac_stat_dormant\r\n  , dorm_since\r\n  , acy_aggr_bal\r\n  , aggr_days\r\n  , gl_code_sk\r\n  , maker_sk\r\n  , maker_dt_stamp\r\n  , officer_sk\r\n  , auto_renew\r\n  , renew_bal\r\n  , today_backdate_int\r\n  , mtd_accr_int\r\n  , last_int_amt_paid\r\n  , penanty_amount\r\n  , today_tover_int_dr\r\n  , today_tover_int_cr\r\n  , today_int_drop\r\n  , today_int_paid\r\n  , ctd_int_deposit\r\n  , ctd_int_withdraw\r\n  , ytd_interest_paid\r\n  , ctd_interest_paid\r\n  , highist_interest_earn\r\n  , yesterday_balance\r\nFROM \r\n  df_2.fixeddeposit_master003",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_dwh__fixeddeposit_master003.sql",
            "original_file_path": "models\\staging\\stg_dwh__fixeddeposit_master003.sql",
            "name": "stg_dwh__fixeddeposit_master003",
            "alias": "stg_dwh__fixeddeposit_master003",
            "checksum": {
                "name": "sha256",
                "checksum": "ec4e442a6b363cb3bf6355ee403fbdcdc80859a87cb3b3083bd46369fb11ed44"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.865411
        },
        "model.dga_data_model.stg_jupiter__jupiter_cif_register_history": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_jupiter__jupiter_cif_register_history"
            ],
            "unique_id": "model.dga_data_model.stg_jupiter__jupiter_cif_register_history",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nSELECT \r\n    id\r\n  , cif_number AS customer_number\r\n  , first_customer_name\r\n  , gender\r\n  , birthdate\r\n  , id_type\r\n  , nationality\r\n  , address\r\n  , email\r\n  , fax\r\n  , phonehome\r\n  , mobilephone\r\n  , phonework\r\n  , status\r\n  , birthplace\r\n  , id_date\r\n  , id_place\r\n  , race\r\n  , marital\r\n  , occupation\r\n  , position\r\n  , work_address\r\n  , resident_status\r\n  , id_number\r\n  , address_contact\r\n  , branchtag\r\n  , password\r\n  , province\r\n  , religion\r\n  , id_expire_date\r\n  , batch_id\r\n  , contract_code\r\n  , contract_expired_date\r\n  , contract_signed_date\r\n  , fatca\r\n  , create_time\r\n  , update_time\r\n  , create_by\r\n  , update_by\r\n  , err_code\r\n  , err_des\r\n  , status_process\r\n  , last_customer_name\r\n  , cif_number_company\r\n  , id_acc_inventory\r\n  , id_meed\r\n  , address_econtact\r\n  , address_econtact2\r\n  , address_econtact3\r\n  , address_econtact4\r\n  , address_econtact5\r\n  , application\r\n  , approve_by\r\n  , approve_time\r\n  , business_code\r\n  , business_code1\r\n  , business_code2\r\n  , business_type\r\n  , business_type1\r\n  , business_type2\r\n  , card_no\r\n  , cif_type\r\n  , company_ename\r\n  , company_foundation_date\r\n  , company_name\r\n  , company_sdkkd\r\n  , company_sdkkd_type\r\n  , date_busi_paper\r\n  , full_name\r\n  , gender_legalcontprsn\r\n  , last_customer_ename\r\n  , register_place\r\n  , rejection_reason\r\n  , tax\r\n  , faca_1\r\n  , faca_2\r\n  , faca_3\r\n  , faca_4\r\n  , faca_5\r\n  , faca_6\r\n  , faca_7\r\n  , faca_8\r\n  , faca_9\r\n  , status_fatca\r\n  , date_open\r\n  , secret_phrase\r\n  , status_desc\r\n  , version\r\n  , work_company_name\r\n  , work_income\r\n  , work_note\r\n  , work_origin\r\n  , risk_class\r\n  , check_vip\r\n  , reason\r\n  , id_north_star\r\n  , employment_status\r\n  , income_bracket_code\r\n  , id_ib_sms\r\n  , callcenter_date\r\n  , callcenter_by\r\n  , user_name\r\n  , check_ekyc\r\n  , sale_code\r\n  , id_image\r\n  , customer_care\r\n  , job_designation_code\r\n  , etl_date\r\n  , is_number(regexp_substr(sale_code, '[^|]+', 1, 1)) AS valid_sale_code\r\nFROM \r\n  df_2.jupiter_cif_register_history\r\n{% if is_incremental() %}\r\n  where update_time > (select max(update_time) from {{ this }})\r\n{% endif %}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_jupiter__jupiter_cif_register_history.sql",
            "original_file_path": "models\\staging\\stg_jupiter__jupiter_cif_register_history.sql",
            "name": "stg_jupiter__jupiter_cif_register_history",
            "alias": "stg_jupiter__jupiter_cif_register_history",
            "checksum": {
                "name": "sha256",
                "checksum": "6cb71eb176fe3640a8ca799208f71d2cd5e68c9ce304bf444259d9fc360d9680"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg_way4__card_acnt_contract": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"client_id \") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_way4__card_acnt_contract"
            ],
            "unique_id": "model.dga_data_model.stg_way4__card_acnt_contract",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"client_id \") }}'\r\n  )\r\n}}\r\nSELECT \r\n  amnd_date\r\n  , amnd_state\r\n  , amnd_officer\r\n  , amnd_prev\r\n  , id\r\n  , pcat\r\n  , con_cat\r\n  , terminal_category\r\n  , ccat\r\n  , f_i\r\n  , branch\r\n  , service_group\r\n  , contract_number\r\n  , contract_name\r\n  , comment_text\r\n  , base_relation\r\n  , relation_tag\r\n  , acnt_contract__id\r\n  , contr_type\r\n  , contr_subtype__id\r\n  , serv_pack__id\r\n  , old_pack\r\n  , channel\r\n  , acc_scheme__id\r\n  , old_scheme\r\n  , product_code\r\n  , product_prev\r\n  , parent_product\r\n  , main_product\r\n  , customer_id AS client_id\r\n  , client_type\r\n  , acnt_contract__oid\r\n  , liab_category\r\n  , liab_contract\r\n  , liab_contract_prev\r\n  , behavior_group\r\n  , behavior_type\r\n  , behavior_type_prev\r\n  , check_available\r\n  , check_usage\r\n  , curr\r\n  , old_curr\r\n  , auth_limit_amount\r\n  , base_auth_limit\r\n  , liab_balance\r\n  , liab_blocked\r\n  , own_balance\r\n  , own_blocked\r\n  , sub_balance\r\n  , sub_blocked\r\n  , total_blocked_amount\r\n  , total_balance\r\n  , shared_balance\r\n  , shared_blocked\r\n  , amount_available\r\n  , date_open\r\n  , date_expire\r\n  , last_billing_date\r\n  , next_billing_date\r\n  , last_scan\r\n  , card_expire\r\n  , production_status\r\n  , rbs_member_id\r\n  , rbs_number\r\n  , is_number(rbs_number) AS casa_account_number\r\n  , report_type\r\n  , max_pin_attempts\r\n  , failed_pin_attemps\r\n  , chip_scheme\r\n  , risk_scheme\r\n  , risk_factor\r\n  , risk_factor_prev\r\n  , contract_status\r\n  , merchant_id\r\n  , tr_title\r\n  , tr_company\r\n  , tr_country\r\n  , tr_first_nam\r\n  , tr_last_nam\r\n  , tr_sic\r\n  , add_info_01\r\n  , add_info_02\r\n  , add_info_03\r\n  , add_info_04\r\n  , regexp_substr(add_info_01, 'USLPA([^USLPA]*)$', 1, 1, NULL, 1) AS bpm_loan_id\r\n  , regexp_substr(add_info_01, '\\[(.*?)\\]', 1, 1, NULL, 1) AS los_id\r\n  , contract_level\r\n  , ext_data\r\n  , report_address\r\n  , share_balance\r\n  , is_multycurrency\r\n  , enables_item\r\n  , cycle_length\r\n  , interval_type\r\n  , status_category\r\n  , limit_is_active\r\n  , settlement_type\r\n  , is_ready\r\n  , billing_contract\r\n  , credit_limit\r\n  , etl_date\r\n  , CASE\r\n      WHEN add_info_04 IN ( 'cardhub', 'DFCJ2' ) THEN upper(to_char(add_info_04))\r\n      WHEN add_info_04 LIKE '%LOS%DF%' THEN 'DFLOS'\r\n    END AS card_sales_channel\r\nFROM \r\n  df_2.card_acnt_contract",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_way4__card_acnt_contract.sql",
            "original_file_path": "models\\staging\\stg_way4__card_acnt_contract.sql",
            "name": "stg_way4__card_acnt_contract",
            "alias": "stg_way4__card_acnt_contract",
            "checksum": {
                "name": "sha256",
                "checksum": "0becef8b4a9716b736c42a41bc1c5f1d2804831f9e9df3a8cfcf99c0c7f8e084"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"client_id \") }}"
                ]
            },
            "created_at": 1672822571.8810747
        },
        "model.dga_data_model.stg_way4__card_appl_product": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_way4__card_appl_product"
            ],
            "unique_id": "model.dga_data_model.stg_way4__card_appl_product",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  amnd_state\r\n  , amnd_date\r\n  , amnd_officer\r\n  , amnd_prev\r\n  , id\r\n  , name\r\n  , product_code\r\n  , code_2\r\n  , code_3\r\n  , internal_code\r\n  , f_i\r\n  , ccat\r\n  , pcat\r\n  , con_cat\r\n  , contr_type\r\n  , contr_subtype\r\n  , base_relation\r\n  , check_available\r\n  , check_usage\r\n  , liab_category\r\n  , acc_scheme\r\n  , max_credit_limit\r\n  , min_credit_limit\r\n  , default_credit_limit\r\n  , report_type\r\n  , serv_pack_type\r\n  , service_pack\r\n  , scoring_model\r\n  , tariff_domain\r\n  , tariff_domain_template\r\n  , copy_from_product\r\n  , custom_data\r\n  , is_active\r\n  , n_contracts\r\n  , appl_product__oid\r\n  , parent_code\r\n  , reporting_product\r\n  , main_product\r\n  , appl_pr_group__id\r\n  , product_group\r\n  , product_status\r\n  , is_ready\r\n  , date_from\r\n  , date_to\r\n  , client_type\r\n  , contract_role\r\n  , icon\r\n  , product_template\r\n  , base_product\r\n  , date_scheme\r\n  , etl_date\r\nFROM \r\n  df_2.card_appl_product",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_way4__card_appl_product.sql",
            "original_file_path": "models\\staging\\stg_way4__card_appl_product.sql",
            "name": "stg_way4__card_appl_product",
            "alias": "stg_way4__card_appl_product",
            "checksum": {
                "name": "sha256",
                "checksum": "a2c08257cff30ade97001d03a423053c31991ef541bb5ff6921bf18fd56c6413"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.8967159
        },
        "model.dga_data_model.stg_way4__card_client": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_code, customer_register_number, id \") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_way4__card_client"
            ],
            "unique_id": "model.dga_data_model.stg_way4__card_client",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"customer_code, customer_register_number, id \") }}'\r\n  )\r\n}}\r\nSELECT \r\n  amnd_state\r\n  , amnd_date\r\n  , amnd_officer\r\n  , amnd_prev\r\n  , id\r\n  , f_i\r\n  , branch_code\r\n  , ccat\r\n  , pcat\r\n  , clt\r\n  , service_group\r\n  , customer_shortname\r\n  , title\r\n  , first_nam\r\n  , last_nam\r\n  , birth_nam\r\n  , security_check_quiz\r\n  , birth_date\r\n  , birth_place\r\n  , father_s_nam\r\n  , company_represent_name\r\n  , trade_nam\r\n  , enable_affiliation\r\n  , affiliated_with\r\n  , reg_number_type\r\n  , customer_register_number AS customer_register_number_original\r\n  , regexp_replace(customer_register_number, '[^0-9A-Za-z]', '') AS customer_register_number\r\n  , register_location\r\n  , affiliation_type\r\n  , customer_code AS customer_code_original\r\n  , is_number(regexp_replace(customer_code, '[^0-9A-Za-z]', '')) AS customer_code\r\n  , itn\r\n  , tax_position\r\n  , country\r\n  , state\r\n  , city\r\n  , address_zip\r\n  , address_line_1\r\n  , address_line_2\r\n  , address_line_3\r\n  , address_line_4\r\n  , phone\r\n  , phone_home\r\n  , phone_mobile\r\n  , fax\r\n  , fax_home\r\n  , e_mail\r\n  , delivery_type\r\n  , date_expire\r\n  , date_open\r\n  , gender\r\n  , language\r\n  , marital_status\r\n  , profession\r\n  , tr_title\r\n  , tr_first_nam\r\n  , tr_last_nam\r\n  , tr_company_nam\r\n  , add_date_01\r\n  , add_date_02\r\n  , add_info_01\r\n  , add_info_02\r\n  , add_info_03\r\n  , add_info_04\r\n  , is_ready\r\n  , citizenship\r\n  , url\r\n  , company_department\r\n  , etl_date\r\nFROM \r\n  df_2.card_client",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_way4__card_client.sql",
            "original_file_path": "models\\staging\\stg_way4__card_client.sql",
            "name": "stg_way4__card_client",
            "alias": "stg_way4__card_client",
            "checksum": {
                "name": "sha256",
                "checksum": "211679a55b2ae803c3d33497aafd290346b88adf798125b9042e7ff721492ab4"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"customer_code, customer_register_number, id \") }}"
                ]
            },
            "created_at": 1672822571.8967159
        },
        "model.dga_data_model.stg_way4__card_contr_status": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_way4__card_contr_status"
            ],
            "unique_id": "model.dga_data_model.stg_way4__card_contr_status",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  amnd_state\r\n  , amnd_date\r\n  , amnd_officer\r\n  , amnd_prev\r\n  , id\r\n  , con_cat\r\n  , name\r\n  , code\r\n  , external_code\r\n  , is_valid\r\n  , action_type\r\n  , restriction_code\r\n  , priority_code\r\n  , fraud_type\r\n  , auth_rc\r\n  , code_parms\r\n  , etl_date\r\nFROM \r\n  df_2.card_contr_status",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_way4__card_contr_status.sql",
            "original_file_path": "models\\staging\\stg_way4__card_contr_status.sql",
            "name": "stg_way4__card_contr_status",
            "alias": "stg_way4__card_contr_status",
            "checksum": {
                "name": "sha256",
                "checksum": "1a67b457c5116ca9db5d5aba2581ce9416b261d2d9c2840fbfc35bdc7caa98e1"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.8967159
        },
        "model.dga_data_model.stg_way4__card_f_i": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_way4__card_f_i"
            ],
            "unique_id": "model.dga_data_model.stg_way4__card_f_i",
            "raw_code": "{{\r\n  config(\r\n    materialized='table'\r\n  )\r\n}}\r\nSELECT \r\n    amnd_state\r\n  , amnd_date\r\n  , amnd_officer\r\n  , amnd_prev\r\n  , id\r\n  , name\r\n  , bank_code\r\n  , branch_code\r\n  , calendar_type\r\n  , cb_code\r\n  , country\r\n  , cr_lim_posting\r\n  , days_in_year\r\n  , deposit_contract\r\n  , expence_percent\r\n  , ext_local_date\r\n  , fx_in_ho\r\n  , interest_in_cycle\r\n  , last_scan\r\n  , liab_contract\r\n  , local_currency\r\n  , local_date\r\n  , min_deposit\r\n  , mirror_scheme\r\n  , numeration_scheme\r\n  , parent_fi\r\n  , prnt_routing\r\n  , post_due\r\n  , posting_in\r\n  , special_parms\r\n  , sundry_contract\r\n  , tariff_domain\r\n  , time_zone\r\n  , etl_date\r\nFROM \r\n  df_2.card_f_i\r\nwhere id = 1",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_way4__card_f_i.sql",
            "original_file_path": "models\\staging\\stg_way4__card_f_i.sql",
            "name": "stg_way4__card_f_i",
            "alias": "stg_way4__card_f_i",
            "checksum": {
                "name": "sha256",
                "checksum": "8b7d208f70bbc67e8e501247e05443deabf73698f3dc0699c3a1d8da82eefc8e"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1672822571.8967159
        },
        "model.dga_data_model.stg__customer_address": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__customer_address"
            ],
            "unique_id": "model.dga_data_model.stg__customer_address",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nWITH cus_add AS (\r\n  SELECT\r\n      a.cfadid\r\n    , a.customer_number\r\n    , a.cfadsq AS seq_number\r\n    , a.cfadfm\r\n    , a.cfadtp AS address_type\r\n    , a.customer_address_2\r\n    , a.customer_address_3\r\n    , a.customer_address_4\r\n    , a.customer_address_5\r\n    , a.customer_address_6\r\n    , a.customer_address_7\r\n    , a.cfforn\r\n    , a.cfbada\r\n    , a.cfabnm\r\n    , a.cfasty\r\n    , a.cfaunm\r\n    , a.cfabox\r\n    , a.cfabdn\r\n    , a.cfastn\r\n    , a.cfcity\r\n    , a.cfstat\r\n    , a.cfzip\r\n    , a.cfcoun\r\n    , a.cfalv7\r\n    , a.cfalv6\r\n    , a.cfadlm\r\n    , a.cfadl6\r\n    , a.cfatim\r\n    , a.cfarmk\r\n    , a.cfalid\r\n    , a.etl_date\r\n    , fnc_remove_null_text(a.customer_address_2) AS customer_address_line_1\r\n    , fnc_remove_null_text(a.customer_address_3) AS customer_address_line_2\r\n    , fnc_remove_null_text(a.customer_address_4) AS customer_address_line_3\r\n    , fnc_remove_null_text(a.customer_address_5) AS customer_address_line_4\r\n    , TRIM(fnc_remove_null_text(a.customer_address_7)) AS permanent_address_city_name\r\n    , fnc_remove_null_text(a.cfstat) AS permanent_address_city_code\r\n    , fnc_remove_null_text(a.cfcoun) AS permanent_address_country\r\n    , ROW_NUMBER()\r\n        OVER(PARTITION BY a.customer_number\r\n              ORDER BY\r\n                  a.cfadsq DESC\r\n        ) AS rn\r\n  FROM\r\n    df_2.customer_address a\r\n  WHERE\r\n    a.cfadtp IS NULL -- 90% is null\r\n    OR a.cfadtp IN ( '2', '5', '7' ) -- ADDRESS_TYPE_DESC IN DF_CUSTOMER_ADDRESS_TYPE TABLE\r\n)\r\nSELECT \r\n  *\r\nFROM \r\n  cus_add\r\nWHERE \r\n  rn = 1",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__customer_address.sql",
            "original_file_path": "models\\staging\\stg__customer_address.sql",
            "name": "stg__customer_address",
            "alias": "stg__customer_address",
            "checksum": {
                "name": "sha256",
                "checksum": "e730ad513f31f16ac80141c059efa8037f1c7a2a3b53a19399b9cd70d8052426"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg__customer_connection": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__customer_connection"
            ],
            "unique_id": "model.dga_data_model.stg__customer_connection",
            "raw_code": "{{ config(\r\n    materialized='ephemeral'\r\n) }}\r\nSELECT\r\n  customer_number\r\n  , customer_type\r\n  , cfzseq AS seq_number\r\n  , customer_address_type\r\n  , fnc_remove_null_text(customer_email) AS customer_email\r\n  , cfeafm\r\n  , cfean1\r\n  , cfedep\r\n  , cfejob\r\n  , cfadlm\r\n  , cfadl6\r\n  , cfatim\r\n  , cfcifn\r\n  , is_date_yyyyddd(etl_date) AS etl_date\r\n  , is_date_yyyyddd(cfadlm) AS created_date\r\nFROM \r\n  df_2.customer_connection",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__customer_connection.sql",
            "original_file_path": "models\\staging\\stg__customer_connection.sql",
            "name": "stg__customer_connection",
            "alias": "stg__customer_connection",
            "checksum": {
                "name": "sha256",
                "checksum": "2733166a9af20581ba032db40c9f136f2abfbd84319af96e8fac42ea844f521a"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg__customer_connection_pivot": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg__customer_connection"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__customer_connection_pivot"
            ],
            "unique_id": "model.dga_data_model.stg__customer_connection_pivot",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nWITH con_rk AS (\r\n  SELECT \r\n    con.customer_number\r\n    , con.customer_address_type\r\n    , con.customer_email AS customer_address\r\n    , ROW_NUMBER()\r\n        OVER(PARTITION BY con.customer_number, con.customer_address_type\r\n              ORDER BY con.seq_number DESC, con.customer_type DESC) AS rn\r\n  FROM  \r\n    {{ ref('stg__customer_connection') }} con \r\n  WHERE\r\n    con.customer_address_type IN ( 'OP', 'HP', 'MP', 'EM' )-- HP: HOME PHONE -- OP: OFFICE PHONE -- MP: MOBILE PHONE -- EM: EMAIL\r\n)\r\n, con_pivot AS (\r\n  SELECT\r\n    *\r\n  FROM\r\n      con_rk\r\n  PIVOT (\r\n    MIN ( customer_address ) AS address\r\n  FOR customer_address_type\r\n    IN ( 'OP' AS office_phone, 'HP' AS home_phone, 'MP' AS mobile_phone, 'EM' AS email )\r\n      )\r\n  WHERE rn = 1\r\n)\r\nSELECT\r\n  * \r\nFROM\r\n  con_pivot",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__customer_connection_pivot.sql",
            "original_file_path": "models\\staging\\stg__customer_connection_pivot.sql",
            "name": "stg__customer_connection_pivot",
            "alias": "stg__customer_connection_pivot",
            "checksum": {
                "name": "sha256",
                "checksum": "f0fc513f4ed688c80f7c9fae4f004d4c21d544e31c387a75439673583bf2d93f"
            },
            "tags": [],
            "refs": [
                [
                    "stg__customer_connection"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "A starter dbt model",
            "columns": {
                "customer_number": {
                    "name": "customer_number",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg__customer_job_infomation": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__customer_job_infomation"
            ],
            "unique_id": "model.dga_data_model.stg__customer_job_infomation",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  cfbust\r\n  , cfsina AS industry_name\r\n  , etl_date\r\nFROM \r\n  df_2.customer_job_infomation",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__customer_job_infomation.sql",
            "original_file_path": "models\\staging\\stg__customer_job_infomation.sql",
            "name": "stg__customer_job_infomation",
            "alias": "stg__customer_job_infomation",
            "checksum": {
                "name": "sha256",
                "checksum": "216264fe371ee27362a22581201f498d239e478e9ce16621a1f11a0631ff4b24"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg__customer_marital_status": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__customer_marital_status"
            ],
            "unique_id": "model.dga_data_model.stg__customer_marital_status",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  cfmstc\r\n  , cfmstd AS marital_status_name\r\n  , etl_date\r\nFROM \r\n  df_2.customer_marital_status",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__customer_marital_status.sql",
            "original_file_path": "models\\staging\\stg__customer_marital_status.sql",
            "name": "stg__customer_marital_status",
            "alias": "stg__customer_marital_status",
            "checksum": {
                "name": "sha256",
                "checksum": "74ecbc2d69818e1ccc70597f498e5c28b0fb1a327e7cea316cf67929ec9eb466"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg__customer_subbranch_no": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dga_data_model.int__casa_account"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "customer_number",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__customer_subbranch_no"
            ],
            "unique_id": "model.dga_data_model.stg__customer_subbranch_no",
            "raw_code": "{{\r\n    config(\r\n        materialized='ephemeral',\r\n        unique_key='customer_number'\r\n    )\r\n}}\r\nWITH dat_casa AS (\r\n  SELECT\r\n      customer_number\r\n    , subbranch_no\r\n    , ROW_NUMBER() OVER(PARTITION BY customer_number ORDER BY open_date, open_time) AS rn\r\n  FROM\r\n    {{ ref('int__casa_account')}}\r\n)\r\n, dat_fd AS (\r\n  SELECT\r\n      customer_number\r\n    , subbranch_no\r\n    , ROW_NUMBER() OVER(PARTITION BY customer_number ORDER BY open_date) AS rn\r\n  FROM\r\n      df_fd_account\r\n)\r\n, dat_customer_w_subbranch AS (\r\n  SELECT\r\n      a.customer_number\r\n    , COALESCE(b.subbranch_no, c.subbranch_no) AS subbranch_no\r\n  FROM\r\n    df_customer a\r\n  LEFT JOIN dat_casa b ON a.customer_number = b.customer_number AND b.rn = 1\r\n  LEFT JOIN dat_fd c ON a.customer_number = c.customer_number AND c.rn = 1\r\n)\r\n  SELECT\r\n      customer_number\r\n    , subbranch_no\r\n  FROM\r\n    dat_customer_w_subbranch",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__customer_subbranch_no.sql",
            "original_file_path": "models\\staging\\stg__customer_subbranch_no.sql",
            "name": "stg__customer_subbranch_no",
            "alias": "stg__customer_subbranch_no",
            "checksum": {
                "name": "sha256",
                "checksum": "4202126e63174db6f23373a9b439af2469af2c17de6213a1d8f233aa1dc217ad"
            },
            "tags": [],
            "refs": [
                [
                    "int__casa_account"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "unique_key": "customer_number"
            },
            "created_at": 1672822571.9388678
        },
        "model.dga_data_model.stg__df_card_channel": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__df_card_channel"
            ],
            "unique_id": "model.dga_data_model.stg__df_card_channel",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  channel_code\r\n  , channel_desc\r\nFROM \r\n   df_2.df_card_channel",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__df_card_channel.sql",
            "original_file_path": "models\\staging\\stg__df_card_channel.sql",
            "name": "stg__df_card_channel",
            "alias": "stg__df_card_channel",
            "checksum": {
                "name": "sha256",
                "checksum": "cd0b84013acad05a4052f5adf1669bec701bf8724f70a15ef79cc0768ed43ac8"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.9388678
        },
        "model.dga_data_model.stg__df_casa_channel_trn_type": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__df_casa_channel_trn_type"
            ],
            "unique_id": "model.dga_data_model.stg__df_casa_channel_trn_type",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  tltxcd\r\n  , tltxds\r\nFROM \r\n  df_2.df_casa_channel_trn_type",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__df_casa_channel_trn_type.sql",
            "original_file_path": "models\\staging\\stg__df_casa_channel_trn_type.sql",
            "name": "stg__df_casa_channel_trn_type",
            "alias": "stg__df_casa_channel_trn_type",
            "checksum": {
                "name": "sha256",
                "checksum": "995298977fea86e1b60f402daafc47e864cac2f9917330fdeed4ac99e1280eb2"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822571.9546
        },
        "model.dga_data_model.stg__df_customer_sts_type": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__df_customer_sts_type"
            ],
            "unique_id": "model.dga_data_model.stg__df_customer_sts_type",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT \r\n  status\r\n  , status_name\r\nFROM \r\n   df_2.df_customer_sts_type",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__df_customer_sts_type.sql",
            "original_file_path": "models\\staging\\stg__df_customer_sts_type.sql",
            "name": "stg__df_customer_sts_type",
            "alias": "stg__df_customer_sts_type",
            "checksum": {
                "name": "sha256",
                "checksum": "269ebcf9db540e930ba80283d1ce4e5927694df3eac405815100d14e736af930"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672822572.0810258
        },
        "model.dga_data_model.stg__loan_application_facility": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__loan_application_facility"
            ],
            "unique_id": "model.dga_data_model.stg__loan_application_facility",
            "raw_code": "SELECT \r\n    afapno AS af_application_no\r\n  , afcifn AS af_application_cif\r\n  , afbrn  AS af_branch_code\r\n  , afcur  AS af_currency\r\n  , afcpno AS af_acf_no\r\n  , affcde AS af_facility_code\r\n  , aflevl AS af_facility_level\r\n  , afseq  AS af_facility_seq\r\n  , afmfcd AS af_facility_mother_code\r\n  , afmseq AS af_facility_mother_seq\r\n  , afaply AS af_apply_limit\r\n  , affamt AS af_facility_limit\r\n  , aflimt AS af_approved_limit\r\n  , afrate AS af_facility_rate\r\n  , afrevl AS af_facility_revolving\r\n  , afterm AS af_facility_term\r\n  , aftcod AS af_facility_term_code\r\n  , afpurp AS af_purpose_code\r\n  , afdecn AS af_decision_center\r\n  , afsecr AS af_secure_unsecured_partial\r\n  , afstat AS af_acf_status\r\n  , afapd7 AS af_date_approved\r\n  , afofd7 AS af_date_of_offer\r\n  , afoad7 AS af_date_offer_accepted\r\n  , afbkn\r\n  , afmfac\r\n  , afmaan\r\n  , afmfcd\r\n  , afmseq\r\n  , afstby\r\n  , afrtyp\r\n  , afltyp\r\n  , afemrk\r\n  , afend6\r\n  , afend7\r\n  , afapd6\r\n  , afsdc6\r\n  , afsdc7\r\n  , afrdc6\r\n  , afrdc7\r\n  , afofd6\r\n  , afoad6\r\n  , afard6\r\n  , afard7\r\n  , afappr\r\n  , afcanc\r\n  , afcnd6\r\n  , afcnd7\r\n  , afles7\r\n  , afles6\r\n  , aflesa\r\n  , afycvl\r\n  , afinst\r\n  , affpmt\r\n  , afccbp\r\n  , afcarf\r\n  , afcar\r\n  , afcr1a\r\n  , afcr2\r\n  , afcr2p\r\n  , afcr2a\r\n  , aftnpa\r\n  , afnpa6\r\n  , afnpa7\r\n  , afcarp\r\n  , afclrn\r\n  , afcsd6\r\n  , afcsd7\r\n  , afcsp6\r\n  , afcsp7\r\n  , affee\r\n  , afslfe\r\n  , afrvd6\r\n  , afrvd7\r\n  , aflrtm\r\n  , afcval\r\n  , afoffr\r\n  , afdept\r\n  , aflmst\r\n  , afbase\r\n  , afmode\r\n  , afybse\r\n  , afratn\r\n  , afvar\r\n  , afvarc\r\n  , afpflr\r\n  , afpcel\r\n  , afprv6\r\n  , afprv7\r\n  , afrvtm\r\n  , afrvcd\r\n  , aftpsq\r\n  , afexrt\r\n  , afexcd\r\n  , afiamt\r\n  , afists\r\n  , afiap6\r\n  , afiap7\r\n  , afiar6\r\n  , afiar7\r\n  , aficn6\r\n  , aficn7\r\n  , afsvar\r\n  , afsvrc\r\n  , afflat\r\n  , afpar\r\n  , afdlno\r\n  , aflcod\r\n  , afcom\r\n  , afhndf\r\n  , afsidy\r\n  , afothf\r\n  , afcomr\r\n  , afcomb\r\n  , afcmax\r\n  , afcmin\r\n  , afsbfc\r\n  , afsbsq\r\n  , afexp6\r\n  , afexp7\r\n  , afcfer\r\n  , afcfen\r\n  , afcfee\r\n  , aforgm\r\n  , afexmt\r\n  , afamtu\r\n  , afcomp\r\n  , afsprv\r\n  , afinsp\r\n  , afobal\r\n  , afpmtc\r\n  , afppfq\r\n  , afpfqc\r\n  , afipfq\r\n  , afifqc\r\n  , afgrce\r\n  , afgrcc\r\n  , affplg\r\n  , afaplg\r\n  , afplgp\r\n  , afarat\r\n  , afiapr\r\n  , afiex6\r\n  , afiex7\r\n  , afalts\r\n  , afmidy\r\n  , afeir\r\n  , afadvm\r\n  , afapmm\r\n  , afapdd\r\n  , afrets\r\n  , afretp\r\n  , afretc\r\n  , afprom\r\n  , afsrcc\r\n  , aforgc\r\n  , afwsts\r\n  , aflawc\r\n  , afdsbm\r\n  , afexsf\r\n  , afexuf\r\n  , affpdt\r\n  , afison\r\n  , afracd\r\n  , afrev6\r\n  , afrev7\r\n  , afrtrm\r\n  , afrtcd\r\n  , afinct\r\n  , afcfrq\r\n  , afcfrc\r\n  , afifrq\r\n  , afifrc\r\n  , afcrtn\r\n  , afirtn\r\n  , afcgc6\r\n  , afcgc7\r\n  , afaltr\r\n  , afdevc\r\n  , afcind\r\n  , afccid\r\n  , afccd7\r\n  , afccd6\r\n  , afcctm\r\n  , afmuid\r\n  , afmwid\r\n  , afmdt6\r\n  , afmdt7\r\n  , afmtim\r\n  , etl_date\r\nFROM \r\n  df_2.loan_application_facility",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__loan_application_facility.sql",
            "original_file_path": "models\\staging\\stg__loan_application_facility.sql",
            "name": "stg__loan_application_facility",
            "alias": "stg__loan_application_facility",
            "checksum": {
                "name": "sha256",
                "checksum": "da64377677e76c4f97b834fd3f79031163f5be486e9ef04c57ff50374ff0d17b"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822571.9546
        },
        "model.dga_data_model.stg__vw_df_customer_active_latest": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__vw_df_customer_active_latest"
            ],
            "unique_id": "model.dga_data_model.stg__vw_df_customer_active_latest",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nSELECT \r\n    to_number(cifno) AS customer_number\r\n  , cus_open_date\r\n  , id_number\r\n  , cfindi\r\n  , casa\r\n  , fd\r\n  , loan_sl\r\n  , loan_usl\r\n  , loan_oth\r\n  , od\r\n  , pb\r\n  , mcc\r\n  , debit\r\n  , banca_pbo_cas\r\n  , banca_oth\r\n  , spdt\r\n  , ib\r\n  , mb\r\n  , ib_mb\r\n  , sms\r\n  , total\r\n  , segment_lv2 AS segment_lv2_rb\r\n  , segment_lv1 AS segment_lv1_rb\r\n  , fcb\r\n  , inputter\r\n  , old_fcb\r\n  , year_month\r\nFROM \r\n df_2.vw_df_customer_active_latest",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__vw_df_customer_active_latest.sql",
            "original_file_path": "models\\staging\\stg__vw_df_customer_active_latest.sql",
            "name": "stg__vw_df_customer_active_latest",
            "alias": "stg__vw_df_customer_active_latest",
            "checksum": {
                "name": "sha256",
                "checksum": "0b025e849d22fb4f1df3f7757391bda4ca89912be1f18c08abefc45662e527e5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dga_data_model://models\\staging\\staging.yaml",
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672822572.0810258
        },
        "test.dga_data_model.unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date.4761489701": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "etl_date",
                        "account_no_sk"
                    ],
                    "condition_columns": "etl_date",
                    "model": "{{ get_where_subquery(ref('dwh__demanddeposit_master003')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dga_data_model.dwh__demanddeposit_master003"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "unique_combination_of_columns__e50bde7ad0db57559b7c14dfa3fa7d2e",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date"
            ],
            "unique_id": "test.dga_data_model.unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date.4761489701",
            "raw_code": "{{ test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_combination_of_columns__e50bde7ad0db57559b7c14dfa3fa7d2e\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "unique_combination_of_columns__e50bde7ad0db57559b7c14dfa3fa7d2e.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date",
            "alias": "unique_combination_of_columns__e50bde7ad0db57559b7c14dfa3fa7d2e",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dwh__demanddeposit_master003"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "unique_combination_of_columns__e50bde7ad0db57559b7c14dfa3fa7d2e"
            },
            "created_at": 1672822572.0341406,
            "column_name": null,
            "file_key_name": "models.dwh__demanddeposit_master003"
        },
        "test.dga_data_model.unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date.744a049d76": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "etl_date",
                        "account_sk"
                    ],
                    "condition_columns": "etl_date",
                    "model": "{{ get_where_subquery(ref('dwh__fixeddeposit_master003')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dga_data_model.dwh__fixeddeposit_master003"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "unique_combination_of_columns__79c3356d910f2d10a82281ed25ba18c2",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date"
            ],
            "unique_id": "test.dga_data_model.unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date.744a049d76",
            "raw_code": "{{ test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_combination_of_columns__79c3356d910f2d10a82281ed25ba18c2\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "unique_combination_of_columns__79c3356d910f2d10a82281ed25ba18c2.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date",
            "alias": "unique_combination_of_columns__79c3356d910f2d10a82281ed25ba18c2",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dwh__fixeddeposit_master003"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "unique_combination_of_columns__79c3356d910f2d10a82281ed25ba18c2"
            },
            "created_at": 1672822572.0341406,
            "column_name": null,
            "file_key_name": "models.dwh__fixeddeposit_master003"
        },
        "test.dga_data_model.unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date.caecc3fb45": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "etl_date",
                        "account_no_sk"
                    ],
                    "condition_columns": "etl_date",
                    "model": "{{ get_where_subquery(ref('dwh__loan_master003')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dga_data_model.dwh__loan_master003"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "unique_combination_of_columns__7c0a02ec80894d80ec9b32167597cad4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date"
            ],
            "unique_id": "test.dga_data_model.unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date.caecc3fb45",
            "raw_code": "{{ test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_combination_of_columns__7c0a02ec80894d80ec9b32167597cad4\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "unique_combination_of_columns__7c0a02ec80894d80ec9b32167597cad4.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date",
            "alias": "unique_combination_of_columns__7c0a02ec80894d80ec9b32167597cad4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "dwh__loan_master003"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "unique_combination_of_columns__7c0a02ec80894d80ec9b32167597cad4"
            },
            "created_at": 1672822572.0341406,
            "column_name": null,
            "file_key_name": "models.dwh__loan_master003"
        },
        "test.dga_data_model.dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number.d3e2d5794d": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "created_month",
                        "customer_number"
                    ],
                    "model": "{{ get_where_subquery(ref('report__list_approved_customer_by_df_001')) }}"
                },
                "namespace": "dbt_utils"
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dga_data_model.report__list_approved_customer_by_df_001"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "dbt_utils_unique_combination_o_e41859fb522bfa1b7b8911d1387ebd89",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "mart",
                "dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number"
            ],
            "unique_id": "test.dga_data_model.dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number.d3e2d5794d",
            "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e41859fb522bfa1b7b8911d1387ebd89\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "dbt_utils_unique_combination_o_e41859fb522bfa1b7b8911d1387ebd89.sql",
            "original_file_path": "models\\mart\\mart.yml",
            "name": "dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number",
            "alias": "dbt_utils_unique_combination_o_e41859fb522bfa1b7b8911d1387ebd89",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "report__list_approved_customer_by_df_001"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "dbt_utils_unique_combination_o_e41859fb522bfa1b7b8911d1387ebd89"
            },
            "created_at": 1672822572.0654986,
            "column_name": null,
            "file_key_name": "models.report__list_approved_customer_by_df_001"
        },
        "test.dga_data_model.unique_stg__customer_connection_pivot_customer_number.4aa7036c16": {
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "customer_number",
                    "model": "{{ get_where_subquery(ref('stg__customer_connection_pivot')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ],
                "nodes": [
                    "model.dga_data_model.stg__customer_connection_pivot"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "staging",
                "unique_stg__customer_connection_pivot_customer_number"
            ],
            "unique_id": "test.dga_data_model.unique_stg__customer_connection_pivot_customer_number.4aa7036c16",
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "unique_stg__customer_connection_pivot_customer_number.sql",
            "original_file_path": "models\\staging\\staging.yaml",
            "name": "unique_stg__customer_connection_pivot_customer_number",
            "alias": "unique_stg__customer_connection_pivot_customer_number",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [
                [
                    "stg__customer_connection_pivot"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.0810258,
            "column_name": "customer_number",
            "file_key_name": "models.stg__customer_connection_pivot"
        },
        "test.dga_data_model.source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date.1cf303bcbd": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "etl_date",
                        "account_no_sk"
                    ],
                    "condition_columns": "etl_date",
                    "model": "{{ get_where_subquery(source('dwh', 'ddft_master')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ddft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_unique_combination_of_c_8e29ed9f3acb91bf7fa6845cffb4589c",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date"
            ],
            "unique_id": "test.dga_data_model.source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date.1cf303bcbd",
            "raw_code": "{{ test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_combination_of_c_8e29ed9f3acb91bf7fa6845cffb4589c\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_unique_combination_of_c_8e29ed9f3acb91bf7fa6845cffb4589c.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date",
            "alias": "source_unique_combination_of_c_8e29ed9f3acb91bf7fa6845cffb4589c",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ddft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "source_unique_combination_of_c_8e29ed9f3acb91bf7fa6845cffb4589c"
            },
            "created_at": 1672822572.0810258,
            "column_name": null,
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_is_recency_dwh_ddft_master_etl_date.58b2088fa3": {
            "test_metadata": {
                "name": "is_recency",
                "kwargs": {
                    "column_name": "etl_date",
                    "model": "{{ get_where_subquery(source('dwh', 'ddft_master')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_is_recency",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ddft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_is_recency_dwh_ddft_master_etl_date"
            ],
            "unique_id": "test.dga_data_model.source_is_recency_dwh_ddft_master_etl_date.58b2088fa3",
            "raw_code": "{{ test_is_recency(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_is_recency_dwh_ddft_master_etl_date.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_is_recency_dwh_ddft_master_etl_date",
            "alias": "source_is_recency_dwh_ddft_master_etl_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ddft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.0810258,
            "column_name": "etl_date",
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_is_recency_dwh_ddft_transaction_trn_date.b05d64f57c": {
            "test_metadata": {
                "name": "is_recency",
                "kwargs": {
                    "column_name": "trn_date",
                    "model": "{{ get_where_subquery(source('dwh', 'ddft_transaction')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_is_recency",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.ddft_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_is_recency_dwh_ddft_transaction_trn_date"
            ],
            "unique_id": "test.dga_data_model.source_is_recency_dwh_ddft_transaction_trn_date.b05d64f57c",
            "raw_code": "{{ test_is_recency(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_is_recency_dwh_ddft_transaction_trn_date.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_is_recency_dwh_ddft_transaction_trn_date",
            "alias": "source_is_recency_dwh_ddft_transaction_trn_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "ddft_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.096764,
            "column_name": "trn_date",
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date.6f8ee49248": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "etl_date",
                        "account_sk"
                    ],
                    "condition_columns": "etl_date",
                    "model": "{{ get_where_subquery(source('dwh', 'fdft_master')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.fdft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_unique_combination_of_c_7a6babda8e2b76bfaaaa7da1792a39c4",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date"
            ],
            "unique_id": "test.dga_data_model.source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date.6f8ee49248",
            "raw_code": "{{ test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_combination_of_c_7a6babda8e2b76bfaaaa7da1792a39c4\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_unique_combination_of_c_7a6babda8e2b76bfaaaa7da1792a39c4.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date",
            "alias": "source_unique_combination_of_c_7a6babda8e2b76bfaaaa7da1792a39c4",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "fdft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "source_unique_combination_of_c_7a6babda8e2b76bfaaaa7da1792a39c4"
            },
            "created_at": 1672822572.096764,
            "column_name": null,
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_is_recency_dwh_fdft_master_etl_date.9ed31cec99": {
            "test_metadata": {
                "name": "is_recency",
                "kwargs": {
                    "column_name": "etl_date",
                    "model": "{{ get_where_subquery(source('dwh', 'fdft_master')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_is_recency",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.fdft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_is_recency_dwh_fdft_master_etl_date"
            ],
            "unique_id": "test.dga_data_model.source_is_recency_dwh_fdft_master_etl_date.9ed31cec99",
            "raw_code": "{{ test_is_recency(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_is_recency_dwh_fdft_master_etl_date.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_is_recency_dwh_fdft_master_etl_date",
            "alias": "source_is_recency_dwh_fdft_master_etl_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "fdft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.096764,
            "column_name": "etl_date",
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_is_recency_dwh_fdft_transaction_trn_date.05214279e7": {
            "test_metadata": {
                "name": "is_recency",
                "kwargs": {
                    "column_name": "trn_date",
                    "model": "{{ get_where_subquery(source('dwh', 'fdft_transaction')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_is_recency",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.fdft_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_is_recency_dwh_fdft_transaction_trn_date"
            ],
            "unique_id": "test.dga_data_model.source_is_recency_dwh_fdft_transaction_trn_date.05214279e7",
            "raw_code": "{{ test_is_recency(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_is_recency_dwh_fdft_transaction_trn_date.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_is_recency_dwh_fdft_transaction_trn_date",
            "alias": "source_is_recency_dwh_fdft_transaction_trn_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "fdft_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.096764,
            "column_name": "trn_date",
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date.f516a10e24": {
            "test_metadata": {
                "name": "unique_combination_of_columns",
                "kwargs": {
                    "combination_of_columns": [
                        "etl_date",
                        "account_no_sk"
                    ],
                    "condition_columns": "etl_date",
                    "model": "{{ get_where_subquery(source('dwh', 'lnft_master')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_unique_combination_of_columns",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.lnft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": "source_unique_combination_of_c_649711706f360a990568ceba96c6dd20",
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date"
            ],
            "unique_id": "test.dga_data_model.source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date.f516a10e24",
            "raw_code": "{{ test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_combination_of_c_649711706f360a990568ceba96c6dd20\") }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_unique_combination_of_c_649711706f360a990568ceba96c6dd20.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date",
            "alias": "source_unique_combination_of_c_649711706f360a990568ceba96c6dd20",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "lnft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "alias": "source_unique_combination_of_c_649711706f360a990568ceba96c6dd20"
            },
            "created_at": 1672822572.096764,
            "column_name": null,
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_is_recency_dwh_lnft_master_etl_date.7d978c35de": {
            "test_metadata": {
                "name": "is_recency",
                "kwargs": {
                    "column_name": "etl_date",
                    "model": "{{ get_where_subquery(source('dwh', 'lnft_master')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_is_recency",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.lnft_master"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_is_recency_dwh_lnft_master_etl_date"
            ],
            "unique_id": "test.dga_data_model.source_is_recency_dwh_lnft_master_etl_date.7d978c35de",
            "raw_code": "{{ test_is_recency(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_is_recency_dwh_lnft_master_etl_date.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_is_recency_dwh_lnft_master_etl_date",
            "alias": "source_is_recency_dwh_lnft_master_etl_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "lnft_master"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.1123881,
            "column_name": "etl_date",
            "file_key_name": "sources.dwh"
        },
        "test.dga_data_model.source_is_recency_dwh_lnft_transaction_tran_date.396f7d9c7e": {
            "test_metadata": {
                "name": "is_recency",
                "kwargs": {
                    "column_name": "tran_date",
                    "model": "{{ get_where_subquery(source('dwh', 'lnft_transaction')) }}"
                },
                "namespace": null
            },
            "resource_type": "test",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.test_is_recency",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "source.dga_data_model.dwh.lnft_transaction"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "database": "BULANDIN",
            "schema": "df_2_dbt_test__audit",
            "fqn": [
                "dga_data_model",
                "base",
                "source_is_recency_dwh_lnft_transaction_tran_date"
            ],
            "unique_id": "test.dga_data_model.source_is_recency_dwh_lnft_transaction_tran_date.396f7d9c7e",
            "raw_code": "{{ test_is_recency(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "source_is_recency_dwh_lnft_transaction_tran_date.sql",
            "original_file_path": "models\\base\\base.yml",
            "name": "source_is_recency_dwh_lnft_transaction_tran_date",
            "alias": "source_is_recency_dwh_lnft_transaction_tran_date",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "tags": [],
            "refs": [],
            "sources": [
                [
                    "dwh",
                    "lnft_transaction"
                ]
            ],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672822572.1123881,
            "column_name": "tran_date",
            "file_key_name": "sources.dwh"
        },
        "model.dga_data_model.int_way4__client": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg_way4__card_acnt_contract",
                    "model.dga_data_model.stg_way4__card_client",
                    "model.dga_data_model.int__customer",
                    "model.dga_data_model.int__customer",
                    "model.dga_data_model.int__customer",
                    "model.dga_data_model.int__casa_account"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "client_id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"id, customer_number \") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int_way4__client"
            ],
            "unique_id": "model.dga_data_model.int_way4__client",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    unique_key = 'client_id',\r\n    post_hook= '{{ create_index( this, \"id, customer_number \") }}'\r\n  )\r\n}}\r\nWITH client_w_dd_account_rn AS (\r\n  SELECT\r\n      client_id\r\n    , casa_account_number\r\n    , ROW_NUMBER() OVER(PARTITION BY client_id ORDER BY amnd_date DESC) AS rn\r\n  FROM\r\n    {{ ref('stg_way4__card_acnt_contract')}}\r\n  WHERE\r\n    amnd_state = 'A'\r\n    AND casa_account_number IS NOT NULL\r\n)\r\n, client_w_dd_account AS (\r\n  SELECT\r\n      client_id\r\n    , casa_account_number\r\n  FROM\r\n    client_w_dd_account_rn\r\n  WHERE\r\n    rn = 1\r\n)\r\n, client_w_customer_number AS (\r\n  SELECT\r\n      a.amnd_date\r\n    , a.id\r\n    , coalesce(b.customer_number, c.customer_number, d.customer_number, f.customer_number) AS customer_number\r\n    , a.branch_code\r\n    , a.ccat\r\n    , a.customer_shortname\r\n    , a.birth_date\r\n    , a.customer_register_number_original\r\n    , a.customer_register_number\r\n    , a.customer_code_original\r\n    , a.customer_code\r\n    , a.country\r\n    , a.city\r\n    , a.address_line_1\r\n    , a.address_line_2\r\n    , a.phone_mobile\r\n    , a.e_mail\r\n    , a.date_open\r\n    , e.casa_account_number\r\n  FROM\r\n    {{ ref('stg_way4__card_client')}}         a\r\n  LEFT JOIN {{ref('int__customer')}} b ON a.customer_code = b.customer_number\r\n  LEFT JOIN {{ref('int__customer')}} c \r\n    ON a.customer_register_number = c.customer_register_number\r\n      AND trunc(a.birth_date) = trunc(c.date_of_birth)\r\n  LEFT JOIN {{ref('int__customer')}} d ON a.customer_register_number = d.tax_code_final\r\n                              AND trunc(a.birth_date) = trunc(d.date_of_birth)\r\n  LEFT JOIN client_w_dd_account e ON a.id = e.client_id\r\n  LEFT JOIN {{ ref('int__casa_account')}} f ON e.casa_account_number = f.account_number\r\n  WHERE\r\n      amnd_state = 'A'\r\n)\r\n, client_w_customer_number_rn AS (\r\n  SELECT\r\n      a.*\r\n    , ROW_NUMBER() OVER(PARTITION BY a.id ORDER BY a.customer_number DESC ) AS rn\r\n  FROM\r\n    client_w_customer_number a\r\n)\r\n, client AS (\r\n  SELECT\r\n      amnd_date\r\n    , id\r\n    , customer_number\r\n    , branch_code\r\n    , ccat\r\n    , customer_shortname\r\n    , birth_date\r\n    , customer_register_number_original\r\n    , customer_register_number\r\n    , customer_code_original\r\n    , customer_code\r\n    , country\r\n    , city\r\n    , address_line_1\r\n    , address_line_2\r\n    , phone_mobile\r\n    , e_mail\r\n    , date_open\r\n    , casa_account_number\r\n  FROM\r\n      client_w_customer_number_rn\r\n  WHERE\r\n      rn = 1\r\n) \r\n  SELECT * FROM client",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int_way4__client.sql",
            "original_file_path": "models\\int\\int_way4__client.sql",
            "name": "int_way4__client",
            "alias": "int_way4__client",
            "checksum": {
                "name": "sha256",
                "checksum": "bbd82a5b3d4616d868ba623508f07b76c752ba6deef50b246a5617b8a633665c"
            },
            "tags": [],
            "refs": [
                [
                    "stg_way4__card_acnt_contract"
                ],
                [
                    "stg_way4__card_client"
                ],
                [
                    "int__customer"
                ],
                [
                    "int__customer"
                ],
                [
                    "int__customer"
                ],
                [
                    "int__casa_account"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "unique_key": "client_id",
                "post-hook": [
                    "{{ create_index( this, \"id, customer_number \") }}"
                ]
            },
            "created_at": 1672822608.304205
        },
        "model.dga_data_model.int_way4__contract": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg__card_acnt_contract_plus"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "contract_id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"contract_id, customer_number \") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int_way4__contract"
            ],
            "unique_id": "model.dga_data_model.int_way4__contract",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    unique_key = 'contract_id',\r\n    post_hook= '{{ create_index( this, \"contract_id, customer_number \") }}'\r\n  )\r\n}}\r\nWITH dat_result AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.id AS contract_id\r\n    , a.acnt_contract__id\r\n    , a.acnt_contract__oid\r\n    , a.liab_contract\r\n    , a.ccat\r\n    , a.branch\r\n    , a.contract_number\r\n    , a.contract_name\r\n    , a.channel\r\n    , a.channel_desc\r\n    , a.product_code_internal\r\n    , a.product_code\r\n    , a.product_name\r\n    , a.product_group\r\n    , a.customer_id_internal\r\n    , a.customer_number\r\n    , a.auth_limit_amount\r\n    , a.date_open\r\n    , a.date_expire\r\n    , a.last_billing_date\r\n    , a.next_billing_date\r\n    , a.contract_status\r\n    , a.contract_status_name\r\n    , a.tr_first_nam\r\n    , a.tr_last_nam\r\n    , a.cycle_length\r\n    , a.interval_type\r\n    , a.is_ready\r\n    , a.billing_contract\r\n    , a.amnd_date\r\n    , a.rbs_number\r\n    , a.bpm_loan_id\r\n    , a.card_sales_channel\r\n    , a.add_info_01\r\n    , a.add_info_02\r\n    , a.add_info_03\r\n    , a.add_info_04\r\n    , a.los_id\r\n    , a.type_of_card\r\n  FROM\r\n    {{ ref('stg__card_acnt_contract_plus')}} a\r\n  WHERE\r\n    a.con_cat = 'A'\r\n)\r\n, dat_cj_liab_contract AS (\r\n  SELECT DISTINCT\r\n    liab_contract\r\n  FROM\r\n    dat_result\r\n  WHERE\r\n    contract_number LIKE '%-O-%'\r\n    OR contract_number LIKE '%-W-%'\r\n    OR contract_number LIKE '%-B-%' \r\n)\r\n, dat_cj_liab_contract_w_los_id AS (\r\n  SELECT\r\n      a.liab_contract\r\n    , b.los_id\r\n    , b.bpm_loan_id\r\n  FROM\r\n    dat_cj_liab_contract a\r\n  LEFT JOIN dat_result b ON a.liab_contract = b.contract_id\r\n)\r\n, dat_hash AS (\r\n    SELECT\r\n        a.etl_date\r\n      , standard_hash(a.contract_id\r\n                        || '#'\r\n                        || a.acnt_contract__id\r\n                        || '#'\r\n                        || a.acnt_contract__oid\r\n                        || '#'\r\n                        || a.liab_contract\r\n                        || '#'\r\n                        || a.ccat\r\n                        || '#'\r\n                        || a.branch\r\n                        || '#'\r\n                        || a.contract_number\r\n                        || '#'\r\n                        || a.contract_name\r\n                        || '#'\r\n                        || a.channel\r\n                        || '#'\r\n                        || a.channel_desc\r\n                        || '#'\r\n                        || a.product_code_internal\r\n                        || '#'\r\n                        || a.product_code\r\n                        || '#'\r\n                        || a.product_name\r\n                        || '#'\r\n                        || a.product_group\r\n                        || '#'\r\n                        || a.customer_id_internal\r\n                        || '#'\r\n                        || a.customer_number\r\n                        || '#'\r\n                        || a.auth_limit_amount\r\n                        || '#'\r\n                        || a.date_open\r\n                        || '#'\r\n                        || a.date_expire\r\n                        || '#'\r\n                        || a.last_billing_date\r\n                        || '#'\r\n                        || a.next_billing_date\r\n                        || '#'\r\n                        || a.contract_status\r\n                        || '#'\r\n                        || a.contract_status_name\r\n                        || '#'\r\n                        || a.tr_first_nam\r\n                        || '#'\r\n                        || a.tr_last_nam\r\n                        || '#'\r\n                        || a.cycle_length\r\n                        || '#'\r\n                        || a.interval_type\r\n                        || '#'\r\n                        || a.is_ready\r\n                        || '#'\r\n                        || a.billing_contract\r\n                        || '#'\r\n                        || a.amnd_date\r\n                        || '#'\r\n                        || a.rbs_number\r\n                        || '#'\r\n                        || b.bpm_loan_id\r\n                        || '#'\r\n                        || a.card_sales_channel\r\n                        || '#'\r\n                        || a.add_info_01\r\n                        || '#'\r\n                        || a.add_info_02\r\n                        || '#'\r\n                        || a.add_info_03\r\n                        || '#'\r\n                        || a.add_info_04\r\n                        || '#'\r\n                        || a.type_of_card\r\n                        ) AS hash_diff\r\n      , a.contract_id\r\n      , a.acnt_contract__id\r\n      , a.acnt_contract__oid\r\n      , a.liab_contract\r\n      , a.ccat\r\n      , a.branch\r\n      , a.contract_number\r\n      , a.contract_name\r\n      , a.channel\r\n      , a.channel_desc\r\n      , a.product_code_internal\r\n      , a.product_code\r\n      , a.product_name\r\n      , a.product_group\r\n      , a.customer_id_internal\r\n      , a.customer_number\r\n      , a.auth_limit_amount\r\n      , a.date_open\r\n      , a.date_expire\r\n      , a.last_billing_date\r\n      , a.next_billing_date\r\n      , a.contract_status\r\n      , a.contract_status_name\r\n      , a.tr_first_nam\r\n      , a.tr_last_nam\r\n      , a.cycle_length\r\n      , a.interval_type\r\n      , a.is_ready\r\n      , a.billing_contract\r\n      , a.amnd_date\r\n      , a.rbs_number\r\n      , b.bpm_loan_id\r\n      , a.card_sales_channel\r\n      , a.add_info_01\r\n      , a.add_info_02\r\n      , a.add_info_03\r\n      , a.add_info_04\r\n      , b.los_id\r\n      , a.type_of_card\r\n    FROM\r\n        dat_result a\r\n        LEFT JOIN dat_cj_liab_contract_w_los_id b ON a.liab_contract = b.liab_contract\r\n)\r\nSELECT * FROM dat_hash",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int_way4__contract.sql",
            "original_file_path": "models\\int\\int_way4__contract.sql",
            "name": "int_way4__contract",
            "alias": "int_way4__contract",
            "checksum": {
                "name": "sha256",
                "checksum": "9519f4198186dbeec870304315c2a6f739a81826973b5bd155b915a5d4a56e3b"
            },
            "tags": [],
            "refs": [
                [
                    "stg__card_acnt_contract_plus"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "unique_key": "contract_id",
                "post-hook": [
                    "{{ create_index( this, \"contract_id, customer_number \") }}"
                ]
            },
            "created_at": 1672887702.0726886
        },
        "model.dga_data_model.int_way4__card": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg__card_acnt_contract_plus",
                    "model.dga_data_model.int_way4__contract",
                    "model.dga_data_model.stg_way4__card_f_i"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "card_id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"card_id, customer_number \") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int_way4__card"
            ],
            "unique_id": "model.dga_data_model.int_way4__card",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    unique_key = 'card_id',\r\n    post_hook= '{{ create_index( this, \"card_id, customer_number \") }}'\r\n  )\r\n}}\r\nWITH dat_card_activate_or_close AS (\r\n  SELECT\r\n      amend_date\r\n    , for_id\r\n    , current_value\r\n    , AMND_STATE\r\n    , CASE \r\n        WHEN current_value LIKE '%(Call Issuer) --> 00 (Card OK)%' \r\n          THEN ROW_NUMBER() OVER(PARTITION BY for_id ORDER BY amend_date) \r\n      END AS rn_active\r\n    , CASE \r\n        WHEN current_value LIKE '%-->%(Card Closed)%'\r\n          THEN ROW_NUMBER() OVER(PARTITION BY for_id ORDER BY amend_date DESC) \r\n      END AS rn_close\r\n    FROM\r\n      df_2.card_add_data\r\n    WHERE\r\n      (current_value LIKE '%(Call Issuer) --> 00 (Card OK)%'\r\n        OR current_value LIKE '%-->%(Card Closed)%')\r\n)\r\n, dat_result AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.id AS card_id\r\n    , a.acnt_contract__id\r\n    , a.acnt_contract__oid\r\n    , a.liab_contract\r\n    , a.ccat\r\n    , a.branch\r\n    , a.contract_number\r\n    , a.contract_name\r\n    , a.channel\r\n    , a.channel_desc\r\n    , a.product_code_internal\r\n    , a.product_code\r\n    , a.product_name\r\n    , a.product_group\r\n    , a.customer_id_internal\r\n    , a.customer_number\r\n    , decode(a.auth_limit_amount, 0, f.auth_limit_amount, a.auth_limit_amount) AS auth_limit_amount\r\n    , a.date_open\r\n    , a.date_expire\r\n    , a.last_billing_date\r\n    , a.next_billing_date\r\n    , a.card_expire\r\n    , a.contract_status\r\n    , a.contract_status_name\r\n    , a.tr_first_nam\r\n    , a.tr_last_nam\r\n    , a.cycle_length\r\n    , a.interval_type\r\n    , a.is_ready\r\n    , a.billing_contract\r\n    , a.type_of_card\r\n    , a.amnd_date\r\n    , a.rbs_number\r\n    , a.bpm_loan_id\r\n    , a.card_sales_channel\r\n    , a.add_info_01\r\n    , a.add_info_02\r\n    , a.add_info_03\r\n    , a.add_info_04\r\n    , g.amend_date AS date_activate\r\n    , CASE\r\n        WHEN a.contract_status_name ='Card Closed' THEN gc.amend_date\r\n      END AS close_date\r\n    , fi.bank_code\r\n    , CASE WHEN a.product_name LIKE '% Sub %' THEN 'Sub' ELSE 'Main' END AS product_main_or_sub\r\n  FROM\r\n    {{ ref('stg__card_acnt_contract_plus')}} a \r\n  LEFT JOIN {{ ref('int_way4__contract')}} f ON a.acnt_contract__oid = f.contract_id\r\n  LEFT JOIN dat_card_activate_or_close  g ON a.id = g.for_id AND g.rn_active = 1\r\n  LEFT JOIN dat_card_activate_or_close  gc ON a.id = gc.for_id AND gc.rn_close = 1 AND gc.AMND_STATE = 'A'\r\n  LEFT JOIN {{ ref('stg_way4__card_f_i') }} fi ON a.F_I = fi.ID AND fi.amnd_state='A'\r\n  WHERE\r\n    a.con_cat = 'C'\r\n    AND a.product_code NOT LIKE '%_REL_%'\r\n)\r\n, dat_hash AS (\r\n  SELECT\r\n      etl_date\r\n    , standard_hash(card_id\r\n                      || '#'\r\n                      || acnt_contract__id\r\n                      || '#'\r\n                      || acnt_contract__oid\r\n                      || '#'\r\n                      || liab_contract\r\n                      || '#'\r\n                      || ccat\r\n                      || '#'\r\n                      || branch\r\n                      || '#'\r\n                      || contract_number\r\n                      || '#'\r\n                      || contract_name\r\n                      || '#'\r\n                      || channel\r\n                      || '#'\r\n                      || channel_desc\r\n                      || '#'\r\n                      || product_code_internal\r\n                      || '#'\r\n                      || product_code\r\n                      || '#'\r\n                      || product_name\r\n                      || '#'\r\n                      || product_group\r\n                      || '#'\r\n                      || customer_id_internal\r\n                      || '#'\r\n                      || customer_number\r\n                      || '#'\r\n                      || auth_limit_amount\r\n                      || '#'\r\n                      || date_open\r\n                      || '#'\r\n                      || date_activate\r\n                      || '#'\r\n                      || date_expire\r\n                      || '#'\r\n                      || last_billing_date\r\n                      || '#'\r\n                      || next_billing_date\r\n                      || '#'\r\n                      || card_expire\r\n                      || '#'\r\n                      || contract_status\r\n                      || '#'\r\n                      || contract_status_name\r\n                      || '#'\r\n                      || tr_first_nam\r\n                      || '#'\r\n                      || tr_last_nam\r\n                      || '#'\r\n                      || cycle_length\r\n                      || '#'\r\n                      || interval_type\r\n                      || '#'\r\n                      || is_ready\r\n                      || '#'\r\n                      || billing_contract\r\n                      || '#'\r\n                      || type_of_card\r\n                      || '#'\r\n                      || amnd_date\r\n                      || '#'\r\n                      || rbs_number\r\n                      || '#'\r\n                      || bpm_loan_id\r\n                      || '#'\r\n                      || card_sales_channel\r\n                      || '#'\r\n                      || add_info_01\r\n                      || '#'\r\n                      || add_info_02\r\n                      || '#'\r\n                      || add_info_03\r\n                      || '#'\r\n                      || add_info_04\r\n                      || '#'\r\n                      || close_date\r\n                      || '#'\r\n                      || bank_code\r\n                      || '#'\r\n                      || product_main_or_sub\r\n                      ) AS hash_diff\r\n    , card_id\r\n    , acnt_contract__id\r\n    , acnt_contract__oid\r\n    , liab_contract\r\n    , ccat\r\n    , branch\r\n    , contract_number\r\n    , contract_name\r\n    , channel\r\n    , channel_desc\r\n    , product_code_internal\r\n    , product_code\r\n    , product_name\r\n    , product_group\r\n    , customer_id_internal\r\n    , customer_number\r\n    , auth_limit_amount\r\n    , date_open\r\n    , date_activate\r\n    , date_expire\r\n    , last_billing_date\r\n    , next_billing_date\r\n    , card_expire\r\n    , contract_status\r\n    , contract_status_name\r\n    , tr_first_nam\r\n    , tr_last_nam\r\n    , cycle_length\r\n    , interval_type\r\n    , is_ready\r\n    , billing_contract\r\n    , type_of_card\r\n    , amnd_date\r\n    , rbs_number\r\n    , bpm_loan_id\r\n    , card_sales_channel\r\n    , add_info_01\r\n    , add_info_02\r\n    , add_info_03\r\n    , add_info_04\r\n    , close_date\r\n    , bank_code\r\n    , product_main_or_sub\r\n  FROM\r\n      dat_result\r\n)\r\nSELECT * FROM dat_hash",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int_way4__card.sql",
            "original_file_path": "models\\int\\int_way4__card.sql",
            "name": "int_way4__card",
            "alias": "int_way4__card",
            "checksum": {
                "name": "sha256",
                "checksum": "6cf83c4ea0c4578e04fa0311dca339b11fd37ed6232b0f8f3f42f7d42d7a7caf"
            },
            "tags": [],
            "refs": [
                [
                    "stg__card_acnt_contract_plus"
                ],
                [
                    "int_way4__contract"
                ],
                [
                    "stg_way4__card_f_i"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "unique_key": "card_id",
                "post-hook": [
                    "{{ create_index( this, \"card_id, customer_number \") }}"
                ]
            },
            "created_at": 1672890588.0754628
        },
        "model.dga_data_model.stg__card_acnt_contract_plus": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg_way4__card_acnt_contract",
                    "model.dga_data_model.stg_way4__card_appl_product",
                    "model.dga_data_model.stg__df_card_channel",
                    "model.dga_data_model.int_way4__client",
                    "model.dga_data_model.stg_way4__card_contr_status",
                    "model.dga_data_model.stg_way4__card_acnt_contract"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"id, acnt_contract__oid\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg__card_acnt_contract_plus"
            ],
            "unique_id": "model.dga_data_model.stg__card_acnt_contract_plus",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    post_hook= '{{ create_index( this, \"id, acnt_contract__oid\") }}'\r\n  )\r\n}}\r\nSELECT \r\n    a.etl_date\r\n  , a.id\r\n  , a.acnt_contract__id\r\n  , a.acnt_contract__oid\r\n  , a.liab_contract\r\n  , a.ccat\r\n  , a.branch\r\n  , a.contract_number\r\n  , a.contract_name\r\n  , a.channel\r\n  , c.channel_desc\r\n  , a.product_code AS product_code_internal\r\n  , b.product_code\r\n  , b.name AS product_name\r\n  , b.product_group\r\n  , a.client_id AS customer_id_internal\r\n  , d.customer_number\r\n  , a.auth_limit_amount\r\n  , a.date_open\r\n  , a.date_expire\r\n  , a.last_billing_date\r\n  , a.next_billing_date\r\n  , a.contract_status\r\n  , e.name AS contract_status_name\r\n  , a.tr_first_nam\r\n  , a.tr_last_nam\r\n  , a.cycle_length\r\n  , a.interval_type\r\n  , a.is_ready\r\n  , a.billing_contract\r\n  , a.amnd_date\r\n  , a.rbs_number\r\n  , a.bpm_loan_id\r\n  , a.card_sales_channel\r\n  , a.add_info_01\r\n  , a.add_info_02\r\n  , a.add_info_03\r\n  , a.add_info_04\r\n  , a.los_id\r\n  , a.card_expire\r\n  , a.con_cat\r\n  , CASE \r\n      WHEN b.PRODUCT_GROUP='ISSDEB' THEN CASE WHEN upper(b.name) LIKE '%PREPAID%' THEN 'PREPAID_CARD' ELSE 'DEBIT_CARD' END\r\n      WHEN b.PRODUCT_GROUP='ISSCORP' THEN 'CREDIT_CARD'\r\n      WHEN b.PRODUCT_GROUP='ISSCRD' THEN CASE WHEN SUBSTR(a.contract_number,1,3)='999' THEN 'OTHER' ELSE 'CREDIT_CARD' END\r\n      WHEN b.PRODUCT_GROUP='ISS_DB' THEN 'DEBIT_CARD'\r\n      WHEN b.PRODUCT_GROUP='ACQRET' THEN 'DEVICE'\r\n      ELSE 'OTHER'\r\n      END AS type_of_card\r\n  , a.f_i\r\nFROM \r\n  {{ ref('stg_way4__card_acnt_contract')}} a\r\nLEFT JOIN {{ ref('stg_way4__card_appl_product')}} b \r\n  ON a.product_code = b.internal_code\r\n    AND a.ccat = b.ccat\r\n    AND a.con_cat = b.con_cat\r\n    AND b.amnd_state = 'A'\r\nLEFT JOIN {{ ref('stg__df_card_channel')}} c ON a.channel = c.channel_code\r\nLEFT JOIN {{ ref('int_way4__client')}} d ON a.client_id = d.id\r\nLEFT JOIN {{ ref('stg_way4__card_contr_status')}} e \r\n  ON a.contract_status = e.id\r\n    AND a.con_cat = e.con_cat\r\n    AND e.amnd_state = 'A'\r\n-- LEFT JOIN {{ ref('stg_way4__card_acnt_contract')}} f\r\n--   ON a.acnt_contract__oid = f.id\r\n--     AND a.ccat = f.ccat\r\n--     AND a.con_cat = f.con_cat\r\n--     AND f.amnd_state = 'A'\r\nWHERE a.amnd_state = 'A'",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg__card_acnt_contract_plus.sql",
            "original_file_path": "models\\staging\\stg__card_acnt_contract_plus.sql",
            "name": "stg__card_acnt_contract_plus",
            "alias": "stg__card_acnt_contract_plus",
            "checksum": {
                "name": "sha256",
                "checksum": "6fa7552942ef36682e705f76b6433acb9c0a6a1e7c677d4f711f7b3178468343"
            },
            "tags": [],
            "refs": [
                [
                    "stg_way4__card_acnt_contract"
                ],
                [
                    "stg_way4__card_appl_product"
                ],
                [
                    "stg__df_card_channel"
                ],
                [
                    "int_way4__client"
                ],
                [
                    "stg_way4__card_contr_status"
                ],
                [
                    "stg_way4__card_acnt_contract"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ create_index( this, \"id, acnt_contract__oid\") }}"
                ]
            },
            "created_at": 1672894648.738676
        },
        "model.dga_data_model.int__arrangement": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dga_data_model.int__casa_account",
                    "model.dga_data_model.int__casa_account",
                    "model.dga_data_model.int_way4__card",
                    "model.dga_data_model.int_way4__card"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int__arrangement"
            ],
            "unique_id": "model.dga_data_model.int__arrangement",
            "raw_code": "WITH dat_ibmb_rn AS (\r\n  SELECT\r\n    etl_date\r\n    , customer_number\r\n    , user_id\r\n    , to_number(to_char(create_time, 'YYYYMMDD')) AS open_date\r\n    , CASE\r\n        WHEN open_ibs = 'Y' AND open_mbs = 'Y' THEN 'IBMB'\r\n        WHEN open_ibs = 'Y' AND ( open_mbs = 'N' OR open_mbs IS NULL ) THEN 'IB'\r\n        WHEN ( open_ibs = 'N' OR open_ibs IS NULL ) AND open_mbs = 'Y' THEN 'MB'\r\n        END AS product_code\r\n    , ROW_NUMBER() OVER(PARTITION BY customer_number ORDER BY create_time ) AS rn\r\n  FROM\r\n    bc_user_info\r\n  WHERE\r\n    create_time IS NOT NULL\r\n), dat_ibmb AS (\r\n  SELECT\r\n      etl_date\r\n      , 'IBMB'  AS module\r\n      , customer_number\r\n      , user_id AS account_number\r\n      , product_code\r\n      , open_date\r\n      , NULL    AS activate_date\r\n  FROM\r\n      dat_ibmb_rn\r\n  WHERE\r\n      rn = 1\r\n)\r\nSELECT\r\n    etl_date\r\n    , standard_hash(module|| '#'|| customer_number|| '#'|| account_number|| '#'|| product_code|| '#'\r\n                    || open_date|| '#'|| activate_date\r\n      ) AS hash_diff\r\n    , module\r\n    , customer_number\r\n    , account_number\r\n    , product_code\r\n    , open_date\r\n    , activate_date\r\n    , module|| '#'|| customer_number|| '#'|| account_number AS unq_id\r\nFROM\r\n    dat_ibmb\r\nUNION ALL\r\nSELECT\r\n    etl_date\r\n  , standard_hash('CASA' || '#' || customer_number || '#' || account_number || '#' || product_code || '#' || open_date\r\n                    || '#' || NULL\r\n    ) AS hash_diff\r\n  , 'CASA' AS module\r\n  , customer_number\r\n  , account_number\r\n  , product_code\r\n  , open_date\r\n  , NULL AS activate_date\r\n  , 'CASA' || '#' || customer_number || '#' || account_number AS unq_id\r\nFROM\r\n  {{ ref('int__casa_account') }}\r\nUNION ALL\r\nSELECT\r\n    etl_date\r\n  , standard_hash('OD' || '#' || customer_number || '#' || account_number || '#'|| product_code|| '#'|| open_date\r\n                    || '#'|| NULL\r\n    ) AS hash_diff\r\n  , 'OD' AS module\r\n  , customer_number\r\n  , account_number\r\n  , product_code\r\n  , od_agreement_date_original AS open_date\r\n  , NULL AS activate_date\r\n  , 'OD' || '#' || customer_number || '#' || account_number AS unq_id\r\nFROM\r\n  {{ ref('int__casa_account') }}\r\nWHERE\r\n  od_agreement_date_original IS NOT NULL\r\nUNION ALL\r\nSELECT\r\n    etl_date\r\n  , standard_hash('CC' || '#' || customer_number || '#'|| card_id|| '#' || product_code|| '#'\r\n                    || to_number(to_char(date_open, 'YYYYMMDD')) || '#'\r\n                    || to_number(to_char(date_activate, 'YYYYMMDD'))\r\n    ) AS hash_diff\r\n  , 'CC' AS module\r\n  , customer_number\r\n  , card_id AS account_number\r\n  , product_code AS product_code\r\n  , to_number(to_char(date_open, 'YYYYMMDD')) AS open_date\r\n  , to_number(to_char(date_activate, 'YYYYMMDD')) AS activate_date\r\n  , 'CC' || '#' || customer_number || '#'|| card_id AS unq_id\r\nFROM\r\n  {{ ref('int_way4__card')}}\r\nWHERE\r\n  type_of_card = 'CREDIT_CARD'\r\nUNION ALL\r\nSELECT\r\n    etl_date\r\n  , standard_hash('DC' || '#' || customer_number || '#'|| card_id|| '#' || product_code|| '#'\r\n                    || to_number(to_char(date_open, 'YYYYMMDD')) || '#'\r\n                    || to_number(to_char(date_activate, 'YYYYMMDD'))\r\n    ) AS hash_diff\r\n  , 'DC' AS module\r\n  , customer_number\r\n  , card_id AS account_number\r\n  , product_code AS product_code\r\n  , to_number(to_char(date_open, 'YYYYMMDD')) AS open_date\r\n  , to_number(to_char(date_activate, 'YYYYMMDD')) AS activate_date\r\n  , 'DC' || '#' || customer_number || '#'|| card_id AS unq_id\r\nFROM\r\n  {{ ref('int_way4__card')}}\r\nWHERE\r\n  type_of_card = 'DEBIT_CARD'\r\nUNION ALL\r\nSELECT\r\n    etl_date\r\n  , standard_hash('LN'|| '#'|| customer_number|| '#'|| account_number|| '#'|| product_code|| '#'\r\n                    || to_number(to_char(to_date(original_loan_date2, 'YYYYDDD'), 'YYYYMMDD'))|| '#'|| NULL\r\n    ) AS hash_diff\r\n  , 'LN' AS module\r\n  , customer_number\r\n  , account_number\r\n  , loan_type AS product_code\r\n  , to_number(to_char(to_date(original_loan_date2, 'YYYYDDD'), 'YYYYMMDD')) AS open_date\r\n  , NULL AS activate_date\r\n  , 'LN'|| '#'|| customer_number|| '#'|| account_number AS unq_id\r\nFROM\r\n  stg_core__loan_master002\r\nUNION ALL\r\nSELECT\r\n    etl_date\r\n  , standard_hash('FD'|| '#'|| customer_number|| '#'|| account_number|| '#'|| product_code|| '#'\r\n                    || open_date|| '#'|| NULL\r\n    ) AS hash_diff\r\n  , 'FD' AS module\r\n  , customer_number\r\n  , account_number\r\n  , product_code\r\n  , open_date\r\n  , NULL AS activate_date\r\n  , 'FD'|| '#'|| customer_number|| '#'|| account_number AS unq_id\r\nFROM\r\n  int__fd_account",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int__arrangement.sql",
            "original_file_path": "models\\int\\int__arrangement.sql",
            "name": "int__arrangement",
            "alias": "int__arrangement",
            "checksum": {
                "name": "sha256",
                "checksum": "7e127e942eb0f1b8199b61ac154aa88d49ab7c1af41f4785b7662bb3640f299f"
            },
            "tags": [],
            "refs": [
                [
                    "int__casa_account"
                ],
                [
                    "int__casa_account"
                ],
                [
                    "int_way4__card"
                ],
                [
                    "int_way4__card"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672902036.7800295
        },
        "model.dga_data_model.int__fd_account": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental",
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg_dwh__fixeddeposit_master002",
                    "model.dga_data_model.stg_dwh__fixeddeposit_master003",
                    "model.dga_data_model.stg_dwh__dwh_fddm_product",
                    "model.dga_data_model.stg_dwh__dwh_csdm_branch",
                    "model.dga_data_model.stg_dwh__fixeddeposit_master002",
                    "model.dga_data_model.stg_dwh__dwh_cydm_rate_history"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "incremental",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": [
                    "customer_number",
                    "etl_date"
                ],
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int__fd_account"
            ],
            "unique_id": "model.dga_data_model.int__fd_account",
            "raw_code": "{{\r\n  config(\r\n    materialized='incremental',\r\n    unique_key = ['customer_number','etl_date'],\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nWITH fd_subbrand AS (\r\n  SELECT\r\n      account_no\r\n    , subbranch_no\r\n  FROM\r\n      {{ ref('stg_dwh__fixeddeposit_master002')}}\r\n  WHERE\r\n      rec_current_ind = 'Y'\r\n)\r\n, fd_account AS (\r\n  SELECT DISTINCT\r\n      fm.customer_no AS customer_number\r\n    , nvl(fm.account_no, fm2.account_no) AS account_number\r\n    , fm.currency AS currency_type\r\n    , fp.product_code\r\n    , fm.open_date\r\n    , fm.term\r\n    , fm.auto_renew\r\n    , cb.branch_code\r\n    , fm.org_amount\r\n  FROM\r\n    {{ ref('stg_dwh__fixeddeposit_master003')}} fm\r\n    LEFT JOIN {{ ref('stg_dwh__dwh_fddm_product')}} fp ON fm.product_sk = fp.product_sk\r\n    LEFT JOIN {{ ref('stg_dwh__dwh_csdm_branch')}} cb ON fm.branch_sk = cb.branch_code_sk\r\n    LEFT JOIN {{ ref('stg_dwh__fixeddeposit_master002')}} fm2 ON fm.account_sk = fm2.account_sk\r\n  \r\n{% if is_incremental() %}\r\n  WHERE\r\n    fm.etl_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n    AND fm.open_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n{% endif %}\r\n\r\n)\r\n, fd_account_ex AS ( \r\n  SELECT \r\n      fm.customer_number\r\n    , fm.account_number\r\n    , fm.currency_type\r\n    , fm.product_code\r\n    , fm.open_date\r\n    , fm.term\r\n    , fm.auto_renew\r\n    , fm.branch_code\r\n    , fm.org_amount\r\n    , rh.mid_rate\r\n    , CASE \r\n        WHEN fm.currency_type = 'VND' THEN fm.org_amount\r\n        ELSE fm.org_amount * rh.mid_rate \r\n      END AS lcy_org_amount\r\n    , fs.subbranch_no\r\n  FROM\r\n    fd_account fm \r\n  LEFT JOIN fd_subbrand fs ON fs.account_no = fm.account_number\r\n  LEFT JOIN {{ ref('stg_dwh__dwh_cydm_rate_history')}} rh \r\n      ON fm.open_date = to_number(to_char(to_date(rh.datekey, 'YYYYDDD'), 'YYYYMMDD'))\r\n        AND fm.currency_type = rh.ccy1\r\n        AND fm.currency_type <> 'VND'\r\n        AND fm.account_number IS NOT NULL\r\n), \r\nfd_hash AS (\r\n  SELECT\r\n    fa.open_date AS etl_date\r\n    , fa.*\r\n    , standard_hash(customer_number\r\n                                      || '#'\r\n                                      || account_number\r\n                                      || '#'\r\n                                      || currency_type\r\n                                      || '#'\r\n                                      || product_code\r\n                                      || '#'\r\n                                      || open_date\r\n                                      || '#'\r\n                                      || term\r\n                                      || '#'\r\n                                      || auto_renew\r\n                                      || '#'\r\n                                      || branch_code\r\n                                      || '#'\r\n                                      || subbranch_no\r\n                                      || '#'\r\n                                      || org_amount\r\n                                      || '#'\r\n                                      || lcy_org_amount) AS hash_diff \r\n\r\n  FROM fd_account_ex fa \r\n)\r\nSELECT * FROM fd_hash",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int__fd_account.sql",
            "original_file_path": "models\\int\\int__fd_account.sql",
            "name": "int__fd_account",
            "alias": "int__fd_account",
            "checksum": {
                "name": "sha256",
                "checksum": "9e2665ced7b2d2c4c6f8fbb895e4397d9c242703e6920f5f542ae1b9951b10b6"
            },
            "tags": [],
            "refs": [
                [
                    "stg_dwh__fixeddeposit_master002"
                ],
                [
                    "stg_dwh__fixeddeposit_master003"
                ],
                [
                    "stg_dwh__dwh_fddm_product"
                ],
                [
                    "stg_dwh__dwh_csdm_branch"
                ],
                [
                    "stg_dwh__fixeddeposit_master002"
                ],
                [
                    "stg_dwh__dwh_cydm_rate_history"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "incremental",
                "unique_key": [
                    "customer_number",
                    "etl_date"
                ],
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672905795.3613317
        },
        "model.dga_data_model.int__ld_account": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": [
                    "model.dga_data_model.stg_core__loan_master002",
                    "model.dga_data_model.stg_dwh__dwh_cydm_rate_history",
                    "model.dga_data_model.stg_core__loan_master001",
                    "model.dga_data_model.stg__loan_application_facility",
                    "model.dga_data_model.stg_dwh__dwh_cydm_rate_history"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "customer_number",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"customer_number\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "int",
                "int__ld_account"
            ],
            "unique_id": "model.dga_data_model.int__ld_account",
            "raw_code": "{{\r\n  config(\r\n    materialized='table',\r\n    unique_key = 'customer_number',\r\n    post_hook= '{{ create_index( this, \"customer_number\") }}'\r\n  )\r\n}}\r\nWITH  loan_master AS (\r\n  SELECT\r\n      a.etl_date\r\n    , a.customer_number\r\n    , a.account_number\r\n    , a.branch_number\r\n    , c.subbranch_no\r\n    , a.status\r\n    , a.loan_type AS product_code\r\n    , a.short_description\r\n    , a.currency_type\r\n    , a.principal_original_amount\r\n    , decode(a.currency_type, 'VND', a.principal_original_amount, a.principal_original_amount * b.mid_rate) AS lcy_principal_original_amount\r\n    , a.original_loan_date2 AS original_loan_date\r\n    , a.original_maturity_date2 AS original_maturity_date\r\n    , a.final_maturity_date2 AS final_maturity_date\r\n    , a.payoff_date2 AS payoff_date\r\n    , a.status_date2 AS status_date\r\n    , a.interest_rate\r\n    , a.interest_term\r\n    , a.interest_term_code\r\n    , a.letter_of_offer_date_7 AS letter_of_offer_date\r\n    , a.principal_term\r\n    , a.principal_term_code\r\n    , a.payment_frequency\r\n    , a.revolving\r\n    , a.rollover_method\r\n    , a.purpose_code\r\n    , c.purpose_name\r\n    , a.past_due_history_flag\r\n    , af_application_no\r\n    , af_application_cif\r\n    , af_branch_code\r\n    , af_currency\r\n    , af_acf_no\r\n    , af_facility_code\r\n    , af_facility_level\r\n    , af_facility_seq\r\n    , af_facility_mother_code\r\n    , af_facility_mother_seq\r\n    , af_apply_limit\r\n    , af_facility_limit\r\n    , af_approved_limit\r\n    , af_facility_rate\r\n    , af_facility_revolving\r\n    , af_facility_term\r\n    , af_facility_term_code\r\n    , af_purpose_code\r\n    , af_decision_center\r\n    , af_secure_unsecured_partial\r\n    , af_acf_status\r\n    , af_date_approved\r\n    , af_date_of_offer\r\n    , af_date_offer_accepted\r\n    , a.officer\r\n    , c.dealer_id\r\n  FROM\r\n      {{ ref('stg_core__loan_master002')}}        a\r\n  LEFT JOIN {{ ref('stg_dwh__dwh_cydm_rate_history')}} b \r\n    ON a.currency_type = b.ccy1 AND a.original_loan_date2 = b.datekey\r\n  LEFT JOIN {{ ref('stg_core__loan_master001')}} c \r\n    ON a.account_number = c.account_no AND c.rec_current_ind = 'Y'\r\n  LEFT JOIN {{ ref('stg__loan_application_facility')}} d \r\n    ON a.aa_no = d.af_application_no\r\n      AND a.facility_code = d.af_facility_code\r\n      AND a.seq_no = d.af_facility_seq\r\n)\r\n, min_exchange_rate AS (\r\n  SELECT\r\n      ccy1\r\n    , mid_rate\r\n    , ROW_NUMBER() OVER(PARTITION BY ccy1 ORDER BY datekey ) AS rn\r\n  FROM\r\n    {{ ref('stg_dwh__dwh_cydm_rate_history')}}\r\n)\r\n, dat_result AS (\r\n  SELECT\r\n      etl_date\r\n    , customer_number\r\n    , account_number\r\n    , branch_number AS branch_code\r\n    , subbranch_no\r\n    , status\r\n    , product_code\r\n    , short_description\r\n    , currency_type\r\n    , principal_original_amount\r\n    , nvl(lcy_principal_original_amount, principal_original_amount * mid_rate) AS lcy_principal_original_amount\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(original_loan_date)) AS original_loan_date\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(original_maturity_date)) AS original_maturity_date\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(final_maturity_date)) AS final_maturity_date\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(payoff_date)) AS payoff_date\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(status_date)) AS status_date\r\n    , interest_rate\r\n    , interest_term\r\n    , interest_term_code\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(letter_of_offer_date)) AS letter_of_offer_date\r\n    , principal_term\r\n    , principal_term_code\r\n    , payment_frequency\r\n    , revolving\r\n    , rollover_method\r\n    , purpose_code\r\n    , purpose_name\r\n    , past_due_history_flag\r\n    , af_application_no\r\n    , af_application_cif\r\n    , af_branch_code\r\n    , af_currency\r\n    , af_acf_no\r\n    , af_facility_code\r\n    , af_facility_level\r\n    , af_facility_seq\r\n    , af_facility_mother_code\r\n    , af_facility_mother_seq\r\n    , af_apply_limit\r\n    , af_facility_limit\r\n    , af_approved_limit\r\n    , af_facility_rate\r\n    , af_facility_revolving\r\n    , af_facility_term\r\n    , af_facility_term_code\r\n    , af_purpose_code\r\n    , af_decision_center\r\n    , af_secure_unsecured_partial\r\n    , af_acf_status\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(af_date_approved)) AS af_date_approved\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(af_date_of_offer)) AS af_date_of_offer\r\n    , fnc_convert_date_to_date_id(is_date_yyyyddd(af_date_offer_accepted)) AS af_date_offer_accepted\r\n    , officer\r\n    , dealer_id\r\n  FROM\r\n    loan_master       a\r\n  LEFT JOIN min_exchange_rate b ON a.currency_type = b.ccy1 AND b.rn = 1\r\n)\r\n, dat_hash AS (\r\n  SELECT\r\n      etl_date\r\n    , standard_hash(customer_number\r\n                      || '#'\r\n                      || account_number\r\n                      || '#'\r\n                      || branch_code\r\n                      || '#'\r\n                      || subbranch_no\r\n                      || '#'\r\n                      || status\r\n                      || '#'\r\n                      || product_code\r\n                      || '#'\r\n                      || short_description\r\n                      || '#'\r\n                      || currency_type\r\n                      || '#'\r\n                      || principal_original_amount\r\n                      || '#'\r\n                      || lcy_principal_original_amount\r\n                      || '#'\r\n                      || original_loan_date\r\n                      || '#'\r\n                      || original_maturity_date\r\n                      || '#'\r\n                      || final_maturity_date\r\n                      || '#'\r\n                      || payoff_date\r\n                      || '#'\r\n                      || status_date\r\n                      || '#'\r\n                      || interest_rate\r\n                      || '#'\r\n                      || interest_term\r\n                      || '#'\r\n                      || interest_term_code\r\n                      || '#'\r\n                      || letter_of_offer_date\r\n                      || '#'\r\n                      || principal_term\r\n                      || '#'\r\n                      || principal_term_code\r\n                      || '#'\r\n                      || payment_frequency\r\n                      || '#'\r\n                      || revolving\r\n                      || '#'\r\n                      || rollover_method\r\n                      || '#'\r\n                      || purpose_code\r\n                      || '#'\r\n                      || purpose_name\r\n                      || '#'\r\n                      || past_due_history_flag\r\n                      || '#'\r\n                      || af_application_no\r\n                      || '#'\r\n                      || af_application_cif\r\n                      || '#'\r\n                      || af_branch_code\r\n                      || '#'\r\n                      || af_currency\r\n                      || '#'\r\n                      || af_acf_no\r\n                      || '#'\r\n                      || af_facility_code\r\n                      || '#'\r\n                      || af_facility_level\r\n                      || '#'\r\n                      || af_facility_seq\r\n                      || '#'\r\n                      || af_facility_mother_code\r\n                      || '#'\r\n                      || af_facility_mother_seq\r\n                      || '#'\r\n                      || af_apply_limit\r\n                      || '#'\r\n                      || af_facility_limit\r\n                      || '#'\r\n                      || af_approved_limit\r\n                      || '#'\r\n                      || af_facility_rate\r\n                      || '#'\r\n                      || af_facility_revolving\r\n                      || '#'\r\n                      || af_facility_term\r\n                      || '#'\r\n                      || af_facility_term_code\r\n                      || '#'\r\n                      || af_purpose_code\r\n                      || '#'\r\n                      || af_decision_center\r\n                      || '#'\r\n                      || af_secure_unsecured_partial\r\n                      || '#'\r\n                      || af_acf_status\r\n                      || '#'\r\n                      || af_date_approved\r\n                      || '#'\r\n                      || af_date_of_offer\r\n                      || '#'\r\n                      || af_date_offer_accepted\r\n                      || '#'\r\n                      || officer) AS hash_diff\r\n    , customer_number\r\n    , account_number\r\n    , branch_code\r\n    , subbranch_no\r\n    , status\r\n    , product_code\r\n    , short_description\r\n    , currency_type\r\n    , principal_original_amount\r\n    , lcy_principal_original_amount\r\n    , original_loan_date\r\n    , original_maturity_date\r\n    , final_maturity_date\r\n    , payoff_date\r\n    , status_date\r\n    , interest_rate\r\n    , interest_term\r\n    , interest_term_code\r\n    , letter_of_offer_date\r\n    , principal_term\r\n    , principal_term_code\r\n    , payment_frequency\r\n    , revolving\r\n    , rollover_method\r\n    , purpose_code\r\n    , purpose_name\r\n    , past_due_history_flag\r\n    , af_application_no\r\n    , af_application_cif\r\n    , af_branch_code\r\n    , af_currency\r\n    , af_acf_no\r\n    , af_facility_code\r\n    , af_facility_level\r\n    , af_facility_seq\r\n    , af_facility_mother_code\r\n    , af_facility_mother_seq\r\n    , af_apply_limit\r\n    , af_facility_limit\r\n    , af_approved_limit\r\n    , af_facility_rate\r\n    , af_facility_revolving\r\n    , af_facility_term\r\n    , af_facility_term_code\r\n    , af_purpose_code\r\n    , af_decision_center\r\n    , af_secure_unsecured_partial\r\n    , af_acf_status\r\n    , af_date_approved\r\n    , af_date_of_offer\r\n    , af_date_offer_accepted\r\n    , officer\r\n    , dealer_id\r\n  FROM\r\n      dat_result\r\n)\r\nSELECT * FROM dat_hash",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "int\\int__ld_account.sql",
            "original_file_path": "models\\int\\int__ld_account.sql",
            "name": "int__ld_account",
            "alias": "int__ld_account",
            "checksum": {
                "name": "sha256",
                "checksum": "480e6024549c068c9856efbff68c7efc1efa116c3a0b986bd8989bef83ffb254"
            },
            "tags": [],
            "refs": [
                [
                    "stg_core__loan_master002"
                ],
                [
                    "stg_dwh__dwh_cydm_rate_history"
                ],
                [
                    "stg_core__loan_master001"
                ],
                [
                    "stg__loan_application_facility"
                ],
                [
                    "stg_dwh__dwh_cydm_rate_history"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "unique_key": "customer_number",
                "post-hook": [
                    "{{ create_index( this, \"customer_number\") }}"
                ]
            },
            "created_at": 1672905795.3912368
        },
        "snapshot.dga_data_model.mart_dim_casa_account": {
            "resource_type": "snapshot",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dga_data_model.int__casa_account"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "snapshot",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "account_number",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "strategy": "check",
                "target_schema": "df_2",
                "target_database": null,
                "updated_at": null,
                "check_cols": [
                    "hash_diff"
                ],
                "post-hook": [
                    {
                        "sql": "UPDATE {{ this }} SET eff_fm_dt = dbt_valid_from ",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "UPDATE {{ this }} SET eff_to_dt = dbt_valid_to ",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "UPDATE {{ this }} SET is_cur_rec = 1 WHERE dbt_valid_to IS NULL ",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "UPDATE {{ this }} SET is_cur_rec = 0 WHERE dbt_valid_to IS NOT NULL ",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart__dim_casa_account",
                "mart_dim_casa_account"
            ],
            "unique_id": "snapshot.dga_data_model.mart_dim_casa_account",
            "raw_code": "\r\n\r\n{{\r\n    config(\r\n      target_schema = 'df_2',\r\n      unique_key='account_number',\r\n      strategy='check',\r\n      check_cols=['hash_diff'],\r\n      post_hook= ['UPDATE {{ this }} SET eff_fm_dt = dbt_valid_from ',\r\n                  'UPDATE {{ this }} SET eff_to_dt = dbt_valid_to ',\r\n                  'UPDATE {{ this }} SET is_cur_rec = 1 WHERE dbt_valid_to IS NULL ',\r\n                  'UPDATE {{ this }} SET is_cur_rec = 0 WHERE dbt_valid_to IS NOT NULL ' ]\r\n    )\r\n}}\r\n\r\nSELECT \r\n    hash_diff\r\n    -- , is_cur_rec\r\n    -- , eff_fm_dt\r\n    -- , eff_to_dt\r\n    , customer_number\r\n    , account_number\r\n    , currency_type\r\n    , product_code\r\n    , account_name\r\n    , open_date\r\n    , open_time\r\n    , status\r\n    , status_date\r\n    , workstation_id\r\n    , user_id\r\n    , branch_code\r\n    , subbranch_no\r\n    , od_rate_current\r\n    , od_reate_number_current\r\n    , od_agreement_date_original\r\n    , od_expiration_date_original\r\n    , od_agreement_date_current\r\n    , od_expiration_date_current\r\n    , od_authorized_limit_current\r\n    , od_draw_limit_current\r\n    , is_overdraft_current\r\n    , source_account\r\nFROM {{ ref('int__casa_account') }}\r\n\r\n",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart__dim_casa_account.sql",
            "original_file_path": "snapshots\\mart__dim_casa_account.sql",
            "name": "mart_dim_casa_account",
            "alias": "mart_dim_casa_account",
            "checksum": {
                "name": "sha256",
                "checksum": "4a4171524829755ba7ff74bb7e3c431c8496f172f11431bac26060d2b5937342"
            },
            "tags": [],
            "refs": [
                [
                    "int__casa_account"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "target_schema": "df_2",
                "unique_key": "account_number",
                "strategy": "check",
                "check_cols": [
                    "hash_diff"
                ],
                "post-hook": [
                    "UPDATE {{ this }} SET eff_fm_dt = dbt_valid_from ",
                    "UPDATE {{ this }} SET eff_to_dt = dbt_valid_to ",
                    "UPDATE {{ this }} SET is_cur_rec = 1 WHERE dbt_valid_to IS NULL ",
                    "UPDATE {{ this }} SET is_cur_rec = 0 WHERE dbt_valid_to IS NOT NULL "
                ]
            },
            "created_at": 1672909330.116648
        },
        "snapshot.dga_data_model.mart_dim_customer": {
            "resource_type": "snapshot",
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dga_data_model.int__customer",
                    "model.dga_data_model.stg__customer_subbranch_no"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "snapshot",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "account_number",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "strategy": "check",
                "target_schema": "df_2",
                "target_database": null,
                "updated_at": null,
                "check_cols": [
                    "hash_diff"
                ],
                "post-hook": [
                    {
                        "sql": "UPDATE {{ this }} SET eff_fm_dt = dbt_valid_from ",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "UPDATE {{ this }} SET eff_to_dt = dbt_valid_to ",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "UPDATE {{ this }} SET is_cur_rec = 1 WHERE dbt_valid_to IS NULL ",
                        "transaction": true,
                        "index": null
                    },
                    {
                        "sql": "UPDATE {{ this }} SET is_cur_rec = 0 WHERE dbt_valid_to IS NOT NULL",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart__dim_customer",
                "mart_dim_customer"
            ],
            "unique_id": "snapshot.dga_data_model.mart_dim_customer",
            "raw_code": "\r\n\r\n {{\r\n    config(\r\n      target_schema = 'df_2',\r\n      unique_key='account_number',\r\n      strategy='check',\r\n      check_cols=['hash_diff'],\r\n      post_hook= ['UPDATE {{ this }} SET eff_fm_dt = dbt_valid_from ',\r\n                  'UPDATE {{ this }} SET eff_to_dt = dbt_valid_to ',\r\n                  'UPDATE {{ this }} SET is_cur_rec = 1 WHERE dbt_valid_to IS NULL ',\r\n                  'UPDATE {{ this }} SET is_cur_rec = 0 WHERE dbt_valid_to IS NOT NULL' ]\r\n    )\r\n}}\r\nSELECT \r\n    , a.bank_number\r\n    , a.branch_number\r\n    , a.customer_number\r\n    , a.customer_shortname\r\n    , a.formatted_short_name\r\n    , a.customer_fullname_locale\r\n    , a.customer_fullname_english\r\n    , a.relationship_manager\r\n    , a.resident_code\r\n    , a.country_of_citizenship\r\n    , a.original_date_of_birth\r\n    , a.date_of_birth\r\n    , a.original_contact_date\r\n    , a.contact_date\r\n    , a.customer_register_number\r\n    , a.id_type_code\r\n    , a.id_issue_place\r\n    , a.id_issue_remark\r\n    , a.original_id_issue_date\r\n    , a.id_issue_date\r\n    , a.place_of_birth\r\n    , a.marital_status_code\r\n    , a.marital_status_name\r\n    , a.marital_status_date\r\n    , a.gender\r\n    , a.user_id\r\n    , a.workstation_id\r\n    , a.customer_sts_code\r\n    , a.customer_sts_name\r\n    , a.customer_status_date\r\n    , a.tax_code_id\r\n    , a.reporting_branch\r\n    , a.department_code\r\n    , a.individual\r\n    , a.industry_code\r\n    , a.industry_name\r\n    , a.office_phone_address\r\n    , a.home_phone_address\r\n    , a.mobile_phone_address\r\n    , a.formatted_mobile_phone_address\r\n    , a.email_address\r\n    , a.valid_format_email_address\r\n    , a.customer_address_line_1\r\n    , a.customer_address_line_2\r\n    , a.customer_address_line_3\r\n    , a.customer_address_line_4\r\n    , a.permanent_address_city_name\r\n    , a.permanent_address_city_code\r\n    , a.permanent_address_country\r\n    , a.division\r\n    , a.biz_line\r\n    , a.segment_lv1_rb\r\n    , a.segment_lv2_rb\r\n    , a.source_customer\r\n    , b.subbranch_no\r\n    , a.tax_code_final\r\n    , a.customer_company\r\n    , a.hash_diff\r\nFROM \r\n  {{ ref('int__customer') }} a \r\nLEFT JOIN {{ ref('stg__customer_subbranch_no')}} b ON a.customer_number = b.customer_number \r\n\r\n",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart__dim_customer.sql",
            "original_file_path": "snapshots\\mart__dim_customer.sql",
            "name": "mart_dim_customer",
            "alias": "mart_dim_customer",
            "checksum": {
                "name": "sha256",
                "checksum": "abcc4093328b2644e2698c4baba660e25faf0c5ec3d6a9a410161814b6461fdf"
            },
            "tags": [],
            "refs": [
                [
                    "int__customer"
                ],
                [
                    "stg__customer_subbranch_no"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "target_schema": "df_2",
                "unique_key": "account_number",
                "strategy": "check",
                "check_cols": [
                    "hash_diff"
                ],
                "post-hook": [
                    "UPDATE {{ this }} SET eff_fm_dt = dbt_valid_from ",
                    "UPDATE {{ this }} SET eff_to_dt = dbt_valid_to ",
                    "UPDATE {{ this }} SET is_cur_rec = 1 WHERE dbt_valid_to IS NULL ",
                    "UPDATE {{ this }} SET is_cur_rec = 0 WHERE dbt_valid_to IS NOT NULL"
                ]
            },
            "created_at": 1672909558.175926
        },
        "model.dga_data_model.stg_core__demanddeposit_transaction001": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dga_data_model.create_index"
                ],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [
                    {
                        "sql": "{{ create_index( this, \"account_no_sk, channel_trn\") }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__demanddeposit_transaction001"
            ],
            "unique_id": "model.dga_data_model.stg_core__demanddeposit_transaction001",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral',\r\n    post_hook= '{{ create_index( this, \"account_no_sk, channel_trn\") }}'\r\n  )\r\n}}\r\nSELECT \r\n  standard_hash(a.trn_date|| '#'|| a.trn_time|| '#'|| a.src_ref_no|| '#'|| a.seq_number|| '#'|| a.lcy_amount, 'SHA512') AS txn_id\r\n  , trn_ref_no\r\n  , src_ref_no\r\n  , sub_ref_no\r\n  , affect_code\r\n  , trn_sk\r\n  , trn_time\r\n  , trn_date\r\n  , value_date\r\n  , currency\r\n  , dorc_ind\r\n  , acy_amount\r\n  , exchange_rate\r\n  , lcy_amount\r\n  , product_sk\r\n  , status\r\n  , channel\r\n  , channel_trn\r\n  , ac_branch_sk\r\n  , trn_branch_sk\r\n  , account_no_sk\r\n  , customer_sk\r\n  , gl_code_sk\r\n  , maker_sk\r\n  , checker_sk\r\n  , related_person\r\n  , related_account\r\n  , trf_sys\r\n  , trf_bank_sk\r\n  , remark\r\n  , seq_number\r\n  , posting_order\r\n  , before_balance\r\n  , current_balance\r\n  , user_id\r\n  , eqv_tramt\r\n  , etl_date\r\nFROM \r\n  df_2.demanddeposit_transaction001 a",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__demanddeposit_transaction001.sql",
            "original_file_path": "models\\staging\\stg_core__demanddeposit_transaction001.sql",
            "name": "stg_core__demanddeposit_transaction001",
            "alias": "stg_core__demanddeposit_transaction001",
            "checksum": {
                "name": "sha256",
                "checksum": "06a84b8c0ab528e2303aacff973a5256e1bc929da93472f7800efb5f0bf83e2d"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral",
                "post-hook": [
                    "{{ create_index( this, \"account_no_sk, channel_trn\") }}"
                ]
            },
            "created_at": 1672909827.822389
        },
        "model.dga_data_model.mart_dim_date": {
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "mart_dim_date"
            ],
            "unique_id": "model.dga_data_model.mart_dim_date",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT\r\n  date_id\r\n  , month_id\r\n  , julian_date\r\n  , date_value\r\n  , date_formatted_name\r\n  , date_name\r\n  , year_id\r\n  , year_start_date\r\n  , year_end_date\r\n  , quarter_num\r\n  , quarter_name\r\n  , quarter_start_date\r\n  , quarter_end_date\r\n  , year_quarter_name\r\n  , month_num\r\n  , month_short_name\r\n  , month_long_name\r\n  , month_start_date\r\n  , month_end_date\r\n  , year_month_name_1\r\n  , year_month_num_1\r\n  , year_month_name_2\r\n  , year_month_num_2\r\n  , week_of_year_num\r\n  , week_of_month_num\r\n  , week_start_date\r\n  , week_end_date\r\n  , year_week_num\r\n  , year_week_name\r\n  , weekday_num\r\n  , weekday_name\r\n  , is_holiday\r\nFROM \r\n  df_2.df_date_dim",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\mart_dim_date.sql",
            "original_file_path": "models\\mart\\mart_dim_date.sql",
            "name": "mart_dim_date",
            "alias": "mart_dim_date",
            "checksum": {
                "name": "sha256",
                "checksum": "6bb1b9895673c068469ccab82ad162348f78df79f1a2ca8eadbad419132a98c5"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672909903.557743
        },
        "model.dga_data_model.mart_trans_casa": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.dga_data_model.stg_core__demanddeposit_transaction001",
                    "model.dga_data_model.stg__df_casa_channel_trn_type",
                    "model.dga_data_model.stg_core__demanddeposit_master002",
                    "model.dga_data_model.int__casa_account",
                    "model.dga_data_model.stg_dwh__dwh_csdm_transaction_code",
                    "model.dga_data_model.stg_dwh__dwh_dddm_product",
                    "model.dga_data_model.stg_dwh__dwh_csdm_branch",
                    "model.dga_data_model.stg_dwh__dwh_csdm_branch",
                    "model.dga_data_model.stg_core__demanddeposit_master002",
                    "model.dga_data_model.int__casa_account",
                    "model.dga_data_model.mart_dim_date"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": "txn_id",
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "mart_trans_casa"
            ],
            "unique_id": "model.dga_data_model.mart_trans_casa",
            "raw_code": "{{\r\n    config(\r\n        materialized='table',\r\n        unique_key='txn_id'\r\n    )\r\n}}\r\nWITH dat_casa_trans AS (\r\n  SELECT\r\n      a.*\r\n    , b.tltxds AS channel_desc_it\r\n    , c.account_no\r\n    , d.customer_number\r\n  FROM\r\n    {{ ref('stg_core__demanddeposit_transaction001')}} a\r\n    LEFT JOIN {{ ref('stg__df_casa_channel_trn_type')}} b ON a.channel_trn = b.tltxcd\r\n    LEFT JOIN {{ ref('stg_core__demanddeposit_master002')}} c ON a.account_no_sk = c.account_no_sk\r\n    LEFT JOIN {{ ref('int__casa_account')}} d ON c.account_no = d.account_number\r\n  {% if is_incremental() %}\r\n  WHERE\r\n    a.trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n  {% endif %}\r\n)\r\n, dat_casa_trans_channel_lv2 AS (\r\n  SELECT\r\n      a.*\r\n    , CASE\r\n-- AUTO\r\n-- Autopay\r\n        WHEN user_id LIKE 'OD%' AND channel_trn = 'OIH_1321' THEN 'AUTO Autopay'\r\n        WHEN user_id LIKE 'AUTO%' THEN 'AUTO Autopay'\r\n        WHEN user_id LIKE 'CADPAYTL' THEN 'AUTO Autopay'\r\n-- Fee\r\n        WHEN user_id LIKE 'FEE%' OR user_id = 'MSBSWEE' THEN 'AUTO Fee'\r\n        WHEN upper(channel_desc_it) LIKE 'CHG' THEN 'AUTO Fee'\r\n        WHEN channel_trn IN ( '0800', '0801' ) THEN 'AUTO Fee'\r\n        WHEN user_id LIKE 'PLUT%' OR user_id = 'MSBPAY' THEN 'AUTO Fee'\r\n-- Interest\r\n        WHEN upper(channel_desc_it) LIKE '%ODINT%' THEN 'AUTO Interest'\r\n        WHEN user_id LIKE 'OD%' AND channel_trn = 'OIH_1022' THEN 'AUTO Interest'\r\n-- POS\r\n-- Online\r\n        WHEN channel_trn LIKE 'DGBMC%' OR channel_trn LIKE 'MC%' THEN 'POS Online'\r\n        WHEN channel_trn LIKE 'AIRP%' THEN 'POS Online'\r\n        WHEN upper(remark) LIKE '%THANH TOAN TRUC TUYEN%' THEN 'POS Online'\r\n-- Transaction\r\n        WHEN upper(remark) LIKE '%GIAO DICH POS%' THEN 'POS Transaction'\r\n-- ATM\r\n-- Transfer\r\n        WHEN channel_desc_it LIKE '%Smrt IBT Bank trf-CA%' OR channel_desc_it LIKE '%ATM-3rdPty Trf-CA/CA%' THEN'ATM Transfer'\r\n-- Withdraw\r\n        WHEN channel_desc_it LIKE '%Smrtlnk csh wdl-CA%'\r\n          OR channel_desc_it LIKE '%Debit Card Wdl-CA OS%'\r\n          OR channel_desc_it LIKE '%VisDebitCardWdl-CAOS%'\r\n          OR channel_desc_it LIKE '%ATM Cash WDL - CA%' \r\n          THEN 'ATM Withdraw'\r\n-- IBMB\r\n-- eWallet\r\n        WHEN user_id LIKE 'EGWTL%' THEN 'IBMB eWallet'\r\n-- QR\r\n        WHEN channel_trn LIKE 'DBQR%' OR channel_trn LIKE 'QR%' THEN 'IBMB QR'\r\n-- Bill pay\r\n        WHEN user_id LIKE 'EBANK%'\r\n          AND ( channel_trn LIKE 'EVN%'\r\n                OR channel_trn LIKE 'BWA%' ) \r\n          THEN 'IBMB Billpay'\r\n        WHEN user_id LIKE 'MB%' AND channel_trn LIKE 'IRISBL%' THEN 'IBMB Billpay'\r\n        WHEN ( user_id LIKE 'EBANK' OR user_id LIKE 'DGB%' )\r\n          AND ( channel_trn LIKE 'OP1321%' OR channel_trn LIKE 'PO1321%' OR channel_trn LIKE 'VP1321%' ) \r\n          THEN 'IBMB Billpay'\r\n        WHEN user_id LIKE 'EBANK%'\r\n          AND ( channel_trn LIKE 'EP1321%' OR channel_trn LIKE 'NP1321%' )\r\n          AND upper(remark) LIKE '%THANH TOAN CHO HD%' \r\n          THEN 'IBMB Billpay'\r\n        WHEN user_id LIKE 'EBANK%' AND channel_trn = 'NP1321B' THEN 'IBMB Billpay'\r\n        WHEN user_id LIKE 'IBPRU%' AND channel_trn LIKE 'IBPRU%' THEN 'IBMB Billpay'\r\n        WHEN user_id LIKE 'TAXONLINE%' AND channel_trn LIKE 'TO%' THEN 'IBMB Billpay'\r\n  -- Topup\r\n        WHEN user_id LIKE 'MB%' AND channel_trn LIKE 'IRISTP%' THEN 'IBMB Topup'\r\n        WHEN user_id LIKE 'DGB%' AND channel_trn LIKE 'EP%' AND upper(remark) LIKE '%TOPUP%' THEN 'IBMB Topup'\r\n        WHEN user_id LIKE 'DGB%' AND channel_trn LIKE 'EP%' AND ( upper(remark) LIKE '%BUY CARD%' AND upper(remark) LIKE '%PREPAID%' ) THEN 'IBMB Topup'\r\n  -- Product\r\n        WHEN user_id LIKE 'EBANK%' AND channel_trn = '3220' AND channel_desc_it LIKE 'FD%' THEN 'IBMB Product'\r\n        WHEN channel_trn = '3603' AND channel_desc_it = 'FD Add on By Trf' THEN 'IBMB Product'\r\n        WHEN user_id LIKE 'CK%' AND channel_trn LIKE 'CK%' THEN 'IBMB Product'\r\n        WHEN user_id LIKE 'GNV%' AND channel_trn LIKE '%1321GNV' THEN 'IBMB Product'\r\n        WHEN user_id LIKE 'EBANK%'\r\n          AND ( channel_trn = 'EB1321FCS' OR channel_trn LIKE 'EB3320%' OR channel_trn LIKE 'EB3603%' ) \r\n          THEN 'IBMB Product'\r\n  -- Transaction\r\n        WHEN user_id LIKE 'ECOMNAPAS%' THEN 'IBMB Transaction'\r\n        WHEN user_id LIKE 'IB%' AND user_id LIKE '%247' THEN 'IBMB Transaction'\r\n        WHEN user_id LIKE 'MSBDEB%' AND channel_trn LIKE 'DEBI' THEN 'IBMB Transaction'\r\n        WHEN ( user_id LIKE 'EBANK%'AND channel_trn LIKE 'EB%' )\r\n          OR ( user_id LIKE 'DGB%' AND channel_trn LIKE 'MB%' ) \r\n          THEN 'IBMB Transaction'\r\n        WHEN user_id LIKE 'ACQ%' AND channel_trn LIKE 'ACQ%' THEN 'IBMB Transaction'\r\n  -- COUNTER\r\n  -- Billpay\r\n        WHEN ( user_id LIKE 'DD%' OR user_id LIKE 'COUNTER%' OR user_id LIKE '%TELLER%' )\r\n          AND ( channel_trn LIKE 'BLING%' OR channel_trn LIKE 'BWA%' OR channel_trn LIKE 'EVN%' ) \r\n          THEN 'COUNTER Billpay'\r\n  -- Product\r\n        WHEN ( user_id LIKE 'DD%' OR user_id LIKE 'XD%' OR user_id LIKE 'XP%' OR user_id LIKE 'DP%' OR user_id LIKE 'LN%' )\r\n          AND ( channel_desc_it LIKE 'LN%' OR channel_desc_it LIKE 'FD%' ) \r\n          THEN 'COUNTER Product'\r\n        WHEN ( user_id LIKE 'IBDS%' AND channel_trn LIKE 'BOND%' )\r\n          OR ( user_id LIKE 'DSB%' AND channel_trn LIKE 'DSB%' ) \r\n          THEN 'COUNTER Product'\r\n  -- Transaction\r\n        ELSE 'COUNTER Transaction'\r\n      END AS channel_level2\r\n  FROM\r\n      dat_casa_trans a\r\n)\r\n, dat_casa_trans_channel_lv1 AS (\r\n  SELECT\r\n      a.*\r\n    , CASE\r\n        WHEN channel_level2 LIKE 'AUTO%' THEN 'AUTO'\r\n        WHEN channel_level2 LIKE 'ATM%' THEN 'ATM'\r\n        WHEN channel_level2 LIKE 'IBMB%' THEN 'IBMB'\r\n        WHEN channel_level2 LIKE 'POS%' THEN 'POS'\r\n        WHEN channel_level2 LIKE 'COUNTER%' THEN 'COUNTER'\r\n        ELSE 'OTHER'\r\n      END AS channel_level1\r\n  FROM\r\n      dat_casa_trans_channel_lv2 a\r\n)\r\n, dat_casa_code AS (\r\n  SELECT \r\n    a.*\r\n    , b_trg.trn_code\r\n    , c_trg.product_code\r\n    , d_trg.branch_code AS ac_branch_code\r\n    , e_trg.branch_code AS trn_branch_code\r\n--     , f_trg.account_no\r\n--     , g_trg.customer_number\r\n    , h.julian_date\r\n    , h.month_id\r\n    , h.date_id\r\n  FROM \r\n    dat_casa_trans_channel_lv1 a \r\n  LEFT JOIN {{ ref('stg_dwh__dwh_csdm_transaction_code')}} b_trg ON a.trn_sk = b_trg.tran_sk\r\n  LEFT JOIN {{ ref('stg_dwh__dwh_dddm_product') }} c_trg ON a.product_sk = c_trg.product_sk\r\n  LEFT JOIN {{ ref('stg_dwh__dwh_csdm_branch')}} d_trg ON a.ac_branch_sk = d_trg.branch_code_sk\r\n  LEFT JOIN {{ ref('stg_dwh__dwh_csdm_branch')}} e_trg ON a.trn_branch_sk = e_trg.branch_code_sk\r\n--   LEFT JOIN {{ ref('stg_core__demanddeposit_master002')}}   f_trg ON a.account_no_sk = f_trg.account_no_sk\r\n--   LEFT JOIN {{ ref('int__casa_account')}} g_trg ON f_trg.account_no = g_trg.account_number\r\n  LEFT JOIN {{ ref('mart_dim_date')}} h ON a.trn_date = h.julian_date\r\n)\r\n  SELECT * FROM dat_casa_code",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\mart_trans_casa.sql",
            "original_file_path": "models\\mart\\mart_trans_casa.sql",
            "name": "mart_trans_casa",
            "alias": "mart_trans_casa",
            "checksum": {
                "name": "sha256",
                "checksum": "b629ddcc6e141b128ba8545b2d3c879c01a4c9dbed72d2b415e04a35cfe86f80"
            },
            "tags": [],
            "refs": [
                [
                    "stg_core__demanddeposit_transaction001"
                ],
                [
                    "stg__df_casa_channel_trn_type"
                ],
                [
                    "stg_core__demanddeposit_master002"
                ],
                [
                    "int__casa_account"
                ],
                [
                    "stg_dwh__dwh_csdm_transaction_code"
                ],
                [
                    "stg_dwh__dwh_dddm_product"
                ],
                [
                    "stg_dwh__dwh_csdm_branch"
                ],
                [
                    "stg_dwh__dwh_csdm_branch"
                ],
                [
                    "stg_core__demanddeposit_master002"
                ],
                [
                    "int__casa_account"
                ],
                [
                    "mart_dim_date"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table",
                "unique_key": "txn_id"
            },
            "created_at": 1672911223.4914367
        },
        "model.dga_data_model.mart_fct_agg_casa_bal_daily": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.dga_data_model.stg_core__demanddeposit_master001",
                    "model.dga_data_model.stg_core__demanddeposit_master003",
                    "model.dga_data_model.stg_core__demanddeposit_master002"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "mart_fct_agg_casa_bal_daily"
            ],
            "unique_id": "model.dga_data_model.mart_fct_agg_casa_bal_daily",
            "raw_code": "WITH\r\nconvert_date AS (\r\n  SELECT\r\n      account_number\r\n    , customer_number\r\n    , CASE\r\n        WHEN date_opened >= 2020001 THEN date_opened\r\n        ELSE 2020001\r\n      END AS date_opened  -- only gen date from 2020\r\n  FROM\r\n    {{ ref('stg_core__demanddeposit_master001')}}\r\n  WHERE account_number = 4101011931706\r\n)\r\nlist_account AS (\r\n  SELECT\r\n      account_number\r\n    , customer_number\r\n    , date_opened\r\n    , to_number(to_char(to_date(date_opened, 'YYYYDDD') + level - 1, 'YYYYDDD')) AS etl_date\r\n  FROM\r\n    convert_date\r\n  CONNECT BY  level <= trunc(SYSDATE ) - to_date( date_opened, 'YYYYDDD')\r\n)\r\n, eop_bal AS (\r\n  SELECT\r\n      a.etl_date\r\n    , b.account_no\r\n    , SUM(GREATEST(a.lcy_ledger_bal, 0)) AS eop_bal\r\n  FROM\r\n    (SELECT * FROM {{ ref('stg_core__demanddeposit_master003')}} WHERE account_number = 4101011931706) a\r\n  LEFT JOIN {{ ref('stg_core__demanddeposit_master002')}} b ON a.account_no_sk = b.account_no_sk\r\n  {% if is_incremental() %}\r\n    AND a.etl_date > (SELECT MAX(etl_date) FROM {{ this }})\r\n  {% endif %}\r\n  GROUP BY\r\n      a.etl_date\r\n    , b.account_no\r\n)\r\n, all_account_eop AS (\r\n  SELECT\r\n      eb.etl_date\r\n    , la.account_number\r\n    , la.customer_number\r\n    , eb.eop_bal\r\n  FROM\r\n    list_account la\r\n  LEFT JOIN eop_bal eb ON la.account_number = eb.account_no AND eb.etl_date >= la.date_opened\r\n)\r\nSELECT * FROM all_account_eop",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\mart_fct_agg_casa_bal_daily.sql",
            "original_file_path": "models\\mart\\mart_fct_agg_casa_bal_daily.sql",
            "name": "mart_fct_agg_casa_bal_daily",
            "alias": "mart_fct_agg_casa_bal_daily",
            "checksum": {
                "name": "sha256",
                "checksum": "8b17e1c40c35fa7be59434636b8c18c42a5ab8e0f83fa6c005ea124d1bbe24ae"
            },
            "tags": [],
            "refs": [
                [
                    "stg_core__demanddeposit_master001"
                ],
                [
                    "stg_core__demanddeposit_master003"
                ],
                [
                    "stg_core__demanddeposit_master002"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dga_data_model\\models\\mart\\mart_fct_agg_casa_bal_daily.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672979901.6408224,
            "compiled_code": "WITH\n dbt__cte__stg_core__demanddeposit_master003__ as (\n\nSELECT\n  *\nFROM\n  df_2.demanddeposit_master003\n),  dbt__cte__stg_core__demanddeposit_master002__ as (\n\nSELECT \n  account_no_sk\n  , account_no\n  , currency\n  , class\n  , account_name\n  , open_date\n  , int_liq_freq_code\n  , int_liq_freq\n  , special_rate\n  , rate_flr\n  , rate_cel\n  , rate_var\n  , rate_var_code\n  , rate_review_dt\n  , rate_review_term\n  , rate_review_code\n  , od_auth_limit\n  , od_draw_limit\n  , od_limit_code\n  , overdraft_facility\n  , overdraft_type\n  , od_rate_code\n  , od_rate\n  , efft_rate\n  , od_rate_flr\n  , od_rate_cel\n  , od_rate_var\n  , od_var_code\n  , od_review_dt\n  , od_review_term\n  , od_review_code\n  , od_application_no\n  , stmt_facility\n  , aft_facility\n  , cheque_faclility\n  , min_bal\n  , max_bal\n  , charge_freq\n  , charge_type\n  , sc_waive_exp_dt\n  , min_charge\n  , rec_current_ind\n  , rec_effective_date\n  , pooling_rel\n  , account_type\n  , subbranch_no\n  , branch_code_sk\n  , ddsic1\n  , etl_date\nFROM \n  df_2.demanddeposit_master002\n),convert_date AS (\n  SELECT\n      account_number\n    , customer_number\n    , CASE\n        WHEN date_opened >= 2020001 THEN date_opened\n        ELSE 2020001\n      END AS date_opened  -- only gen date from 2020\n  FROM\n    df_2.stg_core__demanddeposit_master001\n  WHERE account_number = 4101011931706\n)\nlist_account AS (\n  SELECT\n      account_number\n    , customer_number\n    , date_opened\n    , to_number(to_char(to_date(date_opened, 'YYYYDDD') + level - 1, 'YYYYDDD')) AS etl_date\n  FROM\n    convert_date\n  CONNECT BY  level <= trunc(SYSDATE ) - to_date( date_opened, 'YYYYDDD')\n)\n, eop_bal AS (\n  SELECT\n      a.etl_date\n    , b.account_no\n    , SUM(GREATEST(a.lcy_ledger_bal, 0)) AS eop_bal\n  FROM\n    (SELECT * FROM dbt__cte__stg_core__demanddeposit_master003__ WHERE account_number = 4101011931706) a\n  LEFT JOIN dbt__cte__stg_core__demanddeposit_master002__ b ON a.account_no_sk = b.account_no_sk\n  \n  GROUP BY\n      a.etl_date\n    , b.account_no\n)\n, all_account_eop AS (\n  SELECT\n      eb.etl_date\n    , la.account_number\n    , la.customer_number\n    , eb.eop_bal\n  FROM\n    list_account la\n  LEFT JOIN eop_bal eb ON la.account_number = eb.account_no AND eb.etl_date >= la.date_opened\n)\nSELECT * FROM all_account_eop",
            "extra_ctes_injected": true,
            "extra_ctes": [
                {
                    "id": "model.dga_data_model.stg_core__demanddeposit_master003",
                    "sql": " dbt__cte__stg_core__demanddeposit_master003__ as (\n\nSELECT\n  *\nFROM\n  df_2.demanddeposit_master003\n)"
                },
                {
                    "id": "model.dga_data_model.stg_core__demanddeposit_master002",
                    "sql": " dbt__cte__stg_core__demanddeposit_master002__ as (\n\nSELECT \n  account_no_sk\n  , account_no\n  , currency\n  , class\n  , account_name\n  , open_date\n  , int_liq_freq_code\n  , int_liq_freq\n  , special_rate\n  , rate_flr\n  , rate_cel\n  , rate_var\n  , rate_var_code\n  , rate_review_dt\n  , rate_review_term\n  , rate_review_code\n  , od_auth_limit\n  , od_draw_limit\n  , od_limit_code\n  , overdraft_facility\n  , overdraft_type\n  , od_rate_code\n  , od_rate\n  , efft_rate\n  , od_rate_flr\n  , od_rate_cel\n  , od_rate_var\n  , od_var_code\n  , od_review_dt\n  , od_review_term\n  , od_review_code\n  , od_application_no\n  , stmt_facility\n  , aft_facility\n  , cheque_faclility\n  , min_bal\n  , max_bal\n  , charge_freq\n  , charge_type\n  , sc_waive_exp_dt\n  , min_charge\n  , rec_current_ind\n  , rec_effective_date\n  , pooling_rel\n  , account_type\n  , subbranch_no\n  , branch_code_sk\n  , ddsic1\n  , etl_date\nFROM \n  df_2.demanddeposit_master002\n)"
                }
            ],
            "relation_name": "df_2.mart_fct_agg_casa_bal_daily"
        },
        "model.dga_data_model.stg_core__demanddeposit_master003": {
            "compiled": true,
            "resource_type": "model",
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "ephemeral",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "staging",
                "stg_core__demanddeposit_master003"
            ],
            "unique_id": "model.dga_data_model.stg_core__demanddeposit_master003",
            "raw_code": "{{\r\n  config(\r\n    materialized='ephemeral'\r\n  )\r\n}}\r\nSELECT\r\n  *\r\nFROM\r\n  df_2.demanddeposit_master003",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "staging\\stg_core__demanddeposit_master003.sql",
            "original_file_path": "models\\staging\\stg_core__demanddeposit_master003.sql",
            "name": "stg_core__demanddeposit_master003",
            "alias": "stg_core__demanddeposit_master003",
            "checksum": {
                "name": "sha256",
                "checksum": "78f9f7723f15ca281ad426ce37ca09160688a668f64198a55891839a92e69cbc"
            },
            "tags": [],
            "refs": [],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": "target\\compiled\\dga_data_model\\models\\staging\\stg_core__demanddeposit_master003.sql",
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "ephemeral"
            },
            "created_at": 1672979901.6709254,
            "compiled_code": "\nSELECT\n  *\nFROM\n  df_2.demanddeposit_master003",
            "extra_ctes_injected": true,
            "extra_ctes": [],
            "relation_name": null
        },
        "model.dga_data_model.mart_fct_agg_casa_txn_daily": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.dga_data_model.mart_trans_casa"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "mart_fct_agg_casa_txn_daily"
            ],
            "unique_id": "model.dga_data_model.mart_fct_agg_casa_txn_daily",
            "raw_code": "{{\r\n    config(\r\n        materialized='table'\r\n    )\r\n}}\r\n-- lat can add partition\r\nWITH dat_result AS (\r\n  SELECT\r\n      to_char(to_date(trn_date, 'YYYYDDD'), 'YYYYMM') AS month_id\r\n    , to_char(to_date(trn_date, 'YYYYDDD'), 'YYYYMMDD') AS date_id\r\n    , customer_number\r\n    , account_no\r\n    , trn_date\r\n    , dorc_ind\r\n    , channel_level1\r\n    , channel_level2\r\n    , SUM(lcy_amount) AS sum_lcy_transaction_amount\r\n    , COUNT(*) AS count_transaction\r\n  FROM\r\n      {{ ref('mart_trans_casa')}}\r\n  {% if is_incremental() %}\r\n  WHERE\r\n    trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n  {% endif %}\r\n  GROUP BY\r\n      month_id\r\n    , date_id\r\n    , customer_number\r\n    , account_no\r\n    , trn_date\r\n    , dorc_ind\r\n    , channel_level1\r\n    , channel_level2\r\n)\r\n  SELECT\r\n    *\r\n  FROM\r\n    dat_result",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\mart_fct_agg_casa_txn_daily.sql",
            "original_file_path": "models\\mart\\mart_fct_agg_casa_txn_daily.sql",
            "name": "mart_fct_agg_casa_txn_daily",
            "alias": "mart_fct_agg_casa_txn_daily",
            "checksum": {
                "name": "sha256",
                "checksum": "b28b353e8fe9081161056b4a4148b523026576a249be9361013281b5a5b37331"
            },
            "tags": [],
            "refs": [
                [
                    "mart_trans_casa"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {
                "materialized": "table"
            },
            "created_at": 1672979901.6759083
        },
        "model.dga_data_model.mart_trans_casa_mpayroll": {
            "resource_type": "model",
            "depends_on": {
                "macros": [
                    "macro.dbt.is_incremental"
                ],
                "nodes": [
                    "model.dga_data_model.mart_trans_casa",
                    "model.dga_data_model.mart_trans_casa"
                ]
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "post-hook": [],
                "pre-hook": []
            },
            "database": "BULANDIN",
            "schema": "df_2",
            "fqn": [
                "dga_data_model",
                "mart",
                "mart_trans_casa_mpayroll"
            ],
            "unique_id": "model.dga_data_model.mart_trans_casa_mpayroll",
            "raw_code": "WITH dat_credit_txn AS (\r\n  SELECT\r\n    a.*\r\n  FROM\r\n      {{ ref('mart_trans_casa')}} a\r\n  WHERE\r\n    ( ( user_id LIKE 'TS%' AND REGEXP_LIKE ( remark, 'SALARY|LUONG', 'i' ) )\r\n      OR ( user_id = 'EBANKING09' AND REGEXP_LIKE ( remark, 'SALARY|LUONG', 'i' ) ) OR remark LIKE 'SALARY%' )\r\n    AND NOT REGEXP_LIKE ( remark\r\n    , 'MSB HOAN TRA|TRA SOAT|VISA|MASTERCARD|ATM|SAMSUNG PAY|JOY|HOAN TIEN|UNG TIEN|HTGD|BOI HOAN|BAO CO|HOAN PHI|TRA SOAT|HT TRICH NO THUA|HT-CHE-DO-BAO-HIEM|MSB-chuc-mung-quy-khach|HOAN TIEN|HOAN DU CO|MSB-CHUC-MUNG|MSB HOAN DU CO|MSB-chi-thuong|QR CODE|MSB HOAN SO TIEN|MSB-chuyen-qua-Khao-Sat|MSB HOAN GD'\r\n    , 'i' )\r\n    AND NOT REGEXP_LIKE ( remark\r\n    , 'TNR---Thanh-toan-ti\\?n-mua-l\\?i-g\\?c|TNR---Thanh-toan-tien-mua-lai-goc|TNR---Thanh-toan-ti\\?n-lai|TNR---Thanh-toan-tien-lai|TNR---Thanh-toan-ti\\?n-g\\?c-va-lai|TNR---Thanh-toan-tien-goc-va-lai|TNR---T\\?t-toan-g\\?c-va-tr\\?-lai|TNR---Tat-toan-goc-va-tra-lai'\r\n    , 'i' )\r\n    AND dorc_ind = 'C'\r\n    AND lcy_amount <> 0\r\n    {% if is_incremental() %}\r\n    AND trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n    {% endif %}\r\n)\r\n, dat_debit_txn AS (\r\n  SELECT\r\n    a.*\r\n  FROM\r\n      {{ ref('mart_trans_casa')}} a\r\n  WHERE\r\n    dorc_ind = 'D'\r\n    AND lcy_amount <> 0\r\n    {% if is_incremental() %}\r\n    AND trn_date > (SELECT MAX(trn_date) FROM {{ this }})\r\n    {% endif %}\r\n)\r\n, dat_pymt_txn_raw AS (\r\n  SELECT\r\n      to_char(to_date(a.trn_date, 'YYYYDDD'), 'YYYYMM') AS month_id\r\n    , to_char(to_date(a.trn_date, 'YYYYDDD'), 'YYYYMMDD') AS date_id\r\n    , a.txn_id\r\n    , a.trn_date\r\n    , a.trn_time\r\n    , a.currency\r\n    , a.acy_amount\r\n    , a.exchange_rate\r\n    , a.lcy_amount\r\n    , a.eqv_tramt\r\n    , a.remark\r\n    , a.channel_trn\r\n    , a.seq_number\r\n    , a.user_id\r\n    , a.trn_sk AS trg_trn_sk\r\n    , a.product_sk AS trg_product_sk\r\n    , a.ac_branch_sk AS trg_ac_branch_sk\r\n    , a.trn_branch_sk AS trg_trn_branch_sk\r\n    , a.account_no_sk AS trg_account_no_sk\r\n    , a.customer_sk AS trg_customer_sk\r\n    , b.trn_sk AS src_trn_sk\r\n    , b.product_sk AS src_product_sk\r\n    , b.ac_branch_sk AS src_ac_branch_sk\r\n    , b.trn_branch_sk AS src_trn_branch_sk\r\n    , b.account_no_sk AS src_account_no_sk\r\n    , b.customer_sk AS src_customer_sk\r\n    , b.trn_code AS trg_trn_code\r\n    , b.product_code AS trg_product_code\r\n    , b.ac_branch_code AS trg_ac_branch_code\r\n    , b.trn_branch_code AS trg_trn_branch_code\r\n    , b.account_no AS trg_account_no\r\n    , b.customer_number AS trg_customer_number\r\n    , a.trn_code AS src_trn_code\r\n    , a.product_code AS src_product_code\r\n    , a.ac_branch_code AS src_ac_branch_code\r\n    , a.trn_branch_code AS src_trn_branch_code\r\n    , a.account_no AS src_account_no\r\n    , a.customer_number AS src_customer_number\r\n  FROM\r\n    dat_credit_txn a\r\n  LEFT JOIN dat_debit_txn  b ON a.txn_id = b.txn_id\r\n)\r\nSELECT * FROM dat_pymt_txn_raw",
            "language": "sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "mart\\mart_trans_casa_mpayroll.sql",
            "original_file_path": "models\\mart\\mart_trans_casa_mpayroll.sql",
            "name": "mart_trans_casa_mpayroll",
            "alias": "mart_trans_casa_mpayroll",
            "checksum": {
                "name": "sha256",
                "checksum": "acd3912c8af5054e5f990655c04f3bd82b9ab773e016079db3eb659a4c28c82a"
            },
            "tags": [],
            "refs": [
                [
                    "mart_trans_casa"
                ],
                [
                    "mart_trans_casa"
                ]
            ],
            "sources": [],
            "metrics": [],
            "description": "",
            "columns": {},
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "compiled_path": null,
            "build_path": null,
            "deferred": false,
            "unrendered_config": {},
            "created_at": 1672979901.683882
        }
    },
    "sources": {
        "source.dga_data_model.dwh.ddft_master": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "ddft_master"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.ddft_master",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "ddft_master",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "ddft_master",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "etl_date": {
                    "name": "etl_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.ddft_master",
            "created_at": 1672822572.096764
        },
        "source.dga_data_model.dwh.ddft_transaction": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "ddft_transaction"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.ddft_transaction",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "ddft_transaction",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "ddft_transaction",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "trn_date": {
                    "name": "trn_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.ddft_transaction",
            "created_at": 1672822572.096764
        },
        "source.dga_data_model.dwh.fdft_master": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "fdft_master"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.fdft_master",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "fdft_master",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "fdft_master",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "etl_date": {
                    "name": "etl_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.fdft_master",
            "created_at": 1672822572.096764
        },
        "source.dga_data_model.dwh.fdft_transaction": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "fdft_transaction"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.fdft_transaction",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "fdft_transaction",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "fdft_transaction",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "trn_date": {
                    "name": "trn_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.fdft_transaction",
            "created_at": 1672822572.096764
        },
        "source.dga_data_model.dwh.lnft_master": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "lnft_master"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.lnft_master",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "lnft_master",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "lnft_master",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "etl_date": {
                    "name": "etl_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.lnft_master",
            "created_at": 1672822572.1123881
        },
        "source.dga_data_model.dwh.lnft_transaction": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "lnft_transaction"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.lnft_transaction",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "lnft_transaction",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "lnft_transaction",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "tran_date": {
                    "name": "tran_date",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.lnft_transaction",
            "created_at": 1672822572.1123881
        },
        "source.dga_data_model.dwh.ccl_pln": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "ccl_pln"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.ccl_pln",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "ccl_pln",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "ccl_pln",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.ccl_pln",
            "created_at": 1672822572.1123881
        },
        "source.dga_data_model.dwh.glft_his_transaction": {
            "fqn": [
                "dga_data_model",
                "base",
                "dwh",
                "glft_his_transaction"
            ],
            "database": "oracle_dwh",
            "schema": "dwh",
            "unique_id": "source.dga_data_model.dwh.glft_his_transaction",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "glft_his_transaction",
            "source_name": "dwh",
            "source_description": "",
            "loader": "",
            "identifier": "glft_his_transaction",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dwh.glft_his_transaction",
            "created_at": 1672822572.1123881
        },
        "source.dga_data_model.dga_ingest.lc_cc_mast": {
            "fqn": [
                "dga_data_model",
                "base",
                "dga_ingest",
                "lc_cc_mast"
            ],
            "database": "oracle_ldz",
            "schema": "dga_ingest",
            "unique_id": "source.dga_data_model.dga_ingest.lc_cc_mast",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "lc_cc_mast",
            "source_name": "dga_ingest",
            "source_description": "",
            "loader": "",
            "identifier": "lc_cc_mast",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": "pstd",
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": 2,
                    "period": "day"
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {
                "pstd": {
                    "name": "pstd",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "dga_ingest.lc_cc_mast",
            "created_at": 1672822572.1123881
        },
        "source.dga_data_model.base.dbt_test_materialized": {
            "fqn": [
                "dga_data_model",
                "base",
                "base",
                "dbt_test_materialized"
            ],
            "database": "oracle_dgaworkzone",
            "schema": "base",
            "unique_id": "source.dga_data_model.base.dbt_test_materialized",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "models\\base\\base.yml",
            "original_file_path": "models\\base\\base.yml",
            "name": "dbt_test_materialized",
            "source_name": "base",
            "source_description": "",
            "loader": "",
            "identifier": "dbt_test_materialized",
            "resource_type": "source",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {},
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "base.dbt_test_materialized",
            "created_at": 1672822572.1123881
        }
    },
    "macros": {
        "macro.dga_data_model.cast_as_julian_date": {
            "unique_id": "macro.dga_data_model.cast_as_julian_date",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\cast_as_julian_date.sql",
            "original_file_path": "macros\\cast_as_julian_date.sql",
            "name": "cast_as_julian_date",
            "macro_sql": "{% macro cast_as_julian_date( date_id) -%} \r\n  \r\n  (to_number(to_char(to_date({{ date_id}}, 'YYYYMMDD'), 'YYYYDDD')))\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.6922724,
            "supported_languages": null
        },
        "macro.dga_data_model.convert_date_to_julian": {
            "unique_id": "macro.dga_data_model.convert_date_to_julian",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\convert_date_to_julian.sql",
            "original_file_path": "macros\\convert_date_to_julian.sql",
            "name": "convert_date_to_julian",
            "macro_sql": "{%- macro convert_date_to_julian(date) -%}\r\n  CAST(CAST(year({{date}}) AS varchar)|| CAST(day_of_year({{date}}) AS varchar) AS int)\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.6922724,
            "supported_languages": null
        },
        "macro.dga_data_model.convert_julian_to_date": {
            "unique_id": "macro.dga_data_model.convert_julian_to_date",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\convert_julian_to_date.sql",
            "original_file_path": "macros\\convert_julian_to_date.sql",
            "name": "convert_julian_to_date",
            "macro_sql": "{%- macro convert_julian_to_date(julian_date) -%}\r\n\r\n  date_add('day', CAST(substr('{{julian_date}}', 5, 3) AS int)-1, cast(substr('{{julian_date}}', 1, 4) || '-01-01' AS date) )\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.6922724,
            "supported_languages": null
        },
        "macro.dga_data_model.create_index": {
            "unique_id": "macro.dga_data_model.create_index",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\create_index.sql",
            "original_file_path": "macros\\create_index.sql",
            "name": "create_index",
            "macro_sql": "{% macro create_index(this, columns) -%} \r\n\r\n{% set column_names = columns | replace(', ', '__') | replace(',', '__')  %}\r\n\r\n{% set index_name = this ~ \"__index_\"  ~ \"_on__\" ~ column_names  %}\r\n\r\n{% set check_index_query %}\r\n  SELECT \r\n    count(*)   \r\n  FROM \r\n    user_indexes \r\n  WHERE index_name = '{{ index_name }}'\r\n{% endset %}\r\n\r\n{% set results_table = run_query(check_index_query) %}\r\n\r\n{% if execute %}\r\n\r\n  {% set results = results_table.columns[0].values()[0] %}\r\n\r\n{% endif %}\r\n\r\n{{ print(results) }}\r\n\r\n{% set create_index_query %}\r\n  CREATE INDEX \"{{ index_name}}\" ON {{ this }} ({{ columns}})\r\n{% endset %}\r\n\r\n{% if results == 0 -%}\r\n  {% do run_query(create_index_query) %}\r\n{% else -%}\r\n  {{ print(\"Index Name already exits\") }}\r\n{% endif %}\r\n\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.6922724,
            "supported_languages": null
        },
        "macro.dga_data_model.dynamic_source": {
            "unique_id": "macro.dga_data_model.dynamic_source",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\dynamic_source.sql",
            "original_file_path": "macros\\dynamic_source.sql",
            "name": "dynamic_source",
            "macro_sql": "{%- macro dynamic_source(schema_name, table_name, month_name ) -%}\r\n\r\n  {%- set current_month -%}\r\n    select to_number(to_char(ADD_MONTHS(SYSDATE, -1), 'YYYYMM')) from dual\r\n  {%- endset -%}\r\n  {%- set month = run_query(current_month) -%}\r\n  {%- if execute -%}\r\n    {%- set results = month.columns[0].values()[0] -%}\r\n  {%- endif -%}\r\n  {%- if month_name is defined  -%}\r\n    {%- if month_name is defined  -%}\r\n      {%- set suffixes = month_name -%}\r\n    {%- endif -%}\r\n  {%- else -%}\r\n    {%- set suffixes = results -%}\r\n  {%- endif -%}\r\n\r\n  {{schema_name}}.{{table_name}}_{{suffixes}}\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.6922724,
            "supported_languages": null
        },
        "macro.dga_data_model.generate_surrogate_key": {
            "unique_id": "macro.dga_data_model.generate_surrogate_key",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\generate_surrogate_key.sql",
            "original_file_path": "macros\\generate_surrogate_key.sql",
            "name": "generate_surrogate_key",
            "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\r\n\r\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\r\n    {% set default_null_value = \"\" %}\r\n{% else %}\r\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\r\n{% endif %}\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list -%}\r\n\r\n    {%- do fields.append(\r\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\r\n    ) -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- do fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{{ dbt.hash(dbt.concat(fields)) }}\r\n\r\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.6922724,
            "supported_languages": null
        },
        "macro.dga_data_model.get_period_boundaries_j": {
            "unique_id": "macro.dga_data_model.get_period_boundaries_j",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\insert_by_julian_period.sql",
            "original_file_path": "macros\\insert_by_julian_period.sql",
            "name": "get_period_boundaries_j",
            "macro_sql": "{% macro get_period_boundaries_j(target_database, target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\r\n\r\n  {% call statement('period_boundaries', fetch_result=True) -%}\r\n    with data as (\r\n      select\r\n          coalesce(max(\"{{timestamp_field}}\"), cast('{{start_date}}' as int)) as start_timestamp,\r\n          coalesce(cast('{{ stop_date }}' as int), CAST(CAST(year(current_date) AS varchar)|| CAST(day_of_year(current_date) AS varchar) AS int))  as stop_timestamp\r\n      from \"{{target_database}}\".\"{{target_schema}}\".\"{{target_table}}\"\r\n    )\r\n    , ts AS (\r\n    SELECT\r\n      date_add('day', CAST(substr(CAST(start_timestamp AS VARCHAR), 5, 3) AS INT)-1,\r\n        CAST(substr(CAST(start_timestamp AS VARCHAR), 1, 4) || '-01-01' AS DATE) ) AS start_timestamp,\r\n      date_add('day', CAST(substr(CAST(stop_timestamp AS VARCHAR), 5, 3) AS INT)-1,\r\n        CAST(substr(CAST(stop_timestamp AS VARCHAR), 1, 4) || '-01-01' AS DATE) ) AS stop_timestamp\r\n    FROM DATA\r\n    )\r\n    select\r\n      start_timestamp,\r\n      stop_timestamp,\r\n      date_diff('{{period}}', start_timestamp, stop_timestamp) AS num_periods\r\n    from ts\r\n  {%- endcall %}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7080085,
            "supported_languages": null
        },
        "macro.dga_data_model.get_period_sql_j": {
            "unique_id": "macro.dga_data_model.get_period_sql_j",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\insert_by_julian_period.sql",
            "original_file_path": "macros\\insert_by_julian_period.sql",
            "name": "get_period_sql_j",
            "macro_sql": "{% macro get_period_sql_j(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n  {%- call statement('period_filter_julian_st', fetch_result=True) -%}\r\n    select CAST(CAST(year(date_add('{{period}}', {{offset}}+1, cast('{{start_timestamp}}' AS date) )) AS varchar)\r\n                  || CAST(format('%03d',day_of_year(date_add('{{period}}', {{offset}}+1, cast('{{start_timestamp}}' AS date) ))) AS varchar) AS int)\r\n  {%- endcall -%}\r\n  {%- set period_filter_julian = load_result('period_filter_julian_st')['data'][0][0] | string -%}\r\n  {{ log( \"Current date is \" ~ period_filter_julian)}}\r\n  {%- set period_filter -%}\r\n    ({{timestamp_field}}  = {{ period_filter_julian }})\r\n  {%- endset -%}\r\n\r\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n  select\r\n    {{target_cols_csv}}\r\n  from (\r\n    {{filtered_sql}}\r\n  )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7080085,
            "supported_languages": null
        },
        "macro.dga_data_model.materialization_insert_by_julian_period_default": {
            "unique_id": "macro.dga_data_model.materialization_insert_by_julian_period_default",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\insert_by_julian_period.sql",
            "original_file_path": "macros\\insert_by_julian_period.sql",
            "name": "materialization_insert_by_julian_period_default",
            "macro_sql": "{% materialization insert_by_julian_period, default -%}\r\n  {%- set timestamp_field = config.require('timestamp_field') -%}\r\n  {%- set start_date = config.require('start_date') -%}\r\n  {%- set stop_date = config.get('stop_date') or '' -%}\r\n  {%- set period = config.get('period') or 'week' -%}\r\n\r\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\r\n    {%- set error_message -%}\r\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\r\n    {%- endset -%}\r\n    {{ exceptions.raise_compiler_error(error_message) }}\r\n  {%- endif -%}\r\n\r\n  {%- set identifier = model['name'] -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\r\n\r\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\r\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\r\n\r\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\r\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\r\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\r\n\r\n  -- setup\r\n  {% if old_relation is none -%}\r\n    -- noop\r\n  {%- elif should_truncate -%}\r\n    {{adapter.truncate_relation(old_relation)}}\r\n  {%- elif should_drop -%}\r\n    {{adapter.drop_relation(old_relation)}}\r\n    {%- set old_relation = none -%}\r\n  {%- endif %}\r\n\r\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\r\n\r\n  -- `begin` happens here, so `commit` after it to finish the transaction\r\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\r\n\r\n\r\n\r\n  -- build model\r\n  {% if force_create or old_relation is none -%}\r\n    {# Create an empty target table -#}\r\n    {% call statement('main') -%}\r\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\r\n      {{create_table_as(False, target_relation, empty_sql)}}\r\n    {%- endcall %}\r\n  {%- endif %}\r\n\r\n  {% set _ = get_period_boundaries_j(database, schema,\r\n                                              identifier,\r\n                                              timestamp_field,\r\n                                              start_date,\r\n                                              stop_date,\r\n                                              period) %}\r\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\r\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\r\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\r\n\r\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n  -- commit each period as a separate transaction\r\n  {% for i in range(num_periods) -%}\r\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\r\n    {{ log(msg) }}\r\n    {{ print(msg)}}\r\n\r\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\r\n\r\n    {% set existing = adapter.get_relation(identifier=tmp_identifier,schema=\"int\",database=database) %}\r\n    {% if existing  %}\r\n      {% do adapter.drop_relation(existing) %}\r\n    {% endif %}\r\n\r\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                               schema=\"int\",database=database, type='table') -%}\r\n    {% call statement() -%}\r\n      {% set tmp_table_sql = get_period_sql_j(target_cols_csv,\r\n                                                       sql,\r\n                                                       timestamp_field,\r\n                                                       period,\r\n                                                       start_timestamp,\r\n                                                       stop_timestamp,\r\n                                                       i) %}\r\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\r\n    {%- endcall %}\r\n\r\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                         to_relation=target_relation)}}\r\n    {%- set name = 'main-' ~ i -%}\r\n    {% call statement(name, fetch_result=True) -%}\r\n      insert into  {{target_relation}} ({{target_cols_csv}})\r\n      (\r\n          select\r\n              {{target_cols_csv}}\r\n          from {{tmp_relation }}\r\n      );\r\n    {%- endcall %}\r\n    {{ adapter.drop_relation(tmp_relation) }}\r\n\r\n    {% set result = load_result('main-' ~ i) %}\r\n    {{ print(result) }}\r\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n        {% set rows_inserted = result['data'] %}\r\n    {% else %} {# older versions #}\r\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n    {% endif %}\r\n    {{ print(\"debug\" ~ rows_inserted)}}\r\n    {%- set msg = \"Ran success for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" -%}\r\n    {{ log(msg) }}\r\n    {{ print(msg)}}\r\n    {{ adapter.commit() }}\r\n\r\n  {%- endfor %}\r\n\r\n\r\n  -- Return the relations created in this materialization\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dga_data_model.get_period_boundaries_j",
                    "macro.dga_data_model.get_period_sql_j"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7080085,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dga_data_model.get_period_sql": {
            "unique_id": "macro.dga_data_model.get_period_sql",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\insert_by_period.sql",
            "original_file_path": "macros\\insert_by_period.sql",
            "name": "get_period_sql",
            "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\r\n\r\n  {%- set period_filter -%}\r\n    (cast({{timestamp_field}} as date)  = date_add('{{period}}', {{offset}}+1, cast('{{start_timestamp}}' AS date) ))\r\n\r\n  {%- endset -%}\r\n\r\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\r\n\r\n  select\r\n    {{target_cols_csv}}\r\n  from (\r\n    {{filtered_sql}}\r\n  )\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7236497,
            "supported_languages": null
        },
        "macro.dga_data_model.materialization_insert_by_period_default": {
            "unique_id": "macro.dga_data_model.materialization_insert_by_period_default",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "macros\\insert_by_period.sql",
            "original_file_path": "macros\\insert_by_period.sql",
            "name": "materialization_insert_by_period_default",
            "macro_sql": "{% materialization insert_by_period, default -%}\r\n  {%- set timestamp_field = config.require('timestamp_field') -%}\r\n  {%- set start_date = config.require('start_date') -%}\r\n  {%- set stop_date = config.get('stop_date') or '' -%}\r\n  {%- set period = config.get('period') or 'week' -%}\r\n\r\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\r\n    {%- set error_message -%}\r\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\r\n    {%- endset -%}\r\n    {{ exceptions.raise_compiler_error(error_message) }}\r\n  {%- endif -%}\r\n\r\n  {%- set identifier = model['name'] -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\r\n\r\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\r\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\r\n\r\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\r\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\r\n\r\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\r\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\r\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\r\n\r\n  -- setup\r\n  {% if old_relation is none -%}\r\n    -- noop\r\n  {%- elif should_truncate -%}\r\n    {{adapter.truncate_relation(old_relation)}}\r\n  {%- elif should_drop -%}\r\n    {{adapter.drop_relation(old_relation)}}\r\n    {%- set old_relation = none -%}\r\n  {%- endif %}\r\n\r\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\r\n\r\n  -- `begin` happens here, so `commit` after it to finish the transaction\r\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\r\n\r\n\r\n\r\n  -- build model\r\n  {% if force_create or old_relation is none -%}\r\n    {# Create an empty target table -#}\r\n    {% call statement('main') -%}\r\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\r\n      {{create_table_as(False, target_relation, empty_sql)}}\r\n    {%- endcall %}\r\n  {%- endif %}\r\n\r\n  {% set _ = get_period_boundaries(database, schema,\r\n                                              identifier,\r\n                                              timestamp_field,\r\n                                              start_date,\r\n                                              stop_date,\r\n                                              period) %}\r\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\r\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\r\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\r\n\r\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\r\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\r\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\r\n  -- commit each period as a separate transaction\r\n  {% for i in range(num_periods) -%}\r\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\r\n    {{ log(msg) }}\r\n    {{ print(msg)}}\r\n\r\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\r\n\r\n    {% set existing = adapter.get_relation(identifier=tmp_identifier,schema=schema,database=database) %}\r\n    {% if existing  %}\r\n      {% do adapter.drop_relation(existing) %}\r\n    {% endif %}\r\n\r\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                               schema=schema,database=database, type='table') -%}\r\n    {% call statement() -%}\r\n      {% set tmp_table_sql = get_period_sql(target_cols_csv,\r\n                                                       sql,                                                       timestamp_field,\r\n                                                       period,                                                       start_timestamp,\r\n                                                       stop_timestamp,\r\n                                                       i) %}\r\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\r\n    {%- endcall %}\r\n\r\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\r\n                                         to_relation=target_relation)}}\r\n    {%- set name = 'main-' ~ i -%}\r\n    {% call statement(name, fetch_result=True) -%}\r\n      insert into  {{target_relation}} ({{target_cols_csv}})\r\n      (\r\n          select\r\n              {{target_cols_csv}}\r\n          from {{tmp_relation }}\r\n      );\r\n    {%- endcall %}\r\n    {{ adapter.drop_relation(tmp_relation) }}\r\n\r\n    {% set result = load_result('main-' ~ i) %}\r\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\r\n        {% set rows_inserted = result['response']['rows_affected'] %}\r\n    {% else %} {# older versions #}\r\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\r\n    {% endif %}\r\n    {%- set msg = \"Ran success for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" -%}\r\n    {{ log(msg) }}\r\n    {{ print(msg)}}\r\n\r\n  {%- endfor %}\r\n\r\n\r\n  -- Return the relations created in this materialization\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dga_data_model.get_period_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7236497,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dga_data_model.test_is_recency": {
            "unique_id": "macro.dga_data_model.test_is_recency",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "tests\\generic\\is_recency.sql",
            "original_file_path": "tests\\generic\\is_recency.sql",
            "name": "test_is_recency",
            "macro_sql": "{% test is_recency(model, column_name , interval=1) %}\r\n\r\nWITH test_expression as (\r\n  SELECT\r\n    MAX({{ column_name }}) >=\r\n    (CAST(CAST(year(current_date) AS varchar)|| CAST(day_of_year(current_date) AS varchar) AS int) - {{ interval}}) AS expression\r\n  FROM {{ model }}\r\n)\r\n, validation_errors as (\r\n  SELECT\r\n      *\r\n  FROM\r\n      test_expression\r\n  WHERE\r\n    NOT(expression = true)\r\n)\r\nSELECT *\r\nFROM validation_errors\r\n\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7236497,
            "supported_languages": null
        },
        "macro.dga_data_model.test_unique_combination_of_columns": {
            "unique_id": "macro.dga_data_model.test_unique_combination_of_columns",
            "package_name": "dga_data_model",
            "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
            "path": "tests\\generic\\unique_combination_of_columns.sql",
            "original_file_path": "tests\\generic\\unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, condition_columns, quote_columns=false) %}\r\n\r\n\r\n{%- set column_list=combination_of_columns %}\r\n\r\n{%- set columns_csv=column_list | join(', ') %}\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {{ columns_csv }}\r\n    from {{ model }}\r\n    where {{ condition_columns }} >= (select max({{ condition_columns }}) from {{ model }})\r\n    group by {{ columns_csv }}\r\n    having count(*) > 1\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n\r\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7236497,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_columns_in_query": {
            "unique_id": "macro.dbt_oracle.oracle__get_columns_in_query",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__get_columns_in_query",
            "macro_sql": "{% macro oracle__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) dbt_sbq_tmp\n        where 1 = 0 and rownum < 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__create_schema": {
            "unique_id": "macro.dbt_oracle.oracle__create_schema",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__create_schema",
            "macro_sql": "{% macro oracle__create_schema(relation, schema_name) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    -- Noop for not breaking tests, oracle\n    -- schemas are actualy users, we can't\n    -- create it here\n    select 'a' from dual\n  {%- endcall -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__drop_schema": {
            "unique_id": "macro.dbt_oracle.oracle__drop_schema",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__drop_schema",
            "macro_sql": "{% macro oracle__drop_schema(schema) -%}\n  {% if schema.database -%}\n    {{ adapter.verify_database(schema.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    -- from https://gist.github.com/rafaeleyng/33eaef673fc4ee98a6de4f70c8ce3657\n    BEGIN\n    FOR cur_rec IN (SELECT object_name, object_type\n                      FROM ALL_objects\n                      WHERE object_type IN\n                              ('TABLE',\n                                'VIEW',\n                                'PACKAGE',\n                                'PROCEDURE',\n                                'FUNCTION',\n                                'SEQUENCE',\n                                'TYPE',\n                                'SYNONYM',\n                                'MATERIALIZED VIEW'\n                              )\n                      AND upper(owner) = '{{ schema | upper }}')\n    LOOP\n        BEGIN\n          IF cur_rec.object_type = 'TABLE'\n          THEN\n              EXECUTE IMMEDIATE    'DROP '\n                                || cur_rec.object_type\n                                || ' \"'\n                                || cur_rec.object_name\n                                || '\" CASCADE CONSTRAINTS';\n          ELSE\n              EXECUTE IMMEDIATE    'DROP '\n                                || cur_rec.object_type\n                                || ' \"'\n                                || cur_rec.object_name\n                                || '\"';\n          END IF;\n        EXCEPTION\n          WHEN OTHERS\n          THEN\n              DBMS_OUTPUT.put_line (   'FAILED: DROP '\n                                    || cur_rec.object_type\n                                    || ' \"'\n                                    || cur_rec.object_name\n                                    || '\"'\n                                  );\n        END;\n    END LOOP;\n  END;\n  {%- endcall -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__create_table_as_backup": {
            "unique_id": "macro.dbt_oracle.oracle__create_table_as_backup",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__create_table_as_backup",
            "macro_sql": "{% macro oracle__create_table_as_backup(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create {% if temporary -%}\n    global temporary\n  {%- endif %} table {{ relation.include(schema=(not temporary)) }}\n  {% if temporary -%} on commit preserve rows {%- endif %}\n  as\n    {{ sql }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__create_table_as": {
            "unique_id": "macro.dbt_oracle.oracle__create_table_as",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__create_table_as",
            "macro_sql": "{% macro oracle__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    global temporary\n  {%- endif %} table {{ relation.include(schema=(not temporary)) }}\n  {% if temporary -%} on commit preserve rows {%- endif %}\n  as\n    {{ sql }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__create_view_as": {
            "unique_id": "macro.dbt_oracle.oracle__create_view_as",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__create_view_as",
            "macro_sql": "{% macro oracle__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace view {{ relation }} as\n    {{ sql }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_columns_in_relation": {
            "unique_id": "macro.dbt_oracle.oracle__get_columns_in_relation",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__get_columns_in_relation",
            "macro_sql": "{% macro oracle__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with columns as (\n        select\n            SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\n            owner table_schema,\n            table_name,\n            column_name,\n            data_type,\n            data_type_mod,\n            decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\n            data_type_owner domain_schema,\n            data_length character_maximum_length,\n            data_length character_octet_length,\n            data_length,\n            data_precision numeric_precision,\n            data_scale numeric_scale,\n            nullable is_nullable,\n            column_id ordinal_position,\n            default_length,\n            data_default column_default,\n            num_distinct,\n            low_value,\n            high_value,\n            density,\n            num_nulls,\n            num_buckets,\n            last_analyzed,\n            sample_size,\n            SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\n            'SYS' character_set_schema,\n            SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\n            'SYS' collation_schema,\n            character_set_name,\n            char_col_decl_length,\n            global_stats,\n            user_stats,\n            avg_col_len,\n            char_length,\n            char_used,\n            v80_fmt_image,\n            data_upgraded,\n            histogram\n          from sys.all_tab_columns\n      )\n      select\n          column_name as \"name\",\n          data_type as \"type\",\n          char_length as \"character_maximum_length\",\n          numeric_precision as \"numeric_precision\",\n          numeric_scale as \"numeric_scale\"\n      from columns\n      where upper(table_name) = upper('{{ relation.identifier }}')\n        {% if relation.schema %}\n        and upper(table_schema) = upper('{{ relation.schema }}')\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle_escape_comment": {
            "unique_id": "macro.dbt_oracle.oracle_escape_comment",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle_escape_comment",
            "macro_sql": "{% macro oracle_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set start_quote = \"q'<\" -%}\n  {%- set end_quote = \">'\" -%}\n  {%- if end_quote in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ end_quote ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ start_quote }}{{ comment }}{{ end_quote }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__alter_relation_comment": {
            "unique_id": "macro.dbt_oracle.oracle__alter_relation_comment",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__alter_relation_comment",
            "macro_sql": "{% macro oracle__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = oracle_escape_comment(comment) %}\n  {# \"comment on table\" even for views #}\n  comment on table {{ relation }} is {{ escaped_comment }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.739235,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__persist_docs": {
            "unique_id": "macro.dbt_oracle.oracle__persist_docs",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__persist_docs",
            "macro_sql": "{% macro oracle__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% set column_dict = model.columns %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = oracle_escape_comment(comment) %}\n      {% call statement('alter _column comment', fetch_result=False) -%}\n        comment on column {{ relation }}.{{ column_name }} is {{ escaped_comment }}\n      {%- endcall %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt_oracle.oracle_escape_comment",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__alter_column_type": {
            "unique_id": "macro.dbt_oracle.oracle__alter_column_type",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__alter_column_type",
            "macro_sql": "{% macro oracle__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type 1', fetch_result=False) %}\n    alter table {{ relation }} add {{ tmp_column }} {{ new_column_type }}\n  {% endcall %}\n  {% call statement('alter_column_type 2', fetch_result=False) %}\n    update {{ relation  }} set {{ tmp_column }} = {{ column_name }}\n  {% endcall %}\n  {% call statement('alter_column_type 3', fetch_result=False) %}\n    alter table {{ relation }} drop column {{ column_name }} cascade constraints\n  {% endcall %}\n  {% call statement('alter_column_type 4', fetch_result=False) %}\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__drop_relation": {
            "unique_id": "macro.dbt_oracle.oracle__drop_relation",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__drop_relation",
            "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n   DECLARE\n     dne_942    EXCEPTION;\n     PRAGMA EXCEPTION_INIT(dne_942, -942);\n     attempted_ddl_on_in_use_GTT EXCEPTION;\n     pragma EXCEPTION_INIT(attempted_ddl_on_in_use_GTT, -14452);\n  BEGIN\n     SAVEPOINT start_transaction;\n     EXECUTE IMMEDIATE 'DROP {{ relation.type }} {{ relation }} cascade constraint';\n     COMMIT;\n  EXCEPTION\n     WHEN attempted_ddl_on_in_use_GTT THEN\n        NULL; -- if it its a global temporary table, leave it alone.\n     WHEN dne_942 THEN\n        NULL;\n  END;\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__truncate_relation": {
            "unique_id": "macro.dbt_oracle.oracle__truncate_relation",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__truncate_relation",
            "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n  {#-- To avoid `ORA-01702: a view is not appropriate here` we check that the relation to be truncated is a table #}\n  {% if relation.is_table %}\n    {% call statement('truncate_relation') -%}\n        truncate table {{ relation }}\n    {%- endcall %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__rename_relation": {
            "unique_id": "macro.dbt_oracle.oracle__rename_relation",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__rename_relation",
            "macro_sql": "{% macro oracle__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    ALTER {{ from_relation.type }} {{ from_relation }} rename to {{ to_relation.include(schema=False) }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__information_schema_name": {
            "unique_id": "macro.dbt_oracle.oracle__information_schema_name",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__information_schema_name",
            "macro_sql": "{% macro oracle__information_schema_name(database) -%}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  sys\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__list_schemas": {
            "unique_id": "macro.dbt_oracle.oracle__list_schemas",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__list_schemas",
            "macro_sql": "{% macro oracle__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n     \tselect username as \"name\"\n      from sys.all_users\n      order by username\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__check_schema_exists": {
            "unique_id": "macro.dbt_oracle.oracle__check_schema_exists",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__check_schema_exists",
            "macro_sql": "{% macro oracle__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from sys.all_users where username = upper('{{ schema }}')\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__list_relations_without_caching": {
            "unique_id": "macro.dbt_oracle.oracle__list_relations_without_caching",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__list_relations_without_caching",
            "macro_sql": "{% macro oracle__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    with tables as\n      (select SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\n         owner table_schema,\n         table_name,\n         case\n           when iot_type = 'Y'\n           then 'IOT'\n           when temporary = 'Y'\n           then 'TEMP'\n           else 'BASE TABLE'\n         end table_type\n       from sys.all_tables\n       union all\n       select SYS_CONTEXT('userenv', 'DB_NAME'),\n         owner,\n         view_name,\n         'VIEW'\n       from sys.all_views\n  )\n  select table_catalog as \"database_name\"\n    ,table_name as \"name\"\n    ,table_schema as \"schema_name\"\n    ,case table_type\n      when 'BASE TABLE' then 'table'\n      when 'VIEW' then 'view'\n    end as \"kind\"\n  from tables\n  where table_type in ('BASE TABLE', 'VIEW')\n    and upper(table_schema) = upper('{{ schema_relation.schema }}')\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__make_temp_relation": {
            "unique_id": "macro.dbt_oracle.oracle__make_temp_relation",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "oracle__make_temp_relation",
            "macro_sql": "{% macro oracle__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S\") %}\n    {% set tmp_identifier = 'o$pt_' ~ base_relation.identifier ~ dtstring %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier, \"schema\": None}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.get_database_name": {
            "unique_id": "macro.dbt_oracle.get_database_name",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\adapters.sql",
            "original_file_path": "macros\\adapters.sql",
            "name": "get_database_name",
            "macro_sql": "{% macro get_database_name() %}\n    {% set results = run_query(\"select SYS_CONTEXT('userenv', 'DB_NAME') FROM DUAL\") %}\n    {% set db_name = results.columns[0].values()[0] %}\n    {{ return(db_name) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_show_grant_sql": {
            "unique_id": "macro.dbt_oracle.oracle__get_show_grant_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\apply_grants.sql",
            "original_file_path": "macros\\apply_grants.sql",
            "name": "oracle__get_show_grant_sql",
            "macro_sql": "{% macro oracle__get_show_grant_sql(relation) %}\n    {# SQL that returns the current grants (grantee-privilege pairs) #}\n    SELECT grantee as \"grantee\", privilege as \"privilege_type\"\n    FROM SYS.ALL_TAB_PRIVS\n    WHERE UPPER(table_name) = UPPER('{{ relation.identifier }}')\n    {% if relation.schema %}\n        AND UPPER(table_schema) = UPPER('{{ relation.schema }}')\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__call_dcl_statements": {
            "unique_id": "macro.dbt_oracle.oracle__call_dcl_statements",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\apply_grants.sql",
            "original_file_path": "macros\\apply_grants.sql",
            "name": "oracle__call_dcl_statements",
            "macro_sql": "{% macro oracle__call_dcl_statements(dcl_statement_list) %}\n     {# Run each grant/revoke statement against the database. This is the culmination of apply_grants() #}\n     {% for dcl_statement in dcl_statement_list %}\n        {% do run_query(dcl_statement) %}\n     {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_catalog": {
            "unique_id": "macro.dbt_oracle.oracle__get_catalog",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\catalog.sql",
            "original_file_path": "macros\\catalog.sql",
            "name": "oracle__get_catalog",
            "macro_sql": "{% macro oracle__get_catalog(information_schema, schemas) -%}\r\n\r\n  {%- call statement('catalog', fetch_result=True) -%}\r\n    {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n    {% set database = information_schema.database %}\r\n    {% if database == 'None' or database is undefined or database is none %}\r\n      {% set database = get_database_name() %}\r\n    {% endif %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    with columns as (\r\n            select\r\n                SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\r\n                owner table_schema,\r\n                table_name,\r\n                column_name,\r\n                data_type,\r\n                data_type_mod,\r\n                decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\r\n                data_type_owner domain_schema,\r\n                data_length character_maximum_length,\r\n                data_length character_octet_length,\r\n                data_length,\r\n                data_precision numeric_precision,\r\n                data_scale numeric_scale,\r\n                nullable is_nullable,\r\n                column_id ordinal_position,\r\n                default_length,\r\n                data_default column_default,\r\n                num_distinct,\r\n                low_value,\r\n                high_value,\r\n                density,\r\n                num_nulls,\r\n                num_buckets,\r\n                last_analyzed,\r\n                sample_size,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\r\n                'SYS' character_set_schema,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\r\n                'SYS' collation_schema,\r\n                character_set_name,\r\n                char_col_decl_length,\r\n                global_stats,\r\n                user_stats,\r\n                avg_col_len,\r\n                char_length,\r\n                char_used,\r\n                v80_fmt_image,\r\n                data_upgraded,\r\n                histogram\r\n              from sys.all_tab_columns\r\n          ),\r\n          tables as\r\n                (select SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\r\n                   owner table_schema,\r\n                   table_name,\r\n                   case\r\n                     when iot_type = 'Y'\r\n                     then 'IOT'\r\n                     when temporary = 'Y'\r\n                     then 'TEMP'\r\n                     else 'BASE TABLE'\r\n                   end table_type\r\n                 from sys.all_tables\r\n                 union all\r\n                 select SYS_CONTEXT('userenv', 'DB_NAME'),\r\n                   owner,\r\n                   view_name,\r\n                   'VIEW'\r\n                 from sys.all_views\r\n          )\r\n          select\r\n              tables.table_catalog as \"table_database\",\r\n              tables.table_schema as \"table_schema\",\r\n              tables.table_name as \"table_name\",\r\n              tables.table_type as \"table_type\",\r\n              all_tab_comments.comments as \"table_comment\",\r\n              columns.column_name as \"column_name\",\r\n              ordinal_position as \"column_index\",\r\n              case\r\n                when data_type like '%CHAR%'\r\n                then data_type || '(' || cast(char_length as varchar(10)) || ')'\r\n                else data_type\r\n              end as \"column_type\",\r\n              all_col_comments.comments as \"column_comment\",\r\n              tables.table_schema as \"table_owner\"\r\n          from tables\r\n          inner join columns on upper(columns.table_catalog) = upper(tables.table_catalog)\r\n            and upper(columns.table_schema) = upper(tables.table_schema)\r\n            and upper(columns.table_name) = upper(tables.table_name)\r\n          left join all_tab_comments\r\n            on upper(all_tab_comments.owner) = upper(tables.table_schema)\r\n              and upper(all_tab_comments.table_name) = upper(tables.table_name)\r\n          left join all_col_comments\r\n            on upper(all_col_comments.owner) = upper(columns.table_schema)\r\n              and upper(all_col_comments.table_name) = upper(columns.table_name)\r\n              and upper(all_col_comments.column_name) = upper(columns.column_name)\r\n          where (\r\n              {%- for schema in schemas -%}\r\n                upper(tables.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n              {%- endfor -%}\r\n            )\r\n          order by\r\n              tables.table_schema,\r\n              tables.table_name,\r\n              ordinal_position\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('catalog').table) }}\r\n\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_oracle.get_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt_oracle.oracle__alter_relation_add_remove_columns",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\columns.sql",
            "original_file_path": "macros\\columns.sql",
            "name": "oracle__alter_relation_add_remove_columns",
            "macro_sql": "{% macro oracle__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n{# To avoid ORA-12987: cannot combine drop column with other operations, we execute 2 different SQL for add and drop respectively #}\n\n{% if add_columns|length > 0 %}\n  {% set add_sql %}\n          ALTER {{ relation.type }} {{ relation }}\n              ADD (\n              {% for column in add_columns %}\n                {{ adapter.check_and_quote_identifier(column.name, model.columns) }} {{ column.data_type }}{{ ',' if not loop.last }}\n              {% endfor %}\n              )\n  {% endset %}\n  {% do run_query(add_sql)%}\n{% endif %}\n\n{% if remove_columns|length > 0 %}\n    {% set remove_sql %}\n          ALTER {{ relation.type }} {{ relation }}\n              DROP (\n                {% for column in remove_columns %}\n                  {{ adapter.check_and_quote_identifier(column.name, model.columns) }}{{ ',' if not loop.last }}\n                {% endfor %}\n                ) CASCADE CONSTRAINTS\n   {% endset %}\n   {% do run_query(remove_sql)%}\n{% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7549002,
            "supported_languages": null
        },
        "macro.dbt_oracle.get_quoted_column_csv": {
            "unique_id": "macro.dbt_oracle.get_quoted_column_csv",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\columns.sql",
            "original_file_path": "macros\\columns.sql",
            "name": "get_quoted_column_csv",
            "macro_sql": "{% macro get_quoted_column_csv(model, column_names) %}\n    {%- set quoted = [] -%}\n    {% for col in column_names %}\n        {%- do quoted.append(adapter.check_and_quote_identifier(col, model.columns)) -%}\n     {% endfor %}\n    {%- set cols_csv = quoted | join(', ') -%}\n    {{ return(cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7705142,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__test_accepted_values": {
            "unique_id": "macro.dbt_oracle.oracle__test_accepted_values",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\schema_tests.sql",
            "original_file_path": "macros\\schema_tests.sql",
            "name": "oracle__test_accepted_values",
            "macro_sql": "{% macro oracle__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect * from(\n    select count(*) as not_accepted_values from validation_errors\n                 ) c where c.not_accepted_values != 0\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7705142,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__test_not_null": {
            "unique_id": "macro.dbt_oracle.oracle__test_not_null",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\schema_tests.sql",
            "original_file_path": "macros\\schema_tests.sql",
            "name": "oracle__test_not_null",
            "macro_sql": "{% macro oracle__test_not_null(model, column_name) %}\n\nselect * from (\nselect count(*) as null_count\nfrom {{ model }}\nwhere {{ column_name }} is null) c where c.null_count != 0\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7705142,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__test_relationships": {
            "unique_id": "macro.dbt_oracle.oracle__test_relationships",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\schema_tests.sql",
            "original_file_path": "macros\\schema_tests.sql",
            "name": "oracle__test_relationships",
            "macro_sql": "{% macro oracle__test_relationships(model, column_name, to, field) %}\n\nselect * from (\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) child\nleft join (\n    select {{ field }} as id from {{ to }}\n) parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null) c where c.validation_errors != 0\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7705142,
            "supported_languages": null
        },
        "macro.dbt_oracle.materialization_incremental_oracle": {
            "unique_id": "macro.dbt_oracle.materialization_incremental_oracle",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\incremental.sql",
            "original_file_path": "macros\\materializations\\incremental\\incremental.sql",
            "name": "materialization_incremental_oracle",
            "macro_sql": "{% materialization incremental, adapter='oracle' %}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set  grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n      {% if existing_relation.is_view %}\n            {% do adapter.drop_relation(existing_relation) %}\n      {% else %}\n            {% do adapter.rename_relation(existing_relation, backup_relation) %}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do to_drop.append(tmp_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n      {% if not dest_columns %}\n        {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n      {% endif %}\n\n      {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n      {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n      {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n      {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns }) %}\n      {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.truncate_relation(rel) %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set should_revoke = should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.persist_docs",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7705142,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_oracle.oracle_incremental_upsert_backup": {
            "unique_id": "macro.dbt_oracle.oracle_incremental_upsert_backup",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\incremental\\strategies.sql",
            "name": "oracle_incremental_upsert_backup",
            "macro_sql": "{% macro oracle_incremental_upsert_backup(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='name') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.786149,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle_check_and_quote_unique_key_for_incremental_merge": {
            "unique_id": "macro.dbt_oracle.oracle_check_and_quote_unique_key_for_incremental_merge",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\incremental\\strategies.sql",
            "name": "oracle_check_and_quote_unique_key_for_incremental_merge",
            "macro_sql": "{% macro oracle_check_and_quote_unique_key_for_incremental_merge(unique_key) %}\n    {%- set quote = \"\\\"\" -%}\n    {%- set unique_key_list = [] -%}\n    {%- set unique_key_merge_predicates = [] -%}\n    {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key | unique %}\n                {% if adapter.should_identifier_be_quoted(key, model.columns) == true %}\n                    {% do unique_key_list.append(quote ~ key ~ quote) %}\n                {% else %}\n                    {% do unique_key_list.append(key.upper()) %}\n                {% endif %}\n          {% endfor %}\n    {% else %}\n        {% if adapter.should_identifier_be_quoted(unique_key, model.columns) == true %}\n            {% do unique_key_list.append(quote ~ unique_key ~ quote) %}\n        {% else %}\n            {% do unique_key_list.append(unique_key.upper()) %}\n        {% endif %}\n    {% endif %}\n    {% for key in unique_key_list %}\n        {% set this_key_match %}\n                temp.{{ key }} = target.{{ key }}\n        {% endset %}\n        {% do unique_key_merge_predicates.append(this_key_match) %}\n    {% endfor %}\n    {%- set unique_key_result = {'unique_key_list': unique_key_list, 'unique_key_merge_predicates': unique_key_merge_predicates} -%}\n    {{ return(unique_key_result)}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_merge_update_columns": {
            "unique_id": "macro.dbt_oracle.oracle__get_merge_update_columns",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\incremental\\strategies.sql",
            "name": "oracle__get_merge_update_columns",
            "macro_sql": "{% macro oracle__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute='name') | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.name) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n   {%- set quoted_update_columns = [] -%}\n   {% for col in update_columns %}\n        {% do quoted_update_columns.append(adapter.check_and_quote_identifier(col, model.columns)) %}\n   {% endfor %}\n   {{ return(quoted_update_columns)}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_incremental_append_sql": {
            "unique_id": "macro.dbt_oracle.oracle__get_incremental_append_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\incremental\\strategies.sql",
            "name": "oracle__get_incremental_append_sql",
            "macro_sql": "{% macro oracle__get_incremental_append_sql(arg_dict) %}\n    {%- set dest_columns = args_dict[\"dest_columns\"] -%}\n    {%- set temp_relation = args_dict[\"temp_relation\"] -%}\n    {%- set target_relation = args_dict[\"target_relation\"] -%}\n    {%- set dest_column_names = dest_columns | map(attribute='name') | list -%}\n    {%- set dest_cols_csv = get_quoted_column_csv(model, dest_column_names)  -%}\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ temp_relation }}\n    )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.get_quoted_column_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_incremental_merge_sql": {
            "unique_id": "macro.dbt_oracle.oracle__get_incremental_merge_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\incremental\\strategies.sql",
            "name": "oracle__get_incremental_merge_sql",
            "macro_sql": "{% macro oracle__get_incremental_merge_sql(args_dict) %}\n    {%- set dest_columns = args_dict[\"dest_columns\"] -%}\n    {%- set temp_relation = args_dict[\"temp_relation\"] -%}\n    {%- set target_relation = args_dict[\"target_relation\"] -%}\n    {%- set unique_key = args_dict[\"unique_key\"] -%}\n    {%- set dest_column_names = dest_columns | map(attribute='name') | list -%}\n    {%- set dest_cols_csv = get_quoted_column_csv(model, dest_column_names)  -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- if unique_key -%}\n        {%- set unique_key_result = oracle_check_and_quote_unique_key_for_incremental_merge(unique_key) -%}\n        {%- set unique_key_list = unique_key_result['unique_key_list'] -%}\n        {%- set unique_key_merge_predicates = unique_key_result['unique_key_merge_predicates'] -%}\n        merge into {{ target_relation }} target\n          using {{ temp_relation }} temp\n          on ({{ unique_key_merge_predicates | join(' AND ') }})\n        when matched then\n          update set\n          {% for col in update_columns if (col.upper() not in unique_key_list and col not in unique_key_list) -%}\n            target.{{ col }} = temp.{{ col }}{% if not loop.last %}, {% endif %}\n          {% endfor -%}\n        when not matched then\n          insert({{ dest_cols_csv }})\n          values(\n            {% for col in dest_columns -%}\n              temp.{{ adapter.check_and_quote_identifier(col.name, model.columns) }}{% if not loop.last %}, {% endif %}\n            {% endfor -%}\n          )\n    {%- else -%}\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ temp_relation }}\n    )\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.get_quoted_column_csv",
                    "macro.dbt.get_merge_update_columns",
                    "macro.dbt_oracle.oracle_check_and_quote_unique_key_for_incremental_merge"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_incremental_default_sql": {
            "unique_id": "macro.dbt_oracle.oracle__get_incremental_default_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\incremental\\strategies.sql",
            "name": "oracle__get_incremental_default_sql",
            "macro_sql": "{% macro oracle__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_merge_sql(arg_dict)) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle_basic_load_csv_rows": {
            "unique_id": "macro.dbt_oracle.oracle_basic_load_csv_rows",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "oracle_basic_load_csv_rows",
            "macro_sql": "{% macro oracle_basic_load_csv_rows(model, batch_size, agate_table) %}\n\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert all\n            {% for row in chunk -%}\n              into {{ this.render() }} ({{ cols_sql }}) values(\n                {%- for column in agate_table.column_names -%}\n                    :p{{ loop.index }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor %})\n            {% endfor %}\n            select * from dual\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_seed_column_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__load_csv_rows": {
            "unique_id": "macro.dbt_oracle.oracle__load_csv_rows",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\seed\\seed.sql",
            "original_file_path": "macros\\materializations\\seed\\seed.sql",
            "name": "oracle__load_csv_rows",
            "macro_sql": "{% macro oracle__load_csv_rows(model, agate_table) %}\n  {{ return(oracle_basic_load_csv_rows(model, 100, agate_table) )}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle_basic_load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.7922668,
            "supported_languages": null
        },
        "macro.dbt_oracle.create_columns": {
            "unique_id": "macro.dbt_oracle.create_columns",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.default__create_columns": {
            "unique_id": "macro.dbt_oracle.default__create_columns",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.post_snapshot": {
            "unique_id": "macro.dbt_oracle.post_snapshot",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__post_snapshot": {
            "unique_id": "macro.dbt_oracle.oracle__post_snapshot",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "oracle__post_snapshot",
            "macro_sql": "{% macro oracle__post_snapshot(staging_relation) %}\n    {% do adapter.truncate_relation(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.snapshot_staging_table": {
            "unique_id": "macro.dbt_oracle.snapshot_staging_table",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select {{ target_relation }}.*,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.build_snapshot_table": {
            "unique_id": "macro.dbt_oracle.build_snapshot_table",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select sbq.*,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        cast(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as DATE) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.get_or_create_relation": {
            "unique_id": "macro.dbt_oracle.get_or_create_relation",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8079367,
            "supported_languages": null
        },
        "macro.dbt_oracle.build_snapshot_staging_table": {
            "unique_id": "macro.dbt_oracle.build_snapshot_staging_table",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt_oracle.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8235326,
            "supported_languages": null
        },
        "macro.dbt_oracle.materialization_snapshot_oracle": {
            "unique_id": "macro.dbt_oracle.materialization_snapshot_oracle",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "materialization_snapshot_oracle",
            "macro_sql": "{% materialization snapshot, adapter='oracle' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set grant_config = config.get('grants') -%}\n  {% set model_database = model.database %}\n  {% if model_database == 'None' or model_database is undefined or model_database is none %}\n    {% set model_database = get_database_name() %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model_database, model.schema) %}\n    {% do create_schema(model_database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model_database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(column.name) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.get_database_name",
                    "macro.dbt.create_schema",
                    "macro.dbt_oracle.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt_oracle.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt_oracle.build_snapshot_staging_table",
                    "macro.dbt_oracle.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_oracle.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8235326,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_oracle.oracle__snapshot_hash_arguments": {
            "unique_id": "macro.dbt_oracle.oracle__snapshot_hash_arguments",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql",
            "name": "oracle__snapshot_hash_arguments",
            "macro_sql": "{% macro oracle__snapshot_hash_arguments(args) -%}\n    ORA_HASH({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar(50) ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8235326,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__snapshot_merge_sql": {
            "unique_id": "macro.dbt_oracle.oracle__snapshot_merge_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql",
            "name": "oracle__snapshot_merge_sql",
            "macro_sql": "{% macro oracle__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = [] -%}\n\n    {% for column in insert_cols %}\n      {% do insert_cols_csv.append(\"s.\" + column) %}\n    {% endfor %}\n\n    {%- set dest_cols_csv = [] -%}\n\n    {% for column in insert_cols %}\n      {% do dest_cols_csv.append(\"d.\" + column) %}\n    {% endfor %}\n\n    merge into {{ target }} d\n    using {{ source }} s\n    on (s.dbt_scd_id = d.dbt_scd_id)\n\n    when matched\n        then update\n        set dbt_valid_to = s.dbt_valid_to\n        where d.dbt_valid_to is null\n          and s.dbt_change_type in ('update', 'delete')\n    when not matched\n        then insert ({{ dest_cols_csv | join(', ') }})\n        values ({{ insert_cols_csv | join(', ') }})\n        where s.dbt_change_type = 'insert'\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8235326,
            "supported_languages": null
        },
        "macro.dbt_oracle.snapshot_check_strategy": {
            "unique_id": "macro.dbt_oracle.snapshot_check_strategy",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} FROM dual\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.run_query",
                    "macro.dbt.snapshot_string_as_time",
                    "macro.dbt_oracle.snapshot_check_all_get_existing_columns",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8235326,
            "supported_languages": null
        },
        "macro.dbt_oracle.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt_oracle.snapshot_check_all_get_existing_columns",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\snapshot\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshot\\strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {% set node_database = node.database %}\n    {% if node_database == 'None' or model_database is undefined or model_database is none %}\n        {% set node_database = get_database_name() %}\n    {% endif %}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n\n    {%- set target_relation = adapter.get_relation(database=node_database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query",
                    "macro.dbt_oracle.get_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8391597,
            "supported_languages": null
        },
        "macro.dbt_oracle.materialization_table_oracle": {
            "unique_id": "macro.dbt_oracle.materialization_table_oracle",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\table\\table.sql",
            "original_file_path": "macros\\materializations\\table\\table.sql",
            "name": "materialization_table_oracle",
            "macro_sql": "{% materialization table, adapter='oracle' %}\n  {% set identifier = model['alias'] %}\n  {% set grant_config = config.get('grants') %}\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + '__dbt_backup' %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') %}\n  {% set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') %}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) %}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {% set backup_relation_type = 'table' if old_relation is none else old_relation.type %}\n  {% set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) %}\n  -- as above, the backup_relation should not already exist\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) %}\n\n\n    {% do log(\"Preexisting intermediate relation=\" ~ preexisting_intermediate_relation) %}\n    {% do log(\"Preexisting backup relation=\" ~ preexisting_backup_relation) %}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') %}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {% if old_relation.is_view %}\n            {% do adapter.drop_relation(old_relation) %}\n      {% else %}\n            {% do adapter.rename_relation(old_relation, backup_relation) %}\n      {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.create_indexes",
                    "macro.dbt.persist_docs",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8391597,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_oracle.get_test_sql": {
            "unique_id": "macro.dbt_oracle.get_test_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8391597,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__get_test_sql": {
            "unique_id": "macro.dbt_oracle.oracle__get_test_sql",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "oracle__get_test_sql",
            "macro_sql": "{% macro oracle__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }} then 1 else 0 end as should_warn,\n      case when {{ fail_calc }} {{ error_if }} then 1 else 0 end as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8391597,
            "supported_languages": null
        },
        "macro.dbt_oracle.materialization_view_oracle": {
            "unique_id": "macro.dbt_oracle.materialization_view_oracle",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\materializations\\view\\view.sql",
            "original_file_path": "macros\\materializations\\view\\view.sql",
            "name": "materialization_view_oracle",
            "macro_sql": "\n{%- materialization view, adapter='oracle' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- if old_relation was a table\n  {% if old_relation is not none and old_relation.type == 'table' %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_view_as",
                    "macro.dbt.persist_docs",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt_oracle.oracle__cast_bool_to_text": {
            "unique_id": "macro.dbt_oracle.oracle__cast_bool_to_text",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "name": "oracle__cast_bool_to_text",
            "macro_sql": "{% macro oracle__cast_bool_to_text(bool_expression) %}\n    CASE\n        WHEN {{ bool_expression }} THEN 'true'\n        ELSE 'false'\n    END\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__type_bigint": {
            "unique_id": "macro.dbt_oracle.oracle__type_bigint",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "oracle__type_bigint",
            "macro_sql": "\n{%- macro oracle__type_bigint() -%}\n    NUMBER(19)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__type_int": {
            "unique_id": "macro.dbt_oracle.oracle__type_int",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "oracle__type_int",
            "macro_sql": "\n{%- macro oracle__type_int() -%}\n    NUMBER(10, 0)\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__type_boolean": {
            "unique_id": "macro.dbt_oracle.oracle__type_boolean",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "oracle__type_boolean",
            "macro_sql": "{% macro oracle__type_boolean() -%}\n    NUMBER(1)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__dateadd": {
            "unique_id": "macro.dbt_oracle.oracle__dateadd",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "name": "oracle__dateadd",
            "macro_sql": "{% macro oracle__dateadd(datepart, interval, from_date_or_timestamp) %}\n    {%- set single_quote = \"\\'\" -%}\n    {%- set D2S_INTERVAL_UNITS = ['DAY', 'HOUR', 'MINUTE', 'SECOND'] -%}\n    {%- set M2Y_INTERVAL_UNITS = ['YEAR','MONTH'] -%}\n    {%- if datepart.upper() in D2S_INTERVAL_UNITS -%}\n        {{ from_date_or_timestamp }} + NUMTODSINTERVAL({{ interval }}, {{single_quote ~ datepart ~ single_quote}})\n    {%- elif datepart.upper() in M2Y_INTERVAL_UNITS -%}\n        {{ from_date_or_timestamp }} + NUMTOYMINTERVAL({{ interval }}, {{single_quote ~ datepart ~ single_quote}})\n    {%- elif datepart.upper() == 'QUARTER' -%}\n        ADD_MONTHS({{ from_date_or_timestamp }}, 3*{{ interval }})\n    {% elif datepart.upper() == 'WEEK' %}\n        {{ from_date_or_timestamp }} + 7*{{ interval }}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__datediff": {
            "unique_id": "macro.dbt_oracle.oracle__datediff",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "name": "oracle__datediff",
            "macro_sql": "{% macro oracle__datediff(first_date, second_date, datepart) %}\n    {% if datepart.upper() == 'YEAR' %}\n        ROUND(MONTHS_BETWEEN(TRUNC(CAST({{second_date}} AS DATE), 'YEAR'), TRUNC(CAST({{first_date}} AS DATE), 'YEAR'))/12)\n    {% elif datepart.upper() == 'QUARTER' %}\n        ROUND(MONTHS_BETWEEN(TRUNC(CAST({{second_date}} AS DATE), 'Q'), TRUNC(CAST({{first_date}} AS DATE), 'Q'))/3)\n    {% elif datepart.upper() == 'MONTH'%}\n        ROUND(MONTHS_BETWEEN(TRUNC(CAST({{second_date}} AS DATE), 'MONTH'), TRUNC(CAST({{first_date}} AS DATE), 'MONTH')))\n    {% elif datepart.upper() == 'WEEK' %}\n        ROUND((TRUNC(CAST({{ second_date }} AS DATE), 'DAY') - TRUNC(CAST({{ first_date }} AS DATE), 'DAY'))/7)\n    {% elif datepart.upper() == 'DAY' %}\n        ROUND(TRUNC(CAST({{ second_date }} AS DATE), 'DD') - TRUNC(CAST({{ first_date }} AS DATE), 'DD'))\n    {% elif datepart.upper() == 'HOUR' %}\n        ROUND((TRUNC(CAST({{ second_date }} AS DATE), 'HH') - TRUNC(CAST({{ first_date }} AS DATE), 'HH'))*24)\n    {% elif datepart.upper() == 'MINUTE' %}\n        ROUND((TRUNC(CAST({{ second_date }} AS DATE), 'MI') - TRUNC(CAST({{ first_date }} AS DATE), 'MI'))*24*60)\n    {% elif datepart.upper() == 'SECOND' %}\n        EXTRACT(DAY FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))*24*60*60\n        +EXTRACT(HOUR FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))*60*60\n        +EXTRACT(MINUTE FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))*60\n        +EXTRACT(SECOND FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__date_trunc": {
            "unique_id": "macro.dbt_oracle.oracle__date_trunc",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\datetrunc.sql",
            "original_file_path": "macros\\utils\\datetrunc.sql",
            "name": "oracle__date_trunc",
            "macro_sql": "{% macro oracle__date_trunc(datepart, date) %}\n    {% if datepart.upper() == 'QUARTER' %}\n        {% set datepart = 'Q' %}\n    {% endif %}\n    {% if datepart.upper() == 'WEEK' %}\n        {% set datepart = 'WW' %}\n    {% endif %}\n    {%- set single_quote = \"\\'\" -%}\n    TRUNC({{date}}, {{single_quote ~ datepart ~ single_quote}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__except": {
            "unique_id": "macro.dbt_oracle.oracle__except",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "name": "oracle__except",
            "macro_sql": "{% macro oracle__except() %}\n    MINUS\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__hash": {
            "unique_id": "macro.dbt_oracle.oracle__hash",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "name": "oracle__hash",
            "macro_sql": "{% macro oracle__hash(field, method='MD5') %}\n    {%- set single_quote = \"\\'\" -%}\n    STANDARD_HASH({{field}}, {{single_quote ~ method  ~ single_quote }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__last_day": {
            "unique_id": "macro.dbt_oracle.oracle__last_day",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "oracle__last_day",
            "macro_sql": "{% macro oracle__last_day(date, datepart) %}\n    {{dbt.dateadd('day', '-1', dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date)))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__position": {
            "unique_id": "macro.dbt_oracle.oracle__position",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "name": "oracle__position",
            "macro_sql": "{% macro oracle__position(substring_text, string_text) %}\n    INSTR({{ string_text }}, {{ substring_text }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__right": {
            "unique_id": "macro.dbt_oracle.oracle__right",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "name": "oracle__right",
            "macro_sql": "{% macro oracle__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8547862,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__current_timestamp": {
            "unique_id": "macro.dbt_oracle.oracle__current_timestamp",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\timestamps.sql",
            "original_file_path": "macros\\utils\\timestamps.sql",
            "name": "oracle__current_timestamp",
            "macro_sql": "{% macro oracle__current_timestamp() -%}\n  SYS_EXTRACT_UTC(current_timestamp)\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt_oracle.oracle__snapshot_string_as_time": {
            "unique_id": "macro.dbt_oracle.oracle__snapshot_string_as_time",
            "package_name": "dbt_oracle",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\oracle",
            "path": "macros\\utils\\timestamps.sql",
            "original_file_path": "macros\\utils\\timestamps.sql",
            "name": "oracle__snapshot_string_as_time",
            "macro_sql": "{% macro oracle__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"TO_TIMESTAMP('\"~ timestamp ~ \"','yyyy/mm/dd hh24:mi:ss.FF')\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "unique_id": "macro.dbt.copy_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "unique_id": "macro.dbt.default__copy_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "unique_id": "macro.dbt.should_revoke",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "unique_id": "macro.dbt.get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "unique_id": "macro.dbt.get_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "unique_id": "macro.dbt.default__get_grant_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "unique_id": "macro.dbt.get_revoke_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "unique_id": "macro.dbt.call_dcl_statements",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "unique_id": "macro.dbt.apply_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "unique_id": "macro.dbt.default__apply_grants",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\apply_grants.sql",
            "original_file_path": "macros\\adapters\\apply_grants.sql",
            "name": "default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "unique_id": "macro.dbt.get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "unique_id": "macro.dbt.get_columns_in_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "unique_id": "macro.dbt.alter_column_type",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8704402,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "unique_id": "macro.dbt.default__alter_column_type",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\columns.sql",
            "original_file_path": "macros\\adapters\\columns.sql",
            "name": "default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "unique_id": "macro.dbt.collect_freshness",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "unique_id": "macro.dbt.default__collect_freshness",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\freshness.sql",
            "original_file_path": "macros\\adapters\\freshness.sql",
            "name": "default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "unique_id": "macro.dbt.get_create_index_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "unique_id": "macro.dbt.create_indexes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "unique_id": "macro.dbt.default__create_indexes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\indexes.sql",
            "original_file_path": "macros\\adapters\\indexes.sql",
            "name": "default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8861165,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "unique_id": "macro.dbt.get_catalog",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "unique_id": "macro.dbt.default__get_catalog",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "unique_id": "macro.dbt.information_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "unique_id": "macro.dbt.default__information_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "unique_id": "macro.dbt.list_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "unique_id": "macro.dbt.default__list_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "unique_id": "macro.dbt.check_schema_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "unique_id": "macro.dbt.default__check_schema_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "unique_id": "macro.dbt.list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\metadata.sql",
            "original_file_path": "macros\\adapters\\metadata.sql",
            "name": "default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.alter_column_comment": {
            "unique_id": "macro.dbt.alter_column_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "unique_id": "macro.dbt.default__alter_column_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "unique_id": "macro.dbt.alter_relation_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "unique_id": "macro.dbt.persist_docs",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "unique_id": "macro.dbt.default__persist_docs",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\persist_docs.sql",
            "original_file_path": "macros\\adapters\\persist_docs.sql",
            "name": "default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "unique_id": "macro.dbt.make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "unique_id": "macro.dbt.make_temp_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "unique_id": "macro.dbt.default__make_temp_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "unique_id": "macro.dbt.make_backup_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "unique_id": "macro.dbt.default__make_backup_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "unique_id": "macro.dbt.drop_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "unique_id": "macro.dbt.default__drop_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "unique_id": "macro.dbt.truncate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "unique_id": "macro.dbt.default__truncate_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.8926418,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "unique_id": "macro.dbt.rename_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "unique_id": "macro.dbt.default__rename_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "unique_id": "macro.dbt.get_or_create_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "unique_id": "macro.dbt.load_cached_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "unique_id": "macro.dbt.load_relation",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\relation.sql",
            "original_file_path": "macros\\adapters\\relation.sql",
            "name": "drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "unique_id": "macro.dbt.create_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "unique_id": "macro.dbt.default__create_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "unique_id": "macro.dbt.drop_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "unique_id": "macro.dbt.default__drop_schema",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\schema.sql",
            "original_file_path": "macros\\adapters\\schema.sql",
            "name": "default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "unique_id": "macro.dbt.current_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "unique_id": "macro.dbt.default__current_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "unique_id": "macro.dbt.snapshot_get_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\adapters\\timestamps.sql",
            "original_file_path": "macros\\adapters\\timestamps.sql",
            "name": "default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt.default__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "unique_id": "macro.dbt.convert_datetime",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "unique_id": "macro.dbt.dates_in_range",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "unique_id": "macro.dbt.partition_range",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "unique_id": "macro.dbt.py_current_timestring",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\datetime.sql",
            "original_file_path": "macros\\etc\\datetime.sql",
            "name": "py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9083502,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "unique_id": "macro.dbt.statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "unique_id": "macro.dbt.noop_statement",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "unique_id": "macro.dbt.run_query",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\etc\\statement.sql",
            "original_file_path": "macros\\etc\\statement.sql",
            "name": "run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "unique_id": "macro.dbt.default__test_accepted_values",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\accepted_values.sql",
            "original_file_path": "macros\\generic_test_sql\\accepted_values.sql",
            "name": "default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "unique_id": "macro.dbt.default__test_not_null",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\not_null.sql",
            "original_file_path": "macros\\generic_test_sql\\not_null.sql",
            "name": "default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "unique_id": "macro.dbt.default__test_relationships",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\relationships.sql",
            "original_file_path": "macros\\generic_test_sql\\relationships.sql",
            "name": "default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "unique_id": "macro.dbt.default__test_unique",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\generic_test_sql\\unique.sql",
            "original_file_path": "macros\\generic_test_sql\\unique.sql",
            "name": "default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "unique_id": "macro.dbt.generate_alias_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "name": "generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "unique_id": "macro.dbt.default__generate_alias_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_alias.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql",
            "name": "default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "unique_id": "macro.dbt.generate_database_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "name": "generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "unique_id": "macro.dbt.default__generate_database_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_database.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_database.sql",
            "name": "default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "unique_id": "macro.dbt.generate_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "unique_id": "macro.dbt.default__generate_schema_name",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\get_custom_name\\get_custom_schema.sql",
            "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql",
            "name": "generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.923978,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "unique_id": "macro.dbt.set_sql_header",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "unique_id": "macro.dbt.should_full_refresh",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "unique_id": "macro.dbt.should_store_failures",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\configs.sql",
            "original_file_path": "macros\\materializations\\configs.sql",
            "name": "should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "unique_id": "macro.dbt.run_hooks",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "unique_id": "macro.dbt.make_hook_config",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "unique_id": "macro.dbt.before_begin",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "unique_id": "macro.dbt.in_transaction",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "unique_id": "macro.dbt.after_commit",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\hooks.sql",
            "original_file_path": "macros\\materializations\\hooks.sql",
            "name": "after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "unique_id": "macro.dbt.get_quoted_csv",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "unique_id": "macro.dbt.diff_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "unique_id": "macro.dbt.diff_column_data_types",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "unique_id": "macro.dbt.get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql",
            "name": "default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.939605,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "unique_id": "macro.dbt.materialization_incremental_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql",
            "name": "materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.is_incremental": {
            "unique_id": "macro.dbt.is_incremental",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql",
            "name": "is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "unique_id": "macro.dbt.get_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "unique_id": "macro.dbt.default__get_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9552348,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\merge.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql",
            "name": "default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "unique_id": "macro.dbt.check_for_schema_changes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "unique_id": "macro.dbt.sync_column_schemas",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "unique_id": "macro.dbt.process_schema_changes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql",
            "name": "process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_append_sql": {
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.970887,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "unique_id": "macro.dbt.get_insert_into_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql",
            "name": "get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "unique_id": "macro.dbt.create_table_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "unique_id": "macro.dbt.default__create_table_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql",
            "name": "default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9864836,
            "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
            "unique_id": "macro.dbt.materialization_table_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\table\\table.sql",
            "original_file_path": "macros\\materializations\\models\\table\\table.sql",
            "name": "materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_or_replace_view": {
            "unique_id": "macro.dbt.create_or_replace_view",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql",
            "name": "create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "unique_id": "macro.dbt.create_view_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "unique_id": "macro.dbt.default__create_view_as",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql",
            "name": "default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "unique_id": "macro.dbt.handle_existing_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\helpers.sql",
            "original_file_path": "macros\\materializations\\models\\view\\helpers.sql",
            "name": "handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "unique_id": "macro.dbt.default__handle_existing_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\helpers.sql",
            "original_file_path": "macros\\materializations\\models\\view\\helpers.sql",
            "name": "default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "unique_id": "macro.dbt.materialization_view_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\models\\view\\view.sql",
            "original_file_path": "macros\\materializations\\models\\view\\view.sql",
            "name": "materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822570.9930313,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "unique_id": "macro.dbt.create_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "unique_id": "macro.dbt.default__create_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "unique_id": "macro.dbt.reset_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "unique_id": "macro.dbt.default__reset_csv_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "unique_id": "macro.dbt.get_csv_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "unique_id": "macro.dbt.default__get_csv_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "unique_id": "macro.dbt.get_binding_char",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "unique_id": "macro.dbt.default__get_binding_char",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "unique_id": "macro.dbt.get_batch_size",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "unique_id": "macro.dbt.default__get_batch_size",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "unique_id": "macro.dbt.load_csv_rows",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "unique_id": "macro.dbt.default__load_csv_rows",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\helpers.sql",
            "original_file_path": "macros\\materializations\\seeds\\helpers.sql",
            "name": "default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0086958,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "unique_id": "macro.dbt.materialization_seed_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\seeds\\seed.sql",
            "original_file_path": "macros\\materializations\\seeds\\seed.sql",
            "name": "materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0256283,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_columns": {
            "unique_id": "macro.dbt.create_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "unique_id": "macro.dbt.default__create_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "unique_id": "macro.dbt.post_snapshot",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "unique_id": "macro.dbt.default__post_snapshot",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "unique_id": "macro.dbt.get_true_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "unique_id": "macro.dbt.default__get_true_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "unique_id": "macro.dbt.snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "unique_id": "macro.dbt.build_snapshot_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\helpers.sql",
            "original_file_path": "macros\\materializations\\snapshots\\helpers.sql",
            "name": "build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql",
            "name": "materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.028769,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.snapshot_merge_sql": {
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql",
            "name": "default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "unique_id": "macro.dbt.strategy_dispatch",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\snapshots\\strategies.sql",
            "original_file_path": "macros\\materializations\\snapshots\\strategies.sql",
            "name": "snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.get_test_sql": {
            "unique_id": "macro.dbt.get_test_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "unique_id": "macro.dbt.default__get_test_sql",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\helpers.sql",
            "original_file_path": "macros\\materializations\\tests\\helpers.sql",
            "name": "default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.044448,
            "supported_languages": null
        },
        "macro.dbt.materialization_test_default": {
            "unique_id": "macro.dbt.materialization_test_default",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\test.sql",
            "original_file_path": "macros\\materializations\\tests\\test.sql",
            "name": "materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_where_subquery": {
            "unique_id": "macro.dbt.get_where_subquery",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "name": "get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "unique_id": "macro.dbt.default__get_where_subquery",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\materializations\\tests\\where_subquery.sql",
            "original_file_path": "macros\\materializations\\tests\\where_subquery.sql",
            "name": "default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "unique_id": "macro.dbt.build_ref_function",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "unique_id": "macro.dbt.build_source_function",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "unique_id": "macro.dbt.build_config_dict",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "unique_id": "macro.dbt.py_script_postfix",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "unique_id": "macro.dbt.py_script_comment",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\python_model\\python.sql",
            "original_file_path": "macros\\python_model\\python.sql",
            "name": "py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "unique_id": "macro.dbt.any_value",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "name": "any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "unique_id": "macro.dbt.default__any_value",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\any_value.sql",
            "original_file_path": "macros\\utils\\any_value.sql",
            "name": "default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "unique_id": "macro.dbt.array_append",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_append.sql",
            "original_file_path": "macros\\utils\\array_append.sql",
            "name": "array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "unique_id": "macro.dbt.default__array_append",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_append.sql",
            "original_file_path": "macros\\utils\\array_append.sql",
            "name": "default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "unique_id": "macro.dbt.array_concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_concat.sql",
            "original_file_path": "macros\\utils\\array_concat.sql",
            "name": "array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "unique_id": "macro.dbt.default__array_concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_concat.sql",
            "original_file_path": "macros\\utils\\array_concat.sql",
            "name": "default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "unique_id": "macro.dbt.array_construct",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "name": "array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0601733,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "unique_id": "macro.dbt.default__array_construct",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\array_construct.sql",
            "original_file_path": "macros\\utils\\array_construct.sql",
            "name": "default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "unique_id": "macro.dbt.bool_or",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\bool_or.sql",
            "original_file_path": "macros\\utils\\bool_or.sql",
            "name": "bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "unique_id": "macro.dbt.default__bool_or",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\bool_or.sql",
            "original_file_path": "macros\\utils\\bool_or.sql",
            "name": "default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "unique_id": "macro.dbt.cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "name": "cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\cast_bool_to_text.sql",
            "original_file_path": "macros\\utils\\cast_bool_to_text.sql",
            "name": "default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "unique_id": "macro.dbt.concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "name": "concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "unique_id": "macro.dbt.default__concat",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\concat.sql",
            "original_file_path": "macros\\utils\\concat.sql",
            "name": "default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "unique_id": "macro.dbt.type_string",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "unique_id": "macro.dbt.default__type_string",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "unique_id": "macro.dbt.type_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "unique_id": "macro.dbt.default__type_timestamp",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "unique_id": "macro.dbt.type_float",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "unique_id": "macro.dbt.default__type_float",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "unique_id": "macro.dbt.type_numeric",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "unique_id": "macro.dbt.default__type_numeric",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "unique_id": "macro.dbt.type_bigint",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "unique_id": "macro.dbt.default__type_bigint",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "unique_id": "macro.dbt.type_int",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "unique_id": "macro.dbt.default__type_int",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "unique_id": "macro.dbt.type_boolean",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "unique_id": "macro.dbt.default__type_boolean",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\data_types.sql",
            "original_file_path": "macros\\utils\\data_types.sql",
            "name": "default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "unique_id": "macro.dbt.dateadd",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "name": "dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "unique_id": "macro.dbt.default__dateadd",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\dateadd.sql",
            "original_file_path": "macros\\utils\\dateadd.sql",
            "name": "default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "unique_id": "macro.dbt.datediff",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "name": "datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "unique_id": "macro.dbt.default__datediff",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\datediff.sql",
            "original_file_path": "macros\\utils\\datediff.sql",
            "name": "default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "unique_id": "macro.dbt.date_trunc",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "name": "date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "unique_id": "macro.dbt.default__date_trunc",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\date_trunc.sql",
            "original_file_path": "macros\\utils\\date_trunc.sql",
            "name": "default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "unique_id": "macro.dbt.escape_single_quotes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\utils\\escape_single_quotes.sql",
            "name": "escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\escape_single_quotes.sql",
            "original_file_path": "macros\\utils\\escape_single_quotes.sql",
            "name": "default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0757267,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "unique_id": "macro.dbt.except",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "name": "except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0913584,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "unique_id": "macro.dbt.default__except",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\except.sql",
            "original_file_path": "macros\\utils\\except.sql",
            "name": "default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0913584,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "unique_id": "macro.dbt.hash",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "name": "hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "unique_id": "macro.dbt.default__hash",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\hash.sql",
            "original_file_path": "macros\\utils\\hash.sql",
            "name": "default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "unique_id": "macro.dbt.intersect",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\intersect.sql",
            "original_file_path": "macros\\utils\\intersect.sql",
            "name": "intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "unique_id": "macro.dbt.default__intersect",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\intersect.sql",
            "original_file_path": "macros\\utils\\intersect.sql",
            "name": "default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "unique_id": "macro.dbt.last_day",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "unique_id": "macro.dbt.default_last_day",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "unique_id": "macro.dbt.default__last_day",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\last_day.sql",
            "original_file_path": "macros\\utils\\last_day.sql",
            "name": "default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "unique_id": "macro.dbt.length",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "name": "length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "unique_id": "macro.dbt.default__length",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\length.sql",
            "original_file_path": "macros\\utils\\length.sql",
            "name": "default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "unique_id": "macro.dbt.listagg",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "name": "listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "unique_id": "macro.dbt.default__listagg",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\listagg.sql",
            "original_file_path": "macros\\utils\\listagg.sql",
            "name": "default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "unique_id": "macro.dbt.string_literal",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\literal.sql",
            "original_file_path": "macros\\utils\\literal.sql",
            "name": "string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "unique_id": "macro.dbt.default__string_literal",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\literal.sql",
            "original_file_path": "macros\\utils\\literal.sql",
            "name": "default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "unique_id": "macro.dbt.position",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "name": "position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "unique_id": "macro.dbt.default__position",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\position.sql",
            "original_file_path": "macros\\utils\\position.sql",
            "name": "default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "unique_id": "macro.dbt.replace",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\replace.sql",
            "original_file_path": "macros\\utils\\replace.sql",
            "name": "replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "unique_id": "macro.dbt.default__replace",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\replace.sql",
            "original_file_path": "macros\\utils\\replace.sql",
            "name": "default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "unique_id": "macro.dbt.right",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "name": "right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "unique_id": "macro.dbt.default__right",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\right.sql",
            "original_file_path": "macros\\utils\\right.sql",
            "name": "default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "unique_id": "macro.dbt.safe_cast",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "name": "safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "unique_id": "macro.dbt.default__safe_cast",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\safe_cast.sql",
            "original_file_path": "macros\\utils\\safe_cast.sql",
            "name": "default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "unique_id": "macro.dbt.split_part",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "unique_id": "macro.dbt.default__split_part",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.0929015,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "unique_id": "macro.dbt._split_part_negative",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "macros\\utils\\split_part.sql",
            "original_file_path": "macros\\utils\\split_part.sql",
            "name": "_split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "unique_id": "macro.dbt.test_unique",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "unique_id": "macro.dbt.test_not_null",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "unique_id": "macro.dbt.test_accepted_values",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "unique_id": "macro.dbt.test_relationships",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "tests\\generic\\builtin.sql",
            "original_file_path": "tests\\generic\\builtin.sql",
            "name": "test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_oracle.oracle__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "name": "test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\accepted_range.sql",
            "original_file_path": "macros\\generic_tests\\accepted_range.sql",
            "name": "default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "name": "test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\at_least_one.sql",
            "original_file_path": "macros\\generic_tests\\at_least_one.sql",
            "name": "default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "name": "test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\cardinality_equality.sql",
            "original_file_path": "macros\\generic_tests\\cardinality_equality.sql",
            "name": "default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "unique_id": "macro.dbt_utils.test_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "name": "test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "unique_id": "macro.dbt_utils.default__test_equality",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\equality.sql",
            "original_file_path": "macros\\generic_tests\\equality.sql",
            "name": "default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "name": "test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.108615,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\equal_rowcount.sql",
            "original_file_path": "macros\\generic_tests\\equal_rowcount.sql",
            "name": "default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "name": "test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\expression_is_true.sql",
            "original_file_path": "macros\\generic_tests\\expression_is_true.sql",
            "name": "default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "name": "test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\fewer_rows_than.sql",
            "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql",
            "name": "default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "name": "test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql",
            "name": "default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1241646,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "name": "test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_accepted_values.sql",
            "original_file_path": "macros\\generic_tests\\not_accepted_values.sql",
            "name": "default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "unique_id": "macro.dbt_utils.test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "name": "test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_constant.sql",
            "original_file_path": "macros\\generic_tests\\not_constant.sql",
            "name": "default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_empty_string": {
            "unique_id": "macro.dbt_utils.test_not_empty_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_empty_string.sql",
            "original_file_path": "macros\\generic_tests\\not_empty_string.sql",
            "name": "test_not_empty_string",
            "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_empty_string": {
            "unique_id": "macro.dbt_utils.default__test_not_empty_string",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_empty_string.sql",
            "original_file_path": "macros\\generic_tests\\not_empty_string.sql",
            "name": "default__test_not_empty_string",
            "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "name": "test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\not_null_proportion.sql",
            "original_file_path": "macros\\generic_tests\\not_null_proportion.sql",
            "name": "default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "unique_id": "macro.dbt_utils.test_recency",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "name": "test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "unique_id": "macro.dbt_utils.default__test_recency",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\recency.sql",
            "original_file_path": "macros\\generic_tests\\recency.sql",
            "name": "default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.current_timestamp",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1398323,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "name": "test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\relationships_where.sql",
            "original_file_path": "macros\\generic_tests\\relationships_where.sql",
            "name": "default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "name": "test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\sequential_values.sql",
            "original_file_path": "macros\\generic_tests\\sequential_values.sql",
            "name": "default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "name": "test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql",
            "name": "default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "unique_id": "macro.dbt_utils.log_info",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "name": "log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "unique_id": "macro.dbt_utils.default__log_info",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\log_info.sql",
            "original_file_path": "macros\\jinja_helpers\\log_info.sql",
            "name": "default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "name": "pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql",
            "name": "default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "unique_id": "macro.dbt_utils.pretty_time",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "name": "pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\pretty_time.sql",
            "original_file_path": "macros\\jinja_helpers\\pretty_time.sql",
            "name": "default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "unique_id": "macro.dbt_utils.slugify",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\slugify.sql",
            "original_file_path": "macros\\jinja_helpers\\slugify.sql",
            "name": "slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.15552,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\_is_ephemeral.sql",
            "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql",
            "name": "_is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "unique_id": "macro.dbt_utils._is_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\jinja_helpers\\_is_relation.sql",
            "original_file_path": "macros\\jinja_helpers\\_is_relation.sql",
            "name": "_is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "unique_id": "macro.dbt_utils.date_spine",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "unique_id": "macro.dbt_utils.default__date_spine",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\date_spine.sql",
            "original_file_path": "macros\\sql\\date_spine.sql",
            "name": "default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "unique_id": "macro.dbt_utils.deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\deduplicate.sql",
            "original_file_path": "macros\\sql\\deduplicate.sql",
            "name": "bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1710815,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "unique_id": "macro.dbt_utils.generate_series",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1867936,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "unique_id": "macro.dbt_utils.default__generate_series",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\generate_series.sql",
            "original_file_path": "macros\\sql\\generate_series.sql",
            "name": "default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1867936,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_surrogate_key": {
            "unique_id": "macro.dbt_utils.generate_surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\generate_surrogate_key.sql",
            "original_file_path": "macros\\sql\\generate_surrogate_key.sql",
            "name": "generate_surrogate_key",
            "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1867936,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_surrogate_key": {
            "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\generate_surrogate_key.sql",
            "original_file_path": "macros\\sql\\generate_surrogate_key.sql",
            "name": "default__generate_surrogate_key",
            "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1867936,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "unique_id": "macro.dbt_utils.get_column_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_column_values.sql",
            "original_file_path": "macros\\sql\\get_column_values.sql",
            "name": "default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "name": "get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql",
            "name": "default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_query_results_as_dict.sql",
            "original_file_path": "macros\\sql\\get_query_results_as_dict.sql",
            "name": "default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_pattern.sql",
            "original_file_path": "macros\\sql\\get_relations_by_pattern.sql",
            "name": "default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.1929047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_relations_by_prefix.sql",
            "original_file_path": "macros\\sql\\get_relations_by_prefix.sql",
            "name": "default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.get_single_value": {
            "unique_id": "macro.dbt_utils.get_single_value",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_single_value.sql",
            "original_file_path": "macros\\sql\\get_single_value.sql",
            "name": "get_single_value",
            "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_single_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_single_value": {
            "unique_id": "macro.dbt_utils.default__get_single_value",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_single_value.sql",
            "original_file_path": "macros\\sql\\get_single_value.sql",
            "name": "default__get_single_value",
            "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql",
            "name": "_bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql",
            "name": "default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2086413,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\get_table_types_sql.sql",
            "original_file_path": "macros\\sql\\get_table_types_sql.sql",
            "name": "postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "unique_id": "macro.dbt_utils.group_by",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "unique_id": "macro.dbt_utils.default__group_by",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\groupby.sql",
            "original_file_path": "macros\\sql\\groupby.sql",
            "name": "default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "unique_id": "macro.dbt_utils.haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\haversine_distance.sql",
            "original_file_path": "macros\\sql\\haversine_distance.sql",
            "name": "bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "unique_id": "macro.dbt_utils.nullcheck",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\nullcheck.sql",
            "original_file_path": "macros\\sql\\nullcheck.sql",
            "name": "default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\nullcheck_table.sql",
            "original_file_path": "macros\\sql\\nullcheck_table.sql",
            "name": "default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "unique_id": "macro.dbt_utils.pivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2243123,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "unique_id": "macro.dbt_utils.default__pivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\pivot.sql",
            "original_file_path": "macros\\sql\\pivot.sql",
            "name": "default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2399018,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "unique_id": "macro.dbt_utils.safe_add",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "safe_add",
            "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2399018,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "unique_id": "macro.dbt_utils.default__safe_add",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\safe_add.sql",
            "original_file_path": "macros\\sql\\safe_add.sql",
            "name": "default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2399018,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_divide": {
            "unique_id": "macro.dbt_utils.safe_divide",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\safe_divide.sql",
            "original_file_path": "macros\\sql\\safe_divide.sql",
            "name": "safe_divide",
            "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_divide"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2399018,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_divide": {
            "unique_id": "macro.dbt_utils.default__safe_divide",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\safe_divide.sql",
            "original_file_path": "macros\\sql\\safe_divide.sql",
            "name": "default__safe_divide",
            "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.24545,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "unique_id": "macro.dbt_utils.star",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2475355,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "unique_id": "macro.dbt_utils.default__star",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\star.sql",
            "original_file_path": "macros\\sql\\star.sql",
            "name": "default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.250525,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "unique_id": "macro.dbt_utils.surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2515225,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\surrogate_key.sql",
            "original_file_path": "macros\\sql\\surrogate_key.sql",
            "name": "default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2515225,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "unique_id": "macro.dbt_utils.union_relations",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2555096,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "unique_id": "macro.dbt_utils.default__union_relations",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\union.sql",
            "original_file_path": "macros\\sql\\union.sql",
            "name": "default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.string_literal",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2604964,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "unique_id": "macro.dbt_utils.unpivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2634847,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "unique_id": "macro.dbt_utils.default__unpivot",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\unpivot.sql",
            "original_file_path": "macros\\sql\\unpivot.sql",
            "name": "default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_string",
                    "macro.dbt.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2654784,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "unique_id": "macro.dbt_utils.width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "name": "width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2674723,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "name": "default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2684696,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__width_bucket": {
            "unique_id": "macro.dbt_utils.redshift__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "name": "redshift__width_bucket",
            "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2684696,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\sql\\width_bucket.sql",
            "original_file_path": "macros\\sql\\width_bucket.sql",
            "name": "snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.269466,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "unique_id": "macro.dbt_utils.get_url_host",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2704632,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\web\\get_url_host.sql",
            "original_file_path": "macros\\web\\get_url_host.sql",
            "name": "default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part",
                    "macro.dbt.replace",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.27146,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.272457,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\web\\get_url_parameter.sql",
            "original_file_path": "macros\\web\\get_url_parameter.sql",
            "name": "default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.272457,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "unique_id": "macro.dbt_utils.get_url_path",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.274451,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "package_name": "dbt_utils",
            "root_path": "C:\\platform\\dbt\\dbt-libs\\dbt_utils",
            "path": "macros\\web\\get_url_path.sql",
            "original_file_path": "macros\\web\\get_url_path.sql",
            "name": "default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
            "resource_type": "macro",
            "tags": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.position",
                    "macro.dbt.split_part",
                    "macro.dbt.right",
                    "macro.dbt.length",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1672822571.2754476,
            "supported_languages": null
        }
    },
    "docs": {
        "dbt.__overview__": {
            "unique_id": "dbt.__overview__",
            "package_name": "dbt",
            "root_path": "C:\\Users\\huyendtk3\\.conda\\envs\\pythonProject1\\lib\\site-packages\\dbt\\include\\global_project",
            "path": "overview.md",
            "original_file_path": "docs\\overview.md",
            "name": "__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "selectors": {
        "daily": {
            "name": "daily",
            "definition": {
                "method": "tag",
                "value": "daily"
            }
        },
        "weekly": {
            "name": "weekly",
            "definition": {
                "method": "tag",
                "value": "weekly"
            }
        },
        "hourly_schedule": {
            "name": "hourly_schedule",
            "definition": {
                "method": "tag",
                "value": "hourly_schedule"
            }
        }
    },
    "disabled": {
        "test.dga_data_model.not_null_imp_topup_bscore_cif.fe574724d3": [
            {
                "test_metadata": {
                    "name": "not_null",
                    "kwargs": {
                        "column_name": "cif",
                        "model": "{{ get_where_subquery(ref('imp_topup_bscore')) }}"
                    },
                    "namespace": null
                },
                "resource_type": "test",
                "depends_on": {
                    "macros": [
                        "macro.dbt.test_not_null"
                    ],
                    "nodes": []
                },
                "config": {
                    "enabled": false,
                    "alias": null,
                    "schema": "dbt_test__audit",
                    "database": null,
                    "tags": [],
                    "meta": {},
                    "materialized": "test",
                    "severity": "ERROR",
                    "store_failures": null,
                    "where": null,
                    "limit": null,
                    "fail_calc": "count(*)",
                    "warn_if": "!= 0",
                    "error_if": "!= 0"
                },
                "database": "BULANDIN",
                "schema": "df_2_dbt_test__audit",
                "fqn": [
                    "dga_data_model",
                    "base",
                    "not_null_imp_topup_bscore_cif"
                ],
                "unique_id": "test.dga_data_model.not_null_imp_topup_bscore_cif.fe574724d3",
                "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
                "language": "sql",
                "package_name": "dga_data_model",
                "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
                "path": "not_null_imp_topup_bscore_cif.sql",
                "original_file_path": "models\\base\\base.yml",
                "name": "not_null_imp_topup_bscore_cif",
                "alias": "not_null_imp_topup_bscore_cif",
                "checksum": {
                    "name": "none",
                    "checksum": ""
                },
                "tags": [],
                "refs": [
                    [
                        "imp_topup_bscore"
                    ]
                ],
                "sources": [],
                "metrics": [],
                "description": "",
                "columns": {},
                "meta": {},
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "patch_path": null,
                "compiled_path": null,
                "build_path": null,
                "deferred": false,
                "unrendered_config": {},
                "created_at": 1672822572.0498843,
                "config_call_dict": {},
                "column_name": "cif",
                "file_key_name": "models.imp_topup_bscore"
            }
        ],
        "test.dga_data_model.dbt_utils_unique_combination_of_columns_imp_topup_bscore_import_month__cif.6fee4edf88": [
            {
                "test_metadata": {
                    "name": "unique_combination_of_columns",
                    "kwargs": {
                        "combination_of_columns": [
                            "import_month",
                            "cif"
                        ],
                        "model": "{{ get_where_subquery(ref('imp_topup_bscore')) }}"
                    },
                    "namespace": "dbt_utils"
                },
                "resource_type": "test",
                "depends_on": {
                    "macros": [
                        "macro.dga_data_model.test_unique_combination_of_columns",
                        "macro.dbt.get_where_subquery"
                    ],
                    "nodes": []
                },
                "config": {
                    "enabled": false,
                    "alias": "dbt_utils_unique_combination_o_473b47fb743424cbf0bac0161157f8e3",
                    "schema": "dbt_test__audit",
                    "database": null,
                    "tags": [],
                    "meta": {},
                    "materialized": "test",
                    "severity": "ERROR",
                    "store_failures": null,
                    "where": null,
                    "limit": null,
                    "fail_calc": "count(*)",
                    "warn_if": "!= 0",
                    "error_if": "!= 0"
                },
                "database": "BULANDIN",
                "schema": "df_2_dbt_test__audit",
                "fqn": [
                    "dga_data_model",
                    "base",
                    "dbt_utils_unique_combination_of_columns_imp_topup_bscore_import_month__cif"
                ],
                "unique_id": "test.dga_data_model.dbt_utils_unique_combination_of_columns_imp_topup_bscore_import_month__cif.6fee4edf88",
                "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_473b47fb743424cbf0bac0161157f8e3\") }}",
                "language": "sql",
                "package_name": "dga_data_model",
                "root_path": "C:\\Users\\huyendtk3\\dga-data-model",
                "path": "dbt_utils_unique_combination_o_473b47fb743424cbf0bac0161157f8e3.sql",
                "original_file_path": "models\\base\\base.yml",
                "name": "dbt_utils_unique_combination_of_columns_imp_topup_bscore_import_month__cif",
                "alias": "dbt_utils_unique_combination_o_473b47fb743424cbf0bac0161157f8e3",
                "checksum": {
                    "name": "none",
                    "checksum": ""
                },
                "tags": [],
                "refs": [
                    [
                        "imp_topup_bscore"
                    ]
                ],
                "sources": [],
                "metrics": [],
                "description": "",
                "columns": {},
                "meta": {},
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "patch_path": null,
                "compiled_path": null,
                "build_path": null,
                "deferred": false,
                "unrendered_config": {
                    "alias": "dbt_utils_unique_combination_o_473b47fb743424cbf0bac0161157f8e3"
                },
                "created_at": 1672822572.0498843,
                "config_call_dict": {
                    "alias": "dbt_utils_unique_combination_o_473b47fb743424cbf0bac0161157f8e3"
                },
                "column_name": null,
                "file_key_name": "models.imp_topup_bscore"
            }
        ]
    },
    "parent_map": {
        "model.dga_data_model.dwh__ccl_pln": [
            "source.dga_data_model.dwh.ccl_pln"
        ],
        "model.dga_data_model.dwh__demanddeposit_master003": [
            "source.dga_data_model.dwh.ddft_master"
        ],
        "model.dga_data_model.dwh__demanddeposit_transaction001": [
            "source.dga_data_model.dwh.ddft_transaction"
        ],
        "model.dga_data_model.dwh__fixeddeposit_master003": [
            "source.dga_data_model.dwh.fdft_master"
        ],
        "model.dga_data_model.dwh__fixeddeposit_transaction001": [
            "source.dga_data_model.dwh.fdft_transaction"
        ],
        "model.dga_data_model.dwh__glft_his_transaction": [
            "source.dga_data_model.dwh.glft_his_transaction"
        ],
        "model.dga_data_model.dwh__loan_master003": [
            "source.dga_data_model.dwh.lnft_master"
        ],
        "model.dga_data_model.dwh__loan_transaction001": [
            "source.dga_data_model.dwh.lnft_transaction"
        ],
        "model.dga_data_model.htestt": [
            "source.dga_data_model.dwh.ddft_master"
        ],
        "model.dga_data_model.imp_list_fraudulent_sale": [],
        "model.dga_data_model.imp__restrictive_customer": [],
        "model.dga_data_model.imp__topup_bscore": [],
        "model.dga_data_model.landing__lc_cc_mast": [
            "source.dga_data_model.dga_ingest.lc_cc_mast"
        ],
        "model.dga_data_model.int__casa_account": [
            "model.dga_data_model.int__customer",
            "model.dga_data_model.stg_core__demanddeposit_master001",
            "model.dga_data_model.stg_core__demanddeposit_master002"
        ],
        "model.dga_data_model.int__customer": [
            "model.dga_data_model.stg__customer_address",
            "model.dga_data_model.stg__customer_connection_pivot",
            "model.dga_data_model.stg__customer_job_infomation",
            "model.dga_data_model.stg__customer_marital_status",
            "model.dga_data_model.stg__df_customer_sts_type",
            "model.dga_data_model.stg__vw_df_customer_active_latest",
            "model.dga_data_model.stg_core__demanddeposit_master001",
            "model.dga_data_model.stg_core__loan_master002",
            "model.dga_data_model.stg_dwh__customer_master001",
            "model.dga_data_model.stg_dwh__customer_master002",
            "model.dga_data_model.stg_jupiter__jupiter_cif_register_history"
        ],
        "model.dga_data_model.report__list_approved_customer_by_df_001": [
            "model.dga_data_model.imp__restrictive_customer",
            "model.dga_data_model.imp__topup_bscore",
            "model.dga_data_model.imp_list_fraudulent_sale",
            "model.dga_data_model.int__customer",
            "model.dga_data_model.int_way4__contract",
            "model.dga_data_model.int_way4__contract",
            "model.dga_data_model.int_way4__contract"
        ],
        "model.dga_data_model.report__mobio_marketing_campaign": [],
        "model.dga_data_model.stg_core__demanddeposit_master001": [],
        "model.dga_data_model.stg_core__demanddeposit_master002": [],
        "model.dga_data_model.stg_core__demanddeposit_transaction002": [],
        "model.dga_data_model.stg_core__loan_master001": [],
        "model.dga_data_model.stg_core__loan_master002": [],
        "model.dga_data_model.stg_dwh__customer_master001": [],
        "model.dga_data_model.stg_dwh__customer_master002": [],
        "model.dga_data_model.stg_dwh__demanddeposit_master003": [
            "model.dga_data_model.dwh__demanddeposit_master003"
        ],
        "model.dga_data_model.stg_dwh__dwh_csdm_branch": [],
        "model.dga_data_model.stg_dwh__dwh_csdm_transaction_code": [],
        "model.dga_data_model.stg_dwh__dwh_cydm_rate_history": [],
        "model.dga_data_model.stg_dwh__dwh_dddm_product": [],
        "model.dga_data_model.stg_dwh__dwh_fddm_product": [],
        "model.dga_data_model.stg_dwh__fixeddeposit_master002": [],
        "model.dga_data_model.stg_dwh__fixeddeposit_master003": [],
        "model.dga_data_model.stg_jupiter__jupiter_cif_register_history": [],
        "model.dga_data_model.stg_way4__card_acnt_contract": [],
        "model.dga_data_model.stg_way4__card_appl_product": [],
        "model.dga_data_model.stg_way4__card_client": [],
        "model.dga_data_model.stg_way4__card_contr_status": [],
        "model.dga_data_model.stg_way4__card_f_i": [],
        "model.dga_data_model.stg__customer_address": [],
        "model.dga_data_model.stg__customer_connection": [],
        "model.dga_data_model.stg__customer_connection_pivot": [
            "model.dga_data_model.stg__customer_connection"
        ],
        "model.dga_data_model.stg__customer_job_infomation": [],
        "model.dga_data_model.stg__customer_marital_status": [],
        "model.dga_data_model.stg__customer_subbranch_no": [
            "model.dga_data_model.int__casa_account"
        ],
        "model.dga_data_model.stg__df_card_channel": [],
        "model.dga_data_model.stg__df_casa_channel_trn_type": [],
        "model.dga_data_model.stg__df_customer_sts_type": [],
        "model.dga_data_model.stg__loan_application_facility": [],
        "model.dga_data_model.stg__vw_df_customer_active_latest": [],
        "test.dga_data_model.unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date.4761489701": [
            "model.dga_data_model.dwh__demanddeposit_master003"
        ],
        "test.dga_data_model.unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date.744a049d76": [
            "model.dga_data_model.dwh__fixeddeposit_master003"
        ],
        "test.dga_data_model.unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date.caecc3fb45": [
            "model.dga_data_model.dwh__loan_master003"
        ],
        "test.dga_data_model.dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number.d3e2d5794d": [
            "model.dga_data_model.report__list_approved_customer_by_df_001"
        ],
        "test.dga_data_model.unique_stg__customer_connection_pivot_customer_number.4aa7036c16": [
            "model.dga_data_model.stg__customer_connection_pivot"
        ],
        "test.dga_data_model.source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date.1cf303bcbd": [
            "source.dga_data_model.dwh.ddft_master"
        ],
        "test.dga_data_model.source_is_recency_dwh_ddft_master_etl_date.58b2088fa3": [
            "source.dga_data_model.dwh.ddft_master"
        ],
        "test.dga_data_model.source_is_recency_dwh_ddft_transaction_trn_date.b05d64f57c": [
            "source.dga_data_model.dwh.ddft_transaction"
        ],
        "test.dga_data_model.source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date.6f8ee49248": [
            "source.dga_data_model.dwh.fdft_master"
        ],
        "test.dga_data_model.source_is_recency_dwh_fdft_master_etl_date.9ed31cec99": [
            "source.dga_data_model.dwh.fdft_master"
        ],
        "test.dga_data_model.source_is_recency_dwh_fdft_transaction_trn_date.05214279e7": [
            "source.dga_data_model.dwh.fdft_transaction"
        ],
        "test.dga_data_model.source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date.f516a10e24": [
            "source.dga_data_model.dwh.lnft_master"
        ],
        "test.dga_data_model.source_is_recency_dwh_lnft_master_etl_date.7d978c35de": [
            "source.dga_data_model.dwh.lnft_master"
        ],
        "test.dga_data_model.source_is_recency_dwh_lnft_transaction_tran_date.396f7d9c7e": [
            "source.dga_data_model.dwh.lnft_transaction"
        ],
        "model.dga_data_model.int_way4__client": [
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.int__customer",
            "model.dga_data_model.int__customer",
            "model.dga_data_model.int__customer",
            "model.dga_data_model.stg_way4__card_acnt_contract",
            "model.dga_data_model.stg_way4__card_client"
        ],
        "model.dga_data_model.int_way4__contract": [
            "model.dga_data_model.stg__card_acnt_contract_plus"
        ],
        "model.dga_data_model.int_way4__card": [
            "model.dga_data_model.int_way4__contract",
            "model.dga_data_model.stg__card_acnt_contract_plus",
            "model.dga_data_model.stg_way4__card_f_i"
        ],
        "model.dga_data_model.stg__card_acnt_contract_plus": [
            "model.dga_data_model.int_way4__client",
            "model.dga_data_model.stg__df_card_channel",
            "model.dga_data_model.stg_way4__card_acnt_contract",
            "model.dga_data_model.stg_way4__card_acnt_contract",
            "model.dga_data_model.stg_way4__card_appl_product",
            "model.dga_data_model.stg_way4__card_contr_status"
        ],
        "model.dga_data_model.int__arrangement": [
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.int_way4__card",
            "model.dga_data_model.int_way4__card"
        ],
        "model.dga_data_model.int__fd_account": [
            "model.dga_data_model.stg_dwh__dwh_csdm_branch",
            "model.dga_data_model.stg_dwh__dwh_cydm_rate_history",
            "model.dga_data_model.stg_dwh__dwh_fddm_product",
            "model.dga_data_model.stg_dwh__fixeddeposit_master002",
            "model.dga_data_model.stg_dwh__fixeddeposit_master002",
            "model.dga_data_model.stg_dwh__fixeddeposit_master003"
        ],
        "model.dga_data_model.int__ld_account": [
            "model.dga_data_model.stg__loan_application_facility",
            "model.dga_data_model.stg_core__loan_master001",
            "model.dga_data_model.stg_core__loan_master002",
            "model.dga_data_model.stg_dwh__dwh_cydm_rate_history",
            "model.dga_data_model.stg_dwh__dwh_cydm_rate_history"
        ],
        "snapshot.dga_data_model.mart_dim_casa_account": [
            "model.dga_data_model.int__casa_account"
        ],
        "snapshot.dga_data_model.mart_dim_customer": [
            "model.dga_data_model.int__customer",
            "model.dga_data_model.stg__customer_subbranch_no"
        ],
        "model.dga_data_model.stg_core__demanddeposit_transaction001": [],
        "model.dga_data_model.mart_dim_date": [],
        "model.dga_data_model.mart_trans_casa": [
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.mart_dim_date",
            "model.dga_data_model.stg__df_casa_channel_trn_type",
            "model.dga_data_model.stg_core__demanddeposit_master002",
            "model.dga_data_model.stg_core__demanddeposit_master002",
            "model.dga_data_model.stg_core__demanddeposit_transaction001",
            "model.dga_data_model.stg_dwh__dwh_csdm_branch",
            "model.dga_data_model.stg_dwh__dwh_csdm_branch",
            "model.dga_data_model.stg_dwh__dwh_csdm_transaction_code",
            "model.dga_data_model.stg_dwh__dwh_dddm_product"
        ],
        "model.dga_data_model.mart_fct_agg_casa_bal_daily": [
            "model.dga_data_model.stg_core__demanddeposit_master001",
            "model.dga_data_model.stg_core__demanddeposit_master002",
            "model.dga_data_model.stg_core__demanddeposit_master003"
        ],
        "model.dga_data_model.stg_core__demanddeposit_master003": [],
        "model.dga_data_model.mart_fct_agg_casa_txn_daily": [
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.mart_trans_casa_mpayroll": [
            "model.dga_data_model.mart_trans_casa",
            "model.dga_data_model.mart_trans_casa"
        ],
        "source.dga_data_model.dwh.ddft_master": [],
        "source.dga_data_model.dwh.ddft_transaction": [],
        "source.dga_data_model.dwh.fdft_master": [],
        "source.dga_data_model.dwh.fdft_transaction": [],
        "source.dga_data_model.dwh.lnft_master": [],
        "source.dga_data_model.dwh.lnft_transaction": [],
        "source.dga_data_model.dwh.ccl_pln": [],
        "source.dga_data_model.dwh.glft_his_transaction": [],
        "source.dga_data_model.dga_ingest.lc_cc_mast": [],
        "source.dga_data_model.base.dbt_test_materialized": []
    },
    "child_map": {
        "model.dga_data_model.dwh__ccl_pln": [],
        "model.dga_data_model.dwh__demanddeposit_master003": [
            "model.dga_data_model.stg_dwh__demanddeposit_master003",
            "test.dga_data_model.unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date.4761489701"
        ],
        "model.dga_data_model.dwh__demanddeposit_transaction001": [],
        "model.dga_data_model.dwh__fixeddeposit_master003": [
            "test.dga_data_model.unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date.744a049d76"
        ],
        "model.dga_data_model.dwh__fixeddeposit_transaction001": [],
        "model.dga_data_model.dwh__glft_his_transaction": [],
        "model.dga_data_model.dwh__loan_master003": [
            "test.dga_data_model.unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date.caecc3fb45"
        ],
        "model.dga_data_model.dwh__loan_transaction001": [],
        "model.dga_data_model.htestt": [],
        "model.dga_data_model.imp_list_fraudulent_sale": [
            "model.dga_data_model.report__list_approved_customer_by_df_001"
        ],
        "model.dga_data_model.imp__restrictive_customer": [
            "model.dga_data_model.report__list_approved_customer_by_df_001"
        ],
        "model.dga_data_model.imp__topup_bscore": [
            "model.dga_data_model.report__list_approved_customer_by_df_001"
        ],
        "model.dga_data_model.landing__lc_cc_mast": [],
        "model.dga_data_model.int__casa_account": [
            "model.dga_data_model.int__arrangement",
            "model.dga_data_model.int__arrangement",
            "model.dga_data_model.int_way4__client",
            "model.dga_data_model.mart_trans_casa",
            "model.dga_data_model.mart_trans_casa",
            "model.dga_data_model.stg__customer_subbranch_no",
            "snapshot.dga_data_model.mart_dim_casa_account"
        ],
        "model.dga_data_model.int__customer": [
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.int_way4__client",
            "model.dga_data_model.int_way4__client",
            "model.dga_data_model.int_way4__client",
            "model.dga_data_model.report__list_approved_customer_by_df_001",
            "snapshot.dga_data_model.mart_dim_customer"
        ],
        "model.dga_data_model.report__list_approved_customer_by_df_001": [
            "test.dga_data_model.dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number.d3e2d5794d"
        ],
        "model.dga_data_model.report__mobio_marketing_campaign": [],
        "model.dga_data_model.stg_core__demanddeposit_master001": [
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.int__customer",
            "model.dga_data_model.mart_fct_agg_casa_bal_daily"
        ],
        "model.dga_data_model.stg_core__demanddeposit_master002": [
            "model.dga_data_model.int__casa_account",
            "model.dga_data_model.mart_fct_agg_casa_bal_daily",
            "model.dga_data_model.mart_trans_casa",
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.stg_core__demanddeposit_transaction002": [],
        "model.dga_data_model.stg_core__loan_master001": [
            "model.dga_data_model.int__ld_account"
        ],
        "model.dga_data_model.stg_core__loan_master002": [
            "model.dga_data_model.int__customer",
            "model.dga_data_model.int__ld_account"
        ],
        "model.dga_data_model.stg_dwh__customer_master001": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg_dwh__customer_master002": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg_dwh__demanddeposit_master003": [],
        "model.dga_data_model.stg_dwh__dwh_csdm_branch": [
            "model.dga_data_model.int__fd_account",
            "model.dga_data_model.mart_trans_casa",
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.stg_dwh__dwh_csdm_transaction_code": [
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.stg_dwh__dwh_cydm_rate_history": [
            "model.dga_data_model.int__fd_account",
            "model.dga_data_model.int__ld_account",
            "model.dga_data_model.int__ld_account"
        ],
        "model.dga_data_model.stg_dwh__dwh_dddm_product": [
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.stg_dwh__dwh_fddm_product": [
            "model.dga_data_model.int__fd_account"
        ],
        "model.dga_data_model.stg_dwh__fixeddeposit_master002": [
            "model.dga_data_model.int__fd_account",
            "model.dga_data_model.int__fd_account"
        ],
        "model.dga_data_model.stg_dwh__fixeddeposit_master003": [
            "model.dga_data_model.int__fd_account"
        ],
        "model.dga_data_model.stg_jupiter__jupiter_cif_register_history": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg_way4__card_acnt_contract": [
            "model.dga_data_model.int_way4__client",
            "model.dga_data_model.stg__card_acnt_contract_plus",
            "model.dga_data_model.stg__card_acnt_contract_plus"
        ],
        "model.dga_data_model.stg_way4__card_appl_product": [
            "model.dga_data_model.stg__card_acnt_contract_plus"
        ],
        "model.dga_data_model.stg_way4__card_client": [
            "model.dga_data_model.int_way4__client"
        ],
        "model.dga_data_model.stg_way4__card_contr_status": [
            "model.dga_data_model.stg__card_acnt_contract_plus"
        ],
        "model.dga_data_model.stg_way4__card_f_i": [
            "model.dga_data_model.int_way4__card"
        ],
        "model.dga_data_model.stg__customer_address": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg__customer_connection": [
            "model.dga_data_model.stg__customer_connection_pivot"
        ],
        "model.dga_data_model.stg__customer_connection_pivot": [
            "model.dga_data_model.int__customer",
            "test.dga_data_model.unique_stg__customer_connection_pivot_customer_number.4aa7036c16"
        ],
        "model.dga_data_model.stg__customer_job_infomation": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg__customer_marital_status": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg__customer_subbranch_no": [
            "snapshot.dga_data_model.mart_dim_customer"
        ],
        "model.dga_data_model.stg__df_card_channel": [
            "model.dga_data_model.stg__card_acnt_contract_plus"
        ],
        "model.dga_data_model.stg__df_casa_channel_trn_type": [
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.stg__df_customer_sts_type": [
            "model.dga_data_model.int__customer"
        ],
        "model.dga_data_model.stg__loan_application_facility": [
            "model.dga_data_model.int__ld_account"
        ],
        "model.dga_data_model.stg__vw_df_customer_active_latest": [
            "model.dga_data_model.int__customer"
        ],
        "test.dga_data_model.unique_combination_of_columns_dwh__demanddeposit_master003_etl_date__account_no_sk__etl_date.4761489701": [],
        "test.dga_data_model.unique_combination_of_columns_dwh__fixeddeposit_master003_etl_date__account_sk__etl_date.744a049d76": [],
        "test.dga_data_model.unique_combination_of_columns_dwh__loan_master003_etl_date__account_no_sk__etl_date.caecc3fb45": [],
        "test.dga_data_model.dbt_utils_unique_combination_of_columns_report__list_approved_customer_by_df_001_created_month__customer_number.d3e2d5794d": [],
        "test.dga_data_model.unique_stg__customer_connection_pivot_customer_number.4aa7036c16": [],
        "test.dga_data_model.source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date.1cf303bcbd": [],
        "test.dga_data_model.source_is_recency_dwh_ddft_master_etl_date.58b2088fa3": [],
        "test.dga_data_model.source_is_recency_dwh_ddft_transaction_trn_date.b05d64f57c": [],
        "test.dga_data_model.source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date.6f8ee49248": [],
        "test.dga_data_model.source_is_recency_dwh_fdft_master_etl_date.9ed31cec99": [],
        "test.dga_data_model.source_is_recency_dwh_fdft_transaction_trn_date.05214279e7": [],
        "test.dga_data_model.source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date.f516a10e24": [],
        "test.dga_data_model.source_is_recency_dwh_lnft_master_etl_date.7d978c35de": [],
        "test.dga_data_model.source_is_recency_dwh_lnft_transaction_tran_date.396f7d9c7e": [],
        "model.dga_data_model.int_way4__client": [
            "model.dga_data_model.stg__card_acnt_contract_plus"
        ],
        "model.dga_data_model.int_way4__contract": [
            "model.dga_data_model.int_way4__card",
            "model.dga_data_model.report__list_approved_customer_by_df_001",
            "model.dga_data_model.report__list_approved_customer_by_df_001",
            "model.dga_data_model.report__list_approved_customer_by_df_001"
        ],
        "model.dga_data_model.int_way4__card": [
            "model.dga_data_model.int__arrangement",
            "model.dga_data_model.int__arrangement"
        ],
        "model.dga_data_model.stg__card_acnt_contract_plus": [
            "model.dga_data_model.int_way4__card",
            "model.dga_data_model.int_way4__contract"
        ],
        "model.dga_data_model.int__arrangement": [],
        "model.dga_data_model.int__fd_account": [],
        "model.dga_data_model.int__ld_account": [],
        "snapshot.dga_data_model.mart_dim_casa_account": [],
        "snapshot.dga_data_model.mart_dim_customer": [],
        "model.dga_data_model.stg_core__demanddeposit_transaction001": [
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.mart_dim_date": [
            "model.dga_data_model.mart_trans_casa"
        ],
        "model.dga_data_model.mart_trans_casa": [
            "model.dga_data_model.mart_fct_agg_casa_txn_daily",
            "model.dga_data_model.mart_trans_casa_mpayroll",
            "model.dga_data_model.mart_trans_casa_mpayroll"
        ],
        "model.dga_data_model.mart_fct_agg_casa_bal_daily": [],
        "model.dga_data_model.stg_core__demanddeposit_master003": [
            "model.dga_data_model.mart_fct_agg_casa_bal_daily"
        ],
        "model.dga_data_model.mart_fct_agg_casa_txn_daily": [],
        "model.dga_data_model.mart_trans_casa_mpayroll": [],
        "source.dga_data_model.dwh.ddft_master": [
            "model.dga_data_model.dwh__demanddeposit_master003",
            "model.dga_data_model.htestt",
            "test.dga_data_model.source_is_recency_dwh_ddft_master_etl_date.58b2088fa3",
            "test.dga_data_model.source_unique_combination_of_columns_dwh_ddft_master_etl_date__account_no_sk__etl_date.1cf303bcbd"
        ],
        "source.dga_data_model.dwh.ddft_transaction": [
            "model.dga_data_model.dwh__demanddeposit_transaction001",
            "test.dga_data_model.source_is_recency_dwh_ddft_transaction_trn_date.b05d64f57c"
        ],
        "source.dga_data_model.dwh.fdft_master": [
            "model.dga_data_model.dwh__fixeddeposit_master003",
            "test.dga_data_model.source_is_recency_dwh_fdft_master_etl_date.9ed31cec99",
            "test.dga_data_model.source_unique_combination_of_columns_dwh_fdft_master_etl_date__account_sk__etl_date.6f8ee49248"
        ],
        "source.dga_data_model.dwh.fdft_transaction": [
            "model.dga_data_model.dwh__fixeddeposit_transaction001",
            "test.dga_data_model.source_is_recency_dwh_fdft_transaction_trn_date.05214279e7"
        ],
        "source.dga_data_model.dwh.lnft_master": [
            "model.dga_data_model.dwh__loan_master003",
            "test.dga_data_model.source_is_recency_dwh_lnft_master_etl_date.7d978c35de",
            "test.dga_data_model.source_unique_combination_of_columns_dwh_lnft_master_etl_date__account_no_sk__etl_date.f516a10e24"
        ],
        "source.dga_data_model.dwh.lnft_transaction": [
            "model.dga_data_model.dwh__loan_transaction001",
            "test.dga_data_model.source_is_recency_dwh_lnft_transaction_tran_date.396f7d9c7e"
        ],
        "source.dga_data_model.dwh.ccl_pln": [
            "model.dga_data_model.dwh__ccl_pln"
        ],
        "source.dga_data_model.dwh.glft_his_transaction": [
            "model.dga_data_model.dwh__glft_his_transaction"
        ],
        "source.dga_data_model.dga_ingest.lc_cc_mast": [
            "model.dga_data_model.landing__lc_cc_mast"
        ],
        "source.dga_data_model.base.dbt_test_materialized": []
    }
}